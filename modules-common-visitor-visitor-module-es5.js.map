{"version":3,"sources":["webpack:///node_modules/@techiediaries/ngx-qrcode/__ivy_ngcc__/fesm2015/techiediaries-ngx-qrcode.js","webpack:///node_modules/@techiediaries/ngx-qrcode/node_modules/tslib/tslib.es6.js","webpack:///node_modules/base64-js/index.js","webpack:///node_modules/dijkstrajs/dijkstra.js","webpack:///node_modules/ieee754/index.js","webpack:///node_modules/qrcode/lib/browser.js","webpack:///node_modules/qrcode/lib/can-promise.js","webpack:///node_modules/qrcode/lib/core/alignment-pattern.js","webpack:///node_modules/qrcode/lib/core/alphanumeric-data.js","webpack:///node_modules/qrcode/lib/core/bit-buffer.js","webpack:///node_modules/qrcode/lib/core/bit-matrix.js","webpack:///node_modules/qrcode/lib/core/byte-data.js","webpack:///node_modules/qrcode/lib/core/error-correction-code.js","webpack:///node_modules/qrcode/lib/core/error-correction-level.js","webpack:///node_modules/qrcode/lib/core/finder-pattern.js","webpack:///node_modules/qrcode/lib/core/format-info.js","webpack:///node_modules/qrcode/lib/core/galois-field.js","webpack:///node_modules/qrcode/lib/core/kanji-data.js","webpack:///node_modules/qrcode/lib/core/mask-pattern.js","webpack:///node_modules/qrcode/lib/core/mode.js","webpack:///node_modules/qrcode/lib/core/numeric-data.js","webpack:///node_modules/qrcode/lib/core/polynomial.js","webpack:///node_modules/qrcode/lib/core/qrcode.js","webpack:///node_modules/qrcode/lib/core/reed-solomon-encoder.js","webpack:///node_modules/qrcode/lib/core/regex.js","webpack:///node_modules/qrcode/lib/core/segments.js","webpack:///node_modules/qrcode/lib/core/utils.js","webpack:///node_modules/qrcode/lib/core/version-check.js","webpack:///node_modules/qrcode/lib/core/version.js","webpack:///node_modules/qrcode/lib/renderer/canvas.js","webpack:///node_modules/qrcode/lib/renderer/svg-tag.js","webpack:///node_modules/qrcode/lib/renderer/utils.js","webpack:///node_modules/qrcode/lib/utils/typedarray-buffer.js","webpack:///node_modules/qrcode/node_modules/buffer/index.js","webpack:///node_modules/qrcode/node_modules/isarray/index.js","webpack:///src/app/modules/common/visitor/components/create-vendor-frquent-visitor/create-vendor-frquent-visitor.component.html","webpack:///src/app/modules/common/visitor/components/currently-checkedin-list/currently-checkedin-list.component.html","webpack:///src/app/modules/common/visitor/components/exp-user-visitor-list/exp-user-visitor-list.component.html","webpack:///src/app/modules/common/visitor/components/exp-visitor-confirm/exp-visitor-confirm.component.html","webpack:///src/app/modules/common/visitor/components/exp-visitor-create-chekin/exp-visitor-create-chekin.component.html","webpack:///src/app/modules/common/visitor/components/exp-visitor-list/exp-visitor-list.component.html","webpack:///src/app/modules/common/visitor/components/frequent-vendor-list/frequent-vendor-list.component.html","webpack:///src/app/modules/common/visitor/components/user-visitor-list/user-visitor-list.component.html","webpack:///src/app/modules/common/visitor/components/visitor-create-checkin/visitor-create-checkin.component.html","webpack:///src/app/modules/common/visitor/components/visitor-history/visitor-history.component.html","webpack:///src/app/modules/common/visitor/components/visitor-setup/visitor-setup.component.html","webpack:///src/app/modules/common/visitor/visitor.component.html","webpack:///src/app/modules/common/visitor/components/create-vendor-frquent-visitor/create-vendor-frquent-visitor.component.scss","webpack:///src/app/modules/common/visitor/components/create-vendor-frquent-visitor/create-vendor-frquent-visitor.component.ts","webpack:///src/app/modules/common/visitor/components/currently-checkedin-list/currently-checkedin-list.component.scss","webpack:///src/app/modules/common/visitor/components/currently-checkedin-list/currently-checkedin-list.component.ts","webpack:///src/app/modules/common/visitor/components/exp-user-visitor-list/exp-user-visitor-list.component.scss","webpack:///src/app/modules/common/visitor/components/exp-user-visitor-list/exp-user-visitor-list.component.ts","webpack:///src/app/modules/common/visitor/components/exp-visitor-confirm/exp-visitor-confirm.component.scss","webpack:///src/app/modules/common/visitor/components/exp-visitor-confirm/exp-visitor-confirm.component.ts","webpack:///src/app/modules/common/visitor/components/exp-visitor-create-chekin/exp-visitor-create-chekin.component.scss","webpack:///src/app/modules/common/visitor/components/exp-visitor-create-chekin/exp-visitor-create-chekin.component.ts","webpack:///src/app/modules/common/visitor/components/exp-visitor-list/exp-visitor-list.component.scss","webpack:///src/app/modules/common/visitor/components/exp-visitor-list/exp-visitor-list.component.ts","webpack:///src/app/modules/common/visitor/components/frequent-vendor-list/frequent-vendor-list.component.scss","webpack:///src/app/modules/common/visitor/components/frequent-vendor-list/frequent-vendor-list.component.ts","webpack:///src/app/modules/common/visitor/components/user-visitor-list/user-visitor-list.component.scss","webpack:///src/app/modules/common/visitor/components/user-visitor-list/user-visitor-list.component.ts","webpack:///src/app/modules/common/visitor/components/visitor-create-checkin/visitor-create-checkin.component.scss","webpack:///src/app/modules/common/visitor/components/visitor-create-checkin/visitor-create-checkin.component.ts","webpack:///src/app/modules/common/visitor/components/visitor-history/visitor-history.component.scss","webpack:///src/app/modules/common/visitor/components/visitor-history/visitor-history.component.ts","webpack:///src/app/modules/common/visitor/components/visitor-setup/visitor-setup.component.scss","webpack:///src/app/modules/common/visitor/components/visitor-setup/visitor-setup.component.ts","webpack:///src/app/modules/common/visitor/visitor-routing.module.ts","webpack:///src/app/modules/common/visitor/visitor.component.scss","webpack:///src/app/modules/common/visitor/visitor.component.ts","webpack:///src/app/modules/common/visitor/visitor.module.ts"],"names":["_c0","NgxQrcodeElementTypes","NgxQrcodeErrorCorrectionLevels","DEFAULT_VALUES","elementType","URL","cssClass","value","version","errorCorrectionLevel","MEDIUM","margin","scale","width","colorDark","colorLight","QrcodeComponent","renderer","createQRCode","element","CANVAS","createElement","toCanvas","then","renderElement","e","removeElementChildren","console","error","toDataURL","src","setAttribute","alt","color","dark","light","canvas","appendChild","qrcElement","nativeElement","childNodes","node","removeChild","ɵfac","QrcodeComponent_Factory","t","ɵcmp","type","selectors","viewQuery","QrcodeComponent_Query","rf","ctx","_t","first","inputs","features","decls","vars","consts","template","QrcodeComponent_Template","encapsulation","changeDetection","ctorParameters","prototype","NgxQRCodeModule","ɵmod","ɵinj","factory","NgxQRCodeModule_Factory","args","selector","OnPush","ngJitMode","declarations","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","s","i","n","arguments","length","call","apply","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","rejected","result","done","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","__createBinding","o","m","k","k2","undefined","__exportStar","__values","__read","ar","__spread","concat","__spreadArrays","il","a","j","jl","__await","__asyncGenerator","asyncIterator","q","resume","settle","fulfill","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","__importDefault","__classPrivateFieldGet","receiver","privateMap","has","get","__classPrivateFieldSet","set","byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","Uint8Array","code","len","charCodeAt","getLens","b64","Error","validLen","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","start","end","output","join","extraBytes","parts","maxChunkLength","len2","dijkstra","single_source_shortest_paths","graph","predecessors","costs","open","PriorityQueue","make","closest","u","cost_of_s_to_u","adjacent_nodes","cost_of_e","cost_of_s_to_u_plus_cost_of_e","cost_of_s_to_v","first_visit","empty","cost","msg","extract_shortest_path_from_predecessor_list","nodes","predecessor","reverse","find_path","opts","T","queue","sorter","default_sorter","item","sort","module","read","buffer","offset","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","Infinity","Math","pow","write","rt","abs","isNaN","floor","log","LN2","canPromise","QRCode","CanvasRenderer","SvgRenderer","renderCanvas","renderFunc","text","cb","slice","argsNum","isLastArgCb","getContext","data","bind","render","renderToDataURL","toString","getSymbolSize","getRowColCoords","posCount","size","intervals","ceil","positions","getPositions","coords","pos","posLength","Mode","ALPHA_NUM_CHARS","AlphanumericData","mode","ALPHANUMERIC","getBitsLength","getLength","bitBuffer","put","BitBuffer","index","bufIndex","putBit","getLengthInBits","bit","BufferUtil","BitMatrix","alloc","reservedBit","row","col","reserved","xor","isReserved","ByteData","BYTE","from","l","ECLevel","EC_BLOCKS_TABLE","EC_CODEWORDS_TABLE","getBlocksCount","L","M","Q","H","getTotalCodewordsCount","fromString","string","lcStr","toLowerCase","isValid","level","defaultValue","FINDER_PATTERN_SIZE","Utils","G15","G15_MASK","G15_BCH","getBCHDigit","getEncodedBits","mask","EXP_TABLE","LOG_TABLE","initTables","x","exp","mul","KanjiData","KANJI","toSJIS","Patterns","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","PenaltyScores","N1","N2","N3","N4","parseInt","getPenaltyN1","points","sameCountCol","sameCountRow","lastCol","lastRow","getPenaltyN2","last","getPenaltyN3","bitsCol","bitsRow","getPenaltyN4","darkCount","modulesCount","getMaskAt","maskPattern","applyMask","pattern","getBestMask","setupFormatFunc","numPatterns","keys","bestPattern","lowerPenalty","penalty","VersionCheck","Regex","NUMERIC","id","ccBits","MIXED","getCharCountIndicator","getBestModeForData","dataStr","testNumeric","testAlphanumeric","testKanji","NumericData","group","substr","remainingNum","GF","p1","p2","coeff","divident","divisor","generateECPolynomial","degree","poly","AlignmentPattern","FinderPattern","MaskPattern","ECCode","ReedSolomonEncoder","Version","FormatInfo","Segments","isArray","setupFinderPattern","matrix","setupTimingPattern","setupAlignmentPattern","setupVersionInfo","bits","setupFormatInfo","setupData","inc","bitIndex","byteIndex","createData","segments","forEach","totalCodewords","getSymbolTotalCodewords","ecTotalCodewords","dataTotalCodewordsBits","remainingByte","createCodewords","dataTotalCodewords","ecTotalBlocks","blocksInGroup2","blocksInGroup1","totalCodewordsInGroup1","dataCodewordsInGroup1","dataCodewordsInGroup2","ecCount","rs","dcData","ecData","maxDataSize","dataSize","encode","max","createSymbol","fromArray","estimatedVersion","rawSegments","rawSplit","getBestVersionForData","bestVersion","dataBits","moduleCount","modules","options","toSJISFunc","setToSJISFunction","Polynomial","Buffer","genPoly","initialize","pad","paddedData","remainder","buff","copy","numeric","alphanumeric","kanji","replace","byte","RegExp","BYTE_KANJI","TEST_KANJI","TEST_NUMERIC","TEST_ALPHANUMERIC","str","test","getStringByteLength","unescape","encodeURIComponent","getSegments","regex","exec","getSegmentsFromString","numSegs","alphaNumSegs","byteSegs","kanjiSegs","isKanjiModeEnabled","segs","s1","s2","map","obj","getSegmentBitsLength","mergeSegments","reduce","acc","curr","prevSeg","buildNodes","seg","buildGraph","table","prevNodeIds","nodeGroup","currentNodeIds","lastCount","prevNodeId","buildSingleSegment","modesHint","bestMode","array","path","optimizedSegs","toSJISFunction","CODEWORDS_COUNT","digit","G18","G18_BCH","getBestVersionForDataLength","currentVersion","getCapacity","getReservedBitsCount","getTotalBitsFromDataArray","totalBits","reservedBits","getBestVersionForMixedData","usableBits","ecl","clearCanvas","clearRect","height","style","getCanvasElement","document","qrData","canvasEl","getOptions","getImageWidth","image","createImageData","qrToImageData","putImageData","rendererOpts","quality","getColorAttrib","attrib","alpha","hex","toFixed","svgCmd","cmd","qrToPath","moveBy","newRow","lineLength","qrcodesize","bg","viewBox","svgTag","hex2rgba","hexCode","split","hexValue","getScale","qrSize","imgData","qr","symbolSize","scaledMargin","palette","posDst","pxColor","iSrc","jSrc","typedArraySupport","foo","TYPED_ARRAY_SUPPORT","K_MAX_LENGTH","arg","allocUnsafe","species","configurable","enumerable","writable","checked","RangeError","isnan","val","createBuffer","that","buf","actual","fromArrayLike","fromArrayBuffer","byteOffset","fromObject","isBuffer","ArrayBuffer","utf8ToBytes","units","codePoint","leadSurrogate","bytes","isView","blitBuffer","dst","utf8Write","isFinite","remaining","newBuf","subarray","sliceLen","targetStart","fill","list","_isBuffer","base64","ieee754","customInspectSymbol","SlowBuffer","INSPECT_MAX_BYTES","kMaxLength","proto","encodingOrOffset","poolSize","fromArrayView","isInstance","SharedArrayBuffer","valueOf","toPrimitive","assertSize","encoding","allocUnsafeSlow","isEncoding","arrayView","numberIsNaN","compare","min","String","mustMatch","loweredCase","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","swap16","swap32","swap64","toLocaleString","equals","inspect","trim","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","includes","hexWrite","Number","strLen","parsed","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","toJSON","_arr","res","firstByte","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","fromCharCode","ret","out","hexSliceLookupTable","checkOffset","ext","readUintLE","readUIntLE","noAssert","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","checkInt","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","copyWithin","INVALID_BASE64_RE","base64clean","byteArray","hi","lo","name","alphabet","i16","CreateVendorFrquentVisitorComponent","apartmentService","visitorService","lookupService","sessionService","staffService","router","activateRouter","sharedService","_changeDetectorRef","visitor","message","isDataLoaded","visitTypeList","visitCategoryList","towerList","unitList","staffsList","block","separateDialCode","SearchCountryField","CountryISO","preferredCountries","UnitedStates","UnitedKingdom","url","subscribe","urlType","visitTypeId","visitorCategoryId","blockId","primaryName","event","lookupValueId","apartmentUnitId","tomeetStaffId","block_Id","getUnits","buId","getPrimaryName","staffId","tower","apartmentId","getApartmentBlockAndBlockUnitIsLivingByApartmentId","toPromise","blockUnit","il_Label","navigate","relativeTo","parent","form","valid","window","scroll","top","behavior","appearance","content","shake","showIcon","markForCheck","params","expectedVisitor","expectedVisitorPhone","number","expectedVisitorInTime","format","expectedVisitorOutTime","userId","toISOString","countryCode","addExpectedVisitor","openSnackBar","errorMessage","resetField","getTowers","isAdmin","apartmentBlockUnitID","visitParams","ApartmentId","LookupTypeId","getLookupValueByLookupTypeId","visitCategoryParams","staffParms","RoleTypeId","roleTypeId","getAllStaffs","CurrentlyCheckedinListComponent","injector","dialog","activeRouter","visitorList","searchData","ItemStartIndex","totalItems","itemLimit","modalService","date","timeZone","time","ItemEndIndex","dialogData","dialogRef","panelClass","disableClose","afterClosed","dialogResult","isVisitorDataLoaded","apartmentParams","getYetToCheckoutVisitorsByApartmentId","timezonecast","getVisitorList","None","ExpUserVisitorListComponent","visitorSearch","expectedVisitorId","showConfirmModal","param","getExpectedVisitorsByApartmentUnitId","apiSubscribe","unitlistdeleteindexcast","deleteBy","deleteExpectedVisitorById","setUnitListDeleteIndex","filter","unsubscribe","ExpVisitorConfirmComponent","activateRoute","visitorStructure","correctionLevel","HIGH","getExpectedVisitorById","createBtnName","createBtnUrl","viewBtnName","viewBtnUrl","animations","ExpVisitorCreateChekinComponent","expectedDurationInfo","Philippines","India","isEdit","selectedCountryISO","unitDetails","apartmentBlockUnitId","getApartmentBlockUnitById","getBlockId","apartmentBlockId","inDate","outDate","diffDuration","diff","days","isSingleDigit","hours","minutes","asHours","expectedDuration","round","updateExpectedVisitor","phonecountrycode","expectedDurationChange","ExpVisitorListComponent","filterField","fromDate","Date","subtract","toDate","datagrid","exportdata","queryParams","access","detail","dataRecord","getrowdata","rowId","matDrawer","close","utc","getAllYetToComeExpectedVisitorsByApartmentIdDate","cellsrenderer","column","columnrenderer","columnData","datafield","pinned","minwidth","cellsalign","align","new_","loadedData","checkIn","CustomEvent","dispatchEvent","copyWith","FrequentVendorListComponent","pageAccess","getAllDvYetToComeExpectedVisitorsByApartmentIdDate","getAllFvYetToComeExpectedVisitorsByApartmentIdDate","getFrequentVisitorList","getVendorPassList","UserVisitorListComponent","filtergroup","jqx","filter_or_operator","filtervalue","filtercondition","filterData","createfilter","operator","addfilter","showfiltercolumnbackground","applyfilters","clearfilters","BlockUnitId","tableData","localdata","datatype","dataAdapter","ApartmentID","getReportsForVisitorsCheckedInMultiFilter","getVisitorCheckedIn","getVisitorHistory","deleterow","refresh","VisitorCreateCheckinComponent","checkInLogic","checkoutLogic","query","pageComingFrom","visitorName","expectedVisitorName","visitorCount","expectedVisitorCount","visitorPhone","visitorInTime","visitorOutTime","passNumber","visitorPassId","purpose","visitorId","getVisitorById","getParticularBlockId","addVisitor","updateVisitor","visitorDetails","checkOutVisitor","VisitorHistoryComponent","getVisitorsHistoryByApartmentId","getCheckOutHistoryList","status","isVendor","frequentVisitor","isFrequentvisitor","VisitorSetupComponent","isDrawerLoader","visitorCategoryList","clickMode","closeDrawer","lookupvalue","lookupValueName","description","addLookupValue","responseData","insertedBy","insertedOn","updateLookupValue","apiSubscibe","updateUserId","deleteLookupvalue","splice","routes","redirectTo","pathMatch","component","canActivate","VisitorRoutingModule","imports","forChild","VisitorComponent","VisitorModule","bootstrap"],"mappings":"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","file":"modules-common-visitor-visitor-module-es5.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { Renderer2, Input, ViewChild, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport QRCode from 'qrcode';\n\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"qrcElement\"];\nvar NgxQrcodeElementTypes;\n(function (NgxQrcodeElementTypes) {\n    NgxQrcodeElementTypes[\"URL\"] = \"url\";\n    NgxQrcodeElementTypes[\"IMG\"] = \"img\";\n    NgxQrcodeElementTypes[\"CANVAS\"] = \"canvas\";\n})(NgxQrcodeElementTypes || (NgxQrcodeElementTypes = {}));\nvar NgxQrcodeErrorCorrectionLevels;\n(function (NgxQrcodeErrorCorrectionLevels) {\n    NgxQrcodeErrorCorrectionLevels[\"LOW\"] = \"L\";\n    NgxQrcodeErrorCorrectionLevels[\"MEDIUM\"] = \"M\";\n    NgxQrcodeErrorCorrectionLevels[\"QUARTILE\"] = \"Q\";\n    NgxQrcodeErrorCorrectionLevels[\"HIGH\"] = \"H\";\n})(NgxQrcodeErrorCorrectionLevels || (NgxQrcodeErrorCorrectionLevels = {}));\n\nconst DEFAULT_VALUES = {\n    elementType: NgxQrcodeElementTypes.URL,\n    cssClass: 'qrcode',\n    value: 'https://www.techiediaries.com',\n    version: '',\n    errorCorrectionLevel: NgxQrcodeErrorCorrectionLevels.MEDIUM,\n    margin: 4,\n    scale: 4,\n    width: 10,\n    colorDark: '#000',\n    colorLight: '#FFF'\n};\n\nlet QrcodeComponent = class QrcodeComponent {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.elementType = DEFAULT_VALUES.elementType;\n        this.cssClass = DEFAULT_VALUES.cssClass;\n        this.value = DEFAULT_VALUES.value;\n        this.version = DEFAULT_VALUES.version;\n        this.errorCorrectionLevel = DEFAULT_VALUES.errorCorrectionLevel;\n        this.margin = DEFAULT_VALUES.margin;\n        this.scale = DEFAULT_VALUES.scale;\n        this.width = DEFAULT_VALUES.width;\n        this.colorDark = DEFAULT_VALUES.colorDark;\n        this.colorLight = DEFAULT_VALUES.colorLight;\n    }\n    ngOnChanges() {\n        this.createQRCode();\n    }\n    createQRCode() {\n        if (!this.value) {\n            return;\n        }\n        let element;\n        switch (this.elementType) {\n            case NgxQrcodeElementTypes.CANVAS:\n                element = this.renderer.createElement('canvas');\n                this.toCanvas(element).then(() => {\n                    this.renderElement(element);\n                }).catch(e => {\n                    this.removeElementChildren();\n                    console.error(e);\n                });\n                break;\n            default:\n                element = this.renderer.createElement('img');\n                this.toDataURL().then((src) => {\n                    element.setAttribute('src', src);\n                    if (this.alt) {\n                        element.setAttribute('alt', this.alt);\n                    }\n                    this.renderElement(element);\n                }).catch(e => {\n                    this.removeElementChildren();\n                    console.error(e);\n                });\n        }\n    }\n    toDataURL() {\n        return QRCode.toDataURL(this.value, {\n            version: this.version,\n            errorCorrectionLevel: this.errorCorrectionLevel,\n            margin: this.margin,\n            scale: this.scale,\n            width: this.width,\n            color: {\n                dark: this.colorDark,\n                light: this.colorLight\n            }\n        });\n    }\n    toCanvas(canvas) {\n        return QRCode.toCanvas(canvas, this.value, {\n            version: this.version,\n            errorCorrectionLevel: this.errorCorrectionLevel,\n            margin: this.margin,\n            scale: this.scale,\n            width: this.width,\n            color: {\n                dark: this.colorDark,\n                light: this.colorLight\n            }\n        });\n    }\n    renderElement(element) {\n        this.removeElementChildren();\n        this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n    removeElementChildren() {\n        for (const node of this.qrcElement.nativeElement.childNodes) {\n            this.renderer.removeChild(this.qrcElement.nativeElement, node);\n        }\n    }\n};\nQrcodeComponent.ɵfac = function QrcodeComponent_Factory(t) { return new (t || QrcodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nQrcodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QrcodeComponent, selectors: [[\"ngx-qrcode\"]], viewQuery: function QrcodeComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    } }, inputs: { elementType: \"elementType\", cssClass: \"cssClass\", value: \"value\", version: \"version\", errorCorrectionLevel: \"errorCorrectionLevel\", margin: \"margin\", scale: \"scale\", width: \"width\", colorDark: \"colorDark\", colorLight: \"colorLight\", alt: \"alt\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[\"qrcElement\", \"\"]], template: function QrcodeComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.cssClass);\n    } }, encapsulation: 2, changeDetection: 0 });\nQrcodeComponent.ctorParameters = () => [\n    { type: Renderer2 }\n];\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"elementType\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"cssClass\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"alt\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"value\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"version\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"errorCorrectionLevel\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"margin\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"scale\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"width\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"colorDark\", void 0);\n__decorate([\n    Input()\n], QrcodeComponent.prototype, \"colorLight\", void 0);\n__decorate([\n    ViewChild('qrcElement')\n], QrcodeComponent.prototype, \"qrcElement\", void 0);\n\nlet NgxQRCodeModule = class NgxQRCodeModule {\n};\nNgxQRCodeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxQRCodeModule });\nNgxQRCodeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxQRCodeModule_Factory(t) { return new (t || NgxQRCodeModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QrcodeComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-qrcode',\n                template: `<div #qrcElement [class]=\"cssClass\"></div>`,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, { elementType: [{\n            type: Input\n        }], cssClass: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], version: [{\n            type: Input\n        }], errorCorrectionLevel: [{\n            type: Input\n        }], margin: [{\n            type: Input\n        }], scale: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], colorDark: [{\n            type: Input\n        }], colorLight: [{\n            type: Input\n        }], alt: [{\n            type: Input\n        }], qrcElement: [{\n            type: ViewChild,\n            args: ['qrcElement']\n        }] }); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxQRCodeModule, { declarations: [QrcodeComponent], exports: [QrcodeComponent] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxQRCodeModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [QrcodeComponent],\n                exports: [QrcodeComponent]\n            }]\n    }], null, null); })();\n\n/*\n * Public API Surface of ngx-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxQRCodeModule, NgxQrcodeElementTypes, NgxQrcodeErrorCorrectionLevels, QrcodeComponent };\n\n//# sourceMappingURL=techiediaries-ngx-qrcode.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","'use strict';\n\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nvar dijkstra = {\n  single_source_shortest_paths: function(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {};\n\n    // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n    var costs = {};\n    costs[s] = 0;\n\n    // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n\n    var closest,\n        u, v,\n        cost_of_s_to_u,\n        adjacent_nodes,\n        cost_of_e,\n        cost_of_s_to_u_plus_cost_of_e,\n        cost_of_s_to_v,\n        first_visit;\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost;\n\n      // Get nodes adjacent to u...\n      adjacent_nodes = graph[u] || {};\n\n      // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v];\n\n          // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n          // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n          cost_of_s_to_v = costs[v];\n          first_visit = (typeof costs[v] === 'undefined');\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n    nodes.reverse();\n    return nodes;\n  },\n\n  find_path: function(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(\n      predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {value: value, cost: cost};\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n};\n\n\n// node.js module exports\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\nvar canPromise = require('./can-promise')\n\nvar QRCode = require('./core/qrcode')\nvar CanvasRenderer = require('./renderer/canvas')\nvar SvgRenderer = require('./renderer/svg-tag.js')\n\nfunction renderCanvas (renderFunc, canvas, text, opts, cb) {\n  var args = [].slice.call(arguments, 1)\n  var argsNum = args.length\n  var isLastArgCb = typeof args[argsNum - 1] === 'function'\n\n  if (!isLastArgCb && !canPromise()) {\n    throw new Error('Callback required as last argument')\n  }\n\n  if (isLastArgCb) {\n    if (argsNum < 2) {\n      throw new Error('Too few arguments provided')\n    }\n\n    if (argsNum === 2) {\n      cb = text\n      text = canvas\n      canvas = opts = undefined\n    } else if (argsNum === 3) {\n      if (canvas.getContext && typeof cb === 'undefined') {\n        cb = opts\n        opts = undefined\n      } else {\n        cb = opts\n        opts = text\n        text = canvas\n        canvas = undefined\n      }\n    }\n  } else {\n    if (argsNum < 1) {\n      throw new Error('Too few arguments provided')\n    }\n\n    if (argsNum === 1) {\n      text = canvas\n      canvas = opts = undefined\n    } else if (argsNum === 2 && !canvas.getContext) {\n      opts = text\n      text = canvas\n      canvas = undefined\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var data = QRCode.create(text, opts)\n        resolve(renderFunc(data, canvas, opts))\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  try {\n    var data = QRCode.create(text, opts)\n    cb(null, renderFunc(data, canvas, opts))\n  } catch (e) {\n    cb(e)\n  }\n}\n\nexports.create = QRCode.create\nexports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render)\nexports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL)\n\n// only svg for now.\nexports.toString = renderCanvas.bind(null, function (data, _, opts) {\n  return SvgRenderer.render(data, opts)\n})\n","// can-promise has a crash in some versions of react native that dont have\n// standard global objects\n// https://github.com/soldair/node-qrcode/issues/157\n\nmodule.exports = function () {\n  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then\n}\n","/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\n\nvar getSymbolSize = require('./utils').getSymbolSize\n\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */\nexports.getRowColCoords = function getRowColCoords (version) {\n  if (version === 1) return []\n\n  var posCount = Math.floor(version / 7) + 2\n  var size = getSymbolSize(version)\n  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2\n  var positions = [size - 7] // Last coord is always (size - 7)\n\n  for (var i = 1; i < posCount - 1; i++) {\n    positions[i] = positions[i - 1] - intervals\n  }\n\n  positions.push(6) // First coord is always 6\n\n  return positions.reverse()\n}\n\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * var pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  var coords = []\n  var pos = exports.getRowColCoords(version)\n  var posLength = pos.length\n\n  for (var i = 0; i < posLength; i++) {\n    for (var j = 0; j < posLength; j++) {\n      // Skip if position is occupied by finder patterns\n      if ((i === 0 && j === 0) ||             // top-left\n          (i === 0 && j === posLength - 1) || // bottom-left\n          (i === posLength - 1 && j === 0)) { // top-right\n        continue\n      }\n\n      coords.push([pos[i], pos[j]])\n    }\n  }\n\n  return coords\n}\n","var Mode = require('./mode')\n\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */\nvar ALPHA_NUM_CHARS = [\n  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  ' ', '$', '%', '*', '+', '-', '.', '/', ':'\n]\n\nfunction AlphanumericData (data) {\n  this.mode = Mode.ALPHANUMERIC\n  this.data = data\n}\n\nAlphanumericData.getBitsLength = function getBitsLength (length) {\n  return 11 * Math.floor(length / 2) + 6 * (length % 2)\n}\n\nAlphanumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nAlphanumericData.prototype.getBitsLength = function getBitsLength () {\n  return AlphanumericData.getBitsLength(this.data.length)\n}\n\nAlphanumericData.prototype.write = function write (bitBuffer) {\n  var i\n\n  // Input data characters are divided into groups of two characters\n  // and encoded as 11-bit binary codes.\n  for (i = 0; i + 2 <= this.data.length; i += 2) {\n    // The character value of the first character is multiplied by 45\n    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45\n\n    // The character value of the second digit is added to the product\n    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1])\n\n    // The sum is then stored as 11-bit binary number\n    bitBuffer.put(value, 11)\n  }\n\n  // If the number of input data characters is not a multiple of two,\n  // the character value of the final character is encoded as a 6-bit binary number.\n  if (this.data.length % 2) {\n    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6)\n  }\n}\n\nmodule.exports = AlphanumericData\n","function BitBuffer () {\n  this.buffer = []\n  this.length = 0\n}\n\nBitBuffer.prototype = {\n\n  get: function (index) {\n    var bufIndex = Math.floor(index / 8)\n    return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1\n  },\n\n  put: function (num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit(((num >>> (length - i - 1)) & 1) === 1)\n    }\n  },\n\n  getLengthInBits: function () {\n    return this.length\n  },\n\n  putBit: function (bit) {\n    var bufIndex = Math.floor(this.length / 8)\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0)\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= (0x80 >>> (this.length % 8))\n    }\n\n    this.length++\n  }\n}\n\nmodule.exports = BitBuffer\n","var BufferUtil = require('../utils/buffer')\n\n/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */\nfunction BitMatrix (size) {\n  if (!size || size < 1) {\n    throw new Error('BitMatrix size must be defined and greater than 0')\n  }\n\n  this.size = size\n  this.data = BufferUtil.alloc(size * size)\n  this.reservedBit = BufferUtil.alloc(size * size)\n}\n\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */\nBitMatrix.prototype.set = function (row, col, value, reserved) {\n  var index = row * this.size + col\n  this.data[index] = value\n  if (reserved) this.reservedBit[index] = true\n}\n\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */\nBitMatrix.prototype.get = function (row, col) {\n  return this.data[row * this.size + col]\n}\n\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */\nBitMatrix.prototype.xor = function (row, col, value) {\n  this.data[row * this.size + col] ^= value\n}\n\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */\nBitMatrix.prototype.isReserved = function (row, col) {\n  return this.reservedBit[row * this.size + col]\n}\n\nmodule.exports = BitMatrix\n","var BufferUtil = require('../utils/buffer')\nvar Mode = require('./mode')\n\nfunction ByteData (data) {\n  this.mode = Mode.BYTE\n  this.data = BufferUtil.from(data)\n}\n\nByteData.getBitsLength = function getBitsLength (length) {\n  return length * 8\n}\n\nByteData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nByteData.prototype.getBitsLength = function getBitsLength () {\n  return ByteData.getBitsLength(this.data.length)\n}\n\nByteData.prototype.write = function (bitBuffer) {\n  for (var i = 0, l = this.data.length; i < l; i++) {\n    bitBuffer.put(this.data[i], 8)\n  }\n}\n\nmodule.exports = ByteData\n","var ECLevel = require('./error-correction-level')\r\n\r\nvar EC_BLOCKS_TABLE = [\r\n// L  M  Q  H\r\n  1, 1, 1, 1,\r\n  1, 1, 1, 1,\r\n  1, 1, 2, 2,\r\n  1, 2, 2, 4,\r\n  1, 2, 4, 4,\r\n  2, 4, 4, 4,\r\n  2, 4, 6, 5,\r\n  2, 4, 6, 6,\r\n  2, 5, 8, 8,\r\n  4, 5, 8, 8,\r\n  4, 5, 8, 11,\r\n  4, 8, 10, 11,\r\n  4, 9, 12, 16,\r\n  4, 9, 16, 16,\r\n  6, 10, 12, 18,\r\n  6, 10, 17, 16,\r\n  6, 11, 16, 19,\r\n  6, 13, 18, 21,\r\n  7, 14, 21, 25,\r\n  8, 16, 20, 25,\r\n  8, 17, 23, 25,\r\n  9, 17, 23, 34,\r\n  9, 18, 25, 30,\r\n  10, 20, 27, 32,\r\n  12, 21, 29, 35,\r\n  12, 23, 34, 37,\r\n  12, 25, 34, 40,\r\n  13, 26, 35, 42,\r\n  14, 28, 38, 45,\r\n  15, 29, 40, 48,\r\n  16, 31, 43, 51,\r\n  17, 33, 45, 54,\r\n  18, 35, 48, 57,\r\n  19, 37, 51, 60,\r\n  19, 38, 53, 63,\r\n  20, 40, 56, 66,\r\n  21, 43, 59, 70,\r\n  22, 45, 62, 74,\r\n  24, 47, 65, 77,\r\n  25, 49, 68, 81\r\n]\r\n\r\nvar EC_CODEWORDS_TABLE = [\r\n// L  M  Q  H\r\n  7, 10, 13, 17,\r\n  10, 16, 22, 28,\r\n  15, 26, 36, 44,\r\n  20, 36, 52, 64,\r\n  26, 48, 72, 88,\r\n  36, 64, 96, 112,\r\n  40, 72, 108, 130,\r\n  48, 88, 132, 156,\r\n  60, 110, 160, 192,\r\n  72, 130, 192, 224,\r\n  80, 150, 224, 264,\r\n  96, 176, 260, 308,\r\n  104, 198, 288, 352,\r\n  120, 216, 320, 384,\r\n  132, 240, 360, 432,\r\n  144, 280, 408, 480,\r\n  168, 308, 448, 532,\r\n  180, 338, 504, 588,\r\n  196, 364, 546, 650,\r\n  224, 416, 600, 700,\r\n  224, 442, 644, 750,\r\n  252, 476, 690, 816,\r\n  270, 504, 750, 900,\r\n  300, 560, 810, 960,\r\n  312, 588, 870, 1050,\r\n  336, 644, 952, 1110,\r\n  360, 700, 1020, 1200,\r\n  390, 728, 1050, 1260,\r\n  420, 784, 1140, 1350,\r\n  450, 812, 1200, 1440,\r\n  480, 868, 1290, 1530,\r\n  510, 924, 1350, 1620,\r\n  540, 980, 1440, 1710,\r\n  570, 1036, 1530, 1800,\r\n  570, 1064, 1590, 1890,\r\n  600, 1120, 1680, 1980,\r\n  630, 1204, 1770, 2100,\r\n  660, 1260, 1860, 2220,\r\n  720, 1316, 1950, 2310,\r\n  750, 1372, 2040, 2430\r\n]\r\n\r\n/**\r\n * Returns the number of error correction block that the QR Code should contain\r\n * for the specified version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction blocks\r\n */\r\nexports.getBlocksCount = function getBlocksCount (version, errorCorrectionLevel) {\r\n  switch (errorCorrectionLevel) {\r\n    case ECLevel.L:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]\r\n    case ECLevel.M:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]\r\n    case ECLevel.Q:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]\r\n    case ECLevel.H:\r\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the number of error correction codewords to use for the specified\r\n * version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction codewords\r\n */\r\nexports.getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel) {\r\n  switch (errorCorrectionLevel) {\r\n    case ECLevel.L:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]\r\n    case ECLevel.M:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]\r\n    case ECLevel.Q:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]\r\n    case ECLevel.H:\r\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n","exports.L = { bit: 1 }\nexports.M = { bit: 0 }\nexports.Q = { bit: 3 }\nexports.H = { bit: 2 }\n\nfunction fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string')\n  }\n\n  var lcStr = string.toLowerCase()\n\n  switch (lcStr) {\n    case 'l':\n    case 'low':\n      return exports.L\n\n    case 'm':\n    case 'medium':\n      return exports.M\n\n    case 'q':\n    case 'quartile':\n      return exports.Q\n\n    case 'h':\n    case 'high':\n      return exports.H\n\n    default:\n      throw new Error('Unknown EC Level: ' + string)\n  }\n}\n\nexports.isValid = function isValid (level) {\n  return level && typeof level.bit !== 'undefined' &&\n    level.bit >= 0 && level.bit < 4\n}\n\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value\n  }\n\n  try {\n    return fromString(value)\n  } catch (e) {\n    return defaultValue\n  }\n}\n","var getSymbolSize = require('./utils').getSymbolSize\nvar FINDER_PATTERN_SIZE = 7\n\n/**\n * Returns an array containing the positions of each finder pattern.\n * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\nexports.getPositions = function getPositions (version) {\n  var size = getSymbolSize(version)\n\n  return [\n    // top-left\n    [0, 0],\n    // top-right\n    [size - FINDER_PATTERN_SIZE, 0],\n    // bottom-left\n    [0, size - FINDER_PATTERN_SIZE]\n  ]\n}\n","var Utils = require('./utils')\n\nvar G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)\nvar G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)\nvar G15_BCH = Utils.getBCHDigit(G15)\n\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */\nexports.getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {\n  var data = ((errorCorrectionLevel.bit << 3) | mask)\n  var d = data << 10\n\n  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {\n    d ^= (G15 << (Utils.getBCHDigit(d) - G15_BCH))\n  }\n\n  // xor final data with mask pattern in order to ensure that\n  // no combination of Error Correction Level and data mask pattern\n  // will result in an all-zero data string\n  return ((data << 10) | d) ^ G15_MASK\n}\n","var BufferUtil = require('../utils/buffer')\n\nvar EXP_TABLE = BufferUtil.alloc(512)\nvar LOG_TABLE = BufferUtil.alloc(256)\n/**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */\n;(function initTables () {\n  var x = 1\n  for (var i = 0; i < 255; i++) {\n    EXP_TABLE[i] = x\n    LOG_TABLE[x] = i\n\n    x <<= 1 // multiply by 2\n\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n    if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)\n      x ^= 0x11D\n    }\n  }\n\n  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\n  // two GF numbers, no more).\n  // @see {@link mul}\n  for (i = 255; i < 512; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 255]\n  }\n}())\n\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.log = function log (n) {\n  if (n < 1) throw new Error('log(' + n + ')')\n  return LOG_TABLE[n]\n}\n\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.exp = function exp (n) {\n  return EXP_TABLE[n]\n}\n\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */\nexports.mul = function mul (x, y) {\n  if (x === 0 || y === 0) return 0\n\n  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n  // @see {@link initTables}\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]\n}\n","var Mode = require('./mode')\nvar Utils = require('./utils')\n\nfunction KanjiData (data) {\n  this.mode = Mode.KANJI\n  this.data = data\n}\n\nKanjiData.getBitsLength = function getBitsLength (length) {\n  return length * 13\n}\n\nKanjiData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nKanjiData.prototype.getBitsLength = function getBitsLength () {\n  return KanjiData.getBitsLength(this.data.length)\n}\n\nKanjiData.prototype.write = function (bitBuffer) {\n  var i\n\n  // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n  // These byte values are shifted from the JIS X 0208 values.\n  // JIS X 0208 gives details of the shift coded representation.\n  for (i = 0; i < this.data.length; i++) {\n    var value = Utils.toSJIS(this.data[i])\n\n    // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n    if (value >= 0x8140 && value <= 0x9FFC) {\n      // Subtract 0x8140 from Shift JIS value\n      value -= 0x8140\n\n    // For characters with Shift JIS values from 0xE040 to 0xEBBF\n    } else if (value >= 0xE040 && value <= 0xEBBF) {\n      // Subtract 0xC140 from Shift JIS value\n      value -= 0xC140\n    } else {\n      throw new Error(\n        'Invalid SJIS character: ' + this.data[i] + '\\n' +\n        'Make sure your charset is UTF-8')\n    }\n\n    // Multiply most significant byte of result by 0xC0\n    // and add least significant byte to product\n    value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff)\n\n    // Convert result to a 13-bit binary string\n    bitBuffer.put(value, 13)\n  }\n}\n\nmodule.exports = KanjiData\n","/**\n * Data mask pattern reference\n * @type {Object}\n */\nexports.Patterns = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n}\n\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */\nvar PenaltyScores = {\n  N1: 3,\n  N2: 3,\n  N3: 40,\n  N4: 10\n}\n\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */\nexports.isValid = function isValid (mask) {\n  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7\n}\n\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */\nexports.from = function from (value) {\n  return exports.isValid(value) ? parseInt(value, 10) : undefined\n}\n\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/\nexports.getPenaltyN1 = function getPenaltyN1 (data) {\n  var size = data.size\n  var points = 0\n  var sameCountCol = 0\n  var sameCountRow = 0\n  var lastCol = null\n  var lastRow = null\n\n  for (var row = 0; row < size; row++) {\n    sameCountCol = sameCountRow = 0\n    lastCol = lastRow = null\n\n    for (var col = 0; col < size; col++) {\n      var module = data.get(row, col)\n      if (module === lastCol) {\n        sameCountCol++\n      } else {\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n        lastCol = module\n        sameCountCol = 1\n      }\n\n      module = data.get(col, row)\n      if (module === lastRow) {\n        sameCountRow++\n      } else {\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n        lastRow = module\n        sameCountRow = 1\n      }\n    }\n\n    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n  }\n\n  return points\n}\n\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */\nexports.getPenaltyN2 = function getPenaltyN2 (data) {\n  var size = data.size\n  var points = 0\n\n  for (var row = 0; row < size - 1; row++) {\n    for (var col = 0; col < size - 1; col++) {\n      var last = data.get(row, col) +\n        data.get(row, col + 1) +\n        data.get(row + 1, col) +\n        data.get(row + 1, col + 1)\n\n      if (last === 4 || last === 0) points++\n    }\n  }\n\n  return points * PenaltyScores.N2\n}\n\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */\nexports.getPenaltyN3 = function getPenaltyN3 (data) {\n  var size = data.size\n  var points = 0\n  var bitsCol = 0\n  var bitsRow = 0\n\n  for (var row = 0; row < size; row++) {\n    bitsCol = bitsRow = 0\n    for (var col = 0; col < size; col++) {\n      bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col)\n      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++\n\n      bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row)\n      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++\n    }\n  }\n\n  return points * PenaltyScores.N3\n}\n\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */\nexports.getPenaltyN4 = function getPenaltyN4 (data) {\n  var darkCount = 0\n  var modulesCount = data.data.length\n\n  for (var i = 0; i < modulesCount; i++) darkCount += data.data[i]\n\n  var k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10)\n\n  return k * PenaltyScores.N4\n}\n\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */\nfunction getMaskAt (maskPattern, i, j) {\n  switch (maskPattern) {\n    case exports.Patterns.PATTERN000: return (i + j) % 2 === 0\n    case exports.Patterns.PATTERN001: return i % 2 === 0\n    case exports.Patterns.PATTERN010: return j % 3 === 0\n    case exports.Patterns.PATTERN011: return (i + j) % 3 === 0\n    case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0\n    case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0\n    case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0\n    case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0\n\n    default: throw new Error('bad maskPattern:' + maskPattern)\n  }\n}\n\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */\nexports.applyMask = function applyMask (pattern, data) {\n  var size = data.size\n\n  for (var col = 0; col < size; col++) {\n    for (var row = 0; row < size; row++) {\n      if (data.isReserved(row, col)) continue\n      data.xor(row, col, getMaskAt(pattern, row, col))\n    }\n  }\n}\n\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */\nexports.getBestMask = function getBestMask (data, setupFormatFunc) {\n  var numPatterns = Object.keys(exports.Patterns).length\n  var bestPattern = 0\n  var lowerPenalty = Infinity\n\n  for (var p = 0; p < numPatterns; p++) {\n    setupFormatFunc(p)\n    exports.applyMask(p, data)\n\n    // Calculate penalty\n    var penalty =\n      exports.getPenaltyN1(data) +\n      exports.getPenaltyN2(data) +\n      exports.getPenaltyN3(data) +\n      exports.getPenaltyN4(data)\n\n    // Undo previously applied mask\n    exports.applyMask(p, data)\n\n    if (penalty < lowerPenalty) {\n      lowerPenalty = penalty\n      bestPattern = p\n    }\n  }\n\n  return bestPattern\n}\n","var VersionCheck = require('./version-check')\nvar Regex = require('./regex')\n\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */\nexports.NUMERIC = {\n  id: 'Numeric',\n  bit: 1 << 0,\n  ccBits: [10, 12, 14]\n}\n\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */\nexports.ALPHANUMERIC = {\n  id: 'Alphanumeric',\n  bit: 1 << 1,\n  ccBits: [9, 11, 13]\n}\n\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */\nexports.BYTE = {\n  id: 'Byte',\n  bit: 1 << 2,\n  ccBits: [8, 16, 16]\n}\n\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */\nexports.KANJI = {\n  id: 'Kanji',\n  bit: 1 << 3,\n  ccBits: [8, 10, 12]\n}\n\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */\nexports.MIXED = {\n  bit: -1\n}\n\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */\nexports.getCharCountIndicator = function getCharCountIndicator (mode, version) {\n  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)\n\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid version: ' + version)\n  }\n\n  if (version >= 1 && version < 10) return mode.ccBits[0]\n  else if (version < 27) return mode.ccBits[1]\n  return mode.ccBits[2]\n}\n\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */\nexports.getBestModeForData = function getBestModeForData (dataStr) {\n  if (Regex.testNumeric(dataStr)) return exports.NUMERIC\n  else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC\n  else if (Regex.testKanji(dataStr)) return exports.KANJI\n  else return exports.BYTE\n}\n\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */\nexports.toString = function toString (mode) {\n  if (mode && mode.id) return mode.id\n  throw new Error('Invalid mode')\n}\n\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */\nexports.isValid = function isValid (mode) {\n  return mode && mode.bit && mode.ccBits\n}\n\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */\nfunction fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string')\n  }\n\n  var lcStr = string.toLowerCase()\n\n  switch (lcStr) {\n    case 'numeric':\n      return exports.NUMERIC\n    case 'alphanumeric':\n      return exports.ALPHANUMERIC\n    case 'kanji':\n      return exports.KANJI\n    case 'byte':\n      return exports.BYTE\n    default:\n      throw new Error('Unknown mode: ' + string)\n  }\n}\n\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value\n  }\n\n  try {\n    return fromString(value)\n  } catch (e) {\n    return defaultValue\n  }\n}\n","var Mode = require('./mode')\n\nfunction NumericData (data) {\n  this.mode = Mode.NUMERIC\n  this.data = data.toString()\n}\n\nNumericData.getBitsLength = function getBitsLength (length) {\n  return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)\n}\n\nNumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nNumericData.prototype.getBitsLength = function getBitsLength () {\n  return NumericData.getBitsLength(this.data.length)\n}\n\nNumericData.prototype.write = function write (bitBuffer) {\n  var i, group, value\n\n  // The input data string is divided into groups of three digits,\n  // and each group is converted to its 10-bit binary equivalent.\n  for (i = 0; i + 3 <= this.data.length; i += 3) {\n    group = this.data.substr(i, 3)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, 10)\n  }\n\n  // If the number of input digits is not an exact multiple of three,\n  // the final one or two digits are converted to 4 or 7 bits respectively.\n  var remainingNum = this.data.length - i\n  if (remainingNum > 0) {\n    group = this.data.substr(i)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, remainingNum * 3 + 1)\n  }\n}\n\nmodule.exports = NumericData\n","var BufferUtil = require('../utils/buffer')\nvar GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  var coeff = BufferUtil.alloc(p1.length + p2.length - 1)\n\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  var result = BufferUtil.from(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    var coeff = result[0]\n\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    var offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  var poly = BufferUtil.from([1])\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)])\n  }\n\n  return poly\n}\n","var BufferUtil = require('../utils/buffer')\nvar Utils = require('./utils')\nvar ECLevel = require('./error-correction-level')\nvar BitBuffer = require('./bit-buffer')\nvar BitMatrix = require('./bit-matrix')\nvar AlignmentPattern = require('./alignment-pattern')\nvar FinderPattern = require('./finder-pattern')\nvar MaskPattern = require('./mask-pattern')\nvar ECCode = require('./error-correction-code')\nvar ReedSolomonEncoder = require('./reed-solomon-encoder')\nvar Version = require('./version')\nvar FormatInfo = require('./format-info')\nvar Mode = require('./mode')\nvar Segments = require('./segments')\nvar isArray = require('isarray')\n\n/**\n * QRCode for JavaScript\n *\n * modified by Ryan Day for nodejs support\n * Copyright (c) 2011 Ryan Day\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n//---------------------------------------------------------------------\n// QRCode for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//   http://www.opensource.org/licenses/mit-license.php\n//\n// The word \"QR Code\" is registered trademark of\n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n*/\n\n/**\n * Add finder patterns bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupFinderPattern (matrix, version) {\n  var size = matrix.size\n  var pos = FinderPattern.getPositions(version)\n\n  for (var i = 0; i < pos.length; i++) {\n    var row = pos[i][0]\n    var col = pos[i][1]\n\n    for (var r = -1; r <= 7; r++) {\n      if (row + r <= -1 || size <= row + r) continue\n\n      for (var c = -1; c <= 7; c++) {\n        if (col + c <= -1 || size <= col + c) continue\n\n        if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||\n          (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||\n          (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {\n          matrix.set(row + r, col + c, true, true)\n        } else {\n          matrix.set(row + r, col + c, false, true)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Add timing pattern bits to matrix\n *\n * Note: this function must be called before {@link setupAlignmentPattern}\n *\n * @param  {BitMatrix} matrix Modules matrix\n */\nfunction setupTimingPattern (matrix) {\n  var size = matrix.size\n\n  for (var r = 8; r < size - 8; r++) {\n    var value = r % 2 === 0\n    matrix.set(r, 6, value, true)\n    matrix.set(6, r, value, true)\n  }\n}\n\n/**\n * Add alignment patterns bits to matrix\n *\n * Note: this function must be called after {@link setupTimingPattern}\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupAlignmentPattern (matrix, version) {\n  var pos = AlignmentPattern.getPositions(version)\n\n  for (var i = 0; i < pos.length; i++) {\n    var row = pos[i][0]\n    var col = pos[i][1]\n\n    for (var r = -2; r <= 2; r++) {\n      for (var c = -2; c <= 2; c++) {\n        if (r === -2 || r === 2 || c === -2 || c === 2 ||\n          (r === 0 && c === 0)) {\n          matrix.set(row + r, col + c, true, true)\n        } else {\n          matrix.set(row + r, col + c, false, true)\n        }\n      }\n    }\n  }\n}\n\n/**\n * Add version info bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\nfunction setupVersionInfo (matrix, version) {\n  var size = matrix.size\n  var bits = Version.getEncodedBits(version)\n  var row, col, mod\n\n  for (var i = 0; i < 18; i++) {\n    row = Math.floor(i / 3)\n    col = i % 3 + size - 8 - 3\n    mod = ((bits >> i) & 1) === 1\n\n    matrix.set(row, col, mod, true)\n    matrix.set(col, row, mod, true)\n  }\n}\n\n/**\n * Add format info bits to matrix\n *\n * @param  {BitMatrix} matrix               Modules matrix\n * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n * @param  {Number}    maskPattern          Mask pattern reference value\n */\nfunction setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {\n  var size = matrix.size\n  var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern)\n  var i, mod\n\n  for (i = 0; i < 15; i++) {\n    mod = ((bits >> i) & 1) === 1\n\n    // vertical\n    if (i < 6) {\n      matrix.set(i, 8, mod, true)\n    } else if (i < 8) {\n      matrix.set(i + 1, 8, mod, true)\n    } else {\n      matrix.set(size - 15 + i, 8, mod, true)\n    }\n\n    // horizontal\n    if (i < 8) {\n      matrix.set(8, size - i - 1, mod, true)\n    } else if (i < 9) {\n      matrix.set(8, 15 - i - 1 + 1, mod, true)\n    } else {\n      matrix.set(8, 15 - i - 1, mod, true)\n    }\n  }\n\n  // fixed module\n  matrix.set(size - 8, 8, 1, true)\n}\n\n/**\n * Add encoded data bits to matrix\n *\n * @param  {BitMatrix} matrix Modules matrix\n * @param  {Buffer}    data   Data codewords\n */\nfunction setupData (matrix, data) {\n  var size = matrix.size\n  var inc = -1\n  var row = size - 1\n  var bitIndex = 7\n  var byteIndex = 0\n\n  for (var col = size - 1; col > 0; col -= 2) {\n    if (col === 6) col--\n\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (!matrix.isReserved(row, col - c)) {\n          var dark = false\n\n          if (byteIndex < data.length) {\n            dark = (((data[byteIndex] >>> bitIndex) & 1) === 1)\n          }\n\n          matrix.set(row, col - c, dark)\n          bitIndex--\n\n          if (bitIndex === -1) {\n            byteIndex++\n            bitIndex = 7\n          }\n        }\n      }\n\n      row += inc\n\n      if (row < 0 || size <= row) {\n        row -= inc\n        inc = -inc\n        break\n      }\n    }\n  }\n}\n\n/**\n * Create encoded codewords from data input\n *\n * @param  {Number}   version              QR Code version\n * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n * @param  {ByteData} data                 Data input\n * @return {Buffer}                        Buffer containing encoded codewords\n */\nfunction createData (version, errorCorrectionLevel, segments) {\n  // Prepare data buffer\n  var buffer = new BitBuffer()\n\n  segments.forEach(function (data) {\n    // prefix data with mode indicator (4 bits)\n    buffer.put(data.mode.bit, 4)\n\n    // Prefix data with character count indicator.\n    // The character count indicator is a string of bits that represents the\n    // number of characters that are being encoded.\n    // The character count indicator must be placed after the mode indicator\n    // and must be a certain number of bits long, depending on the QR version\n    // and data mode\n    // @see {@link Mode.getCharCountIndicator}.\n    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version))\n\n    // add binary data sequence to buffer\n    data.write(buffer)\n  })\n\n  // Calculate required number of bits\n  var totalCodewords = Utils.getSymbolTotalCodewords(version)\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  // Add a terminator.\n  // If the bit string is shorter than the total number of required bits,\n  // a terminator of up to four 0s must be added to the right side of the string.\n  // If the bit string is more than four bits shorter than the required number of bits,\n  // add four 0s to the end.\n  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n    buffer.put(0, 4)\n  }\n\n  // If the bit string is fewer than four bits shorter, add only the number of 0s that\n  // are needed to reach the required number of bits.\n\n  // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n  // pad the string on the right with 0s to make the string's length a multiple of 8.\n  while (buffer.getLengthInBits() % 8 !== 0) {\n    buffer.putBit(0)\n  }\n\n  // Add pad bytes if the string is still shorter than the total number of required bits.\n  // Extend the buffer to fill the data capacity of the symbol corresponding to\n  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n  // and 00010001 (0x11) alternately.\n  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8\n  for (var i = 0; i < remainingByte; i++) {\n    buffer.put(i % 2 ? 0x11 : 0xEC, 8)\n  }\n\n  return createCodewords(buffer, version, errorCorrectionLevel)\n}\n\n/**\n * Encode input data with Reed-Solomon and return codewords with\n * relative error correction bits\n *\n * @param  {BitBuffer} bitBuffer            Data to encode\n * @param  {Number}    version              QR Code version\n * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n * @return {Buffer}                         Buffer containing encoded codewords\n */\nfunction createCodewords (bitBuffer, version, errorCorrectionLevel) {\n  // Total codewords for this QR code version (Data + Error correction)\n  var totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  var dataTotalCodewords = totalCodewords - ecTotalCodewords\n\n  // Total number of blocks\n  var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel)\n\n  // Calculate how many blocks each group should contain\n  var blocksInGroup2 = totalCodewords % ecTotalBlocks\n  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2\n\n  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks)\n\n  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks)\n  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1\n\n  // Number of EC codewords is the same for both groups\n  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1\n\n  // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n  var rs = new ReedSolomonEncoder(ecCount)\n\n  var offset = 0\n  var dcData = new Array(ecTotalBlocks)\n  var ecData = new Array(ecTotalBlocks)\n  var maxDataSize = 0\n  var buffer = BufferUtil.from(bitBuffer.buffer)\n\n  // Divide the buffer into the required number of blocks\n  for (var b = 0; b < ecTotalBlocks; b++) {\n    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2\n\n    // extract a block of data from buffer\n    dcData[b] = buffer.slice(offset, offset + dataSize)\n\n    // Calculate EC codewords for this data block\n    ecData[b] = rs.encode(dcData[b])\n\n    offset += dataSize\n    maxDataSize = Math.max(maxDataSize, dataSize)\n  }\n\n  // Create final data\n  // Interleave the data and error correction codewords from each block\n  var data = BufferUtil.alloc(totalCodewords)\n  var index = 0\n  var i, r\n\n  // Add data codewords\n  for (i = 0; i < maxDataSize; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      if (i < dcData[r].length) {\n        data[index++] = dcData[r][i]\n      }\n    }\n  }\n\n  // Apped EC codewords\n  for (i = 0; i < ecCount; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      data[index++] = ecData[r][i]\n    }\n  }\n\n  return data\n}\n\n/**\n * Build QR Code symbol\n *\n * @param  {String} data                 Input string\n * @param  {Number} version              QR Code version\n * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n * @param  {MaskPattern} maskPattern     Mask pattern\n * @return {Object}                      Object containing symbol data\n */\nfunction createSymbol (data, version, errorCorrectionLevel, maskPattern) {\n  var segments\n\n  if (isArray(data)) {\n    segments = Segments.fromArray(data)\n  } else if (typeof data === 'string') {\n    var estimatedVersion = version\n\n    if (!estimatedVersion) {\n      var rawSegments = Segments.rawSplit(data)\n\n      // Estimate best version that can contain raw splitted segments\n      estimatedVersion = Version.getBestVersionForData(rawSegments,\n        errorCorrectionLevel)\n    }\n\n    // Build optimized segments\n    // If estimated version is undefined, try with the highest version\n    segments = Segments.fromString(data, estimatedVersion || 40)\n  } else {\n    throw new Error('Invalid data')\n  }\n\n  // Get the min version that can contain data\n  var bestVersion = Version.getBestVersionForData(segments,\n      errorCorrectionLevel)\n\n  // If no version is found, data cannot be stored\n  if (!bestVersion) {\n    throw new Error('The amount of data is too big to be stored in a QR Code')\n  }\n\n  // If not specified, use min version as default\n  if (!version) {\n    version = bestVersion\n\n  // Check if the specified version can contain the data\n  } else if (version < bestVersion) {\n    throw new Error('\\n' +\n      'The chosen QR Code version cannot contain this amount of data.\\n' +\n      'Minimum version required to store current data is: ' + bestVersion + '.\\n'\n    )\n  }\n\n  var dataBits = createData(version, errorCorrectionLevel, segments)\n\n  // Allocate matrix buffer\n  var moduleCount = Utils.getSymbolSize(version)\n  var modules = new BitMatrix(moduleCount)\n\n  // Add function modules\n  setupFinderPattern(modules, version)\n  setupTimingPattern(modules)\n  setupAlignmentPattern(modules, version)\n\n  // Add temporary dummy bits for format info just to set them as reserved.\n  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n  // since the masking operation must be performed only on the encoding region.\n  // These blocks will be replaced with correct values later in code.\n  setupFormatInfo(modules, errorCorrectionLevel, 0)\n\n  if (version >= 7) {\n    setupVersionInfo(modules, version)\n  }\n\n  // Add data codewords\n  setupData(modules, dataBits)\n\n  if (isNaN(maskPattern)) {\n    // Find best mask pattern\n    maskPattern = MaskPattern.getBestMask(modules,\n      setupFormatInfo.bind(null, modules, errorCorrectionLevel))\n  }\n\n  // Apply mask pattern\n  MaskPattern.applyMask(maskPattern, modules)\n\n  // Replace format info bits with correct values\n  setupFormatInfo(modules, errorCorrectionLevel, maskPattern)\n\n  return {\n    modules: modules,\n    version: version,\n    errorCorrectionLevel: errorCorrectionLevel,\n    maskPattern: maskPattern,\n    segments: segments\n  }\n}\n\n/**\n * QR Code\n *\n * @param {String | Array} data                 Input data\n * @param {Object} options                      Optional configurations\n * @param {Number} options.version              QR Code version\n * @param {String} options.errorCorrectionLevel Error correction level\n * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n */\nexports.create = function create (data, options) {\n  if (typeof data === 'undefined' || data === '') {\n    throw new Error('No input text')\n  }\n\n  var errorCorrectionLevel = ECLevel.M\n  var version\n  var mask\n\n  if (typeof options !== 'undefined') {\n    // Use higher error correction level as default\n    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M)\n    version = Version.from(options.version)\n    mask = MaskPattern.from(options.maskPattern)\n\n    if (options.toSJISFunc) {\n      Utils.setToSJISFunction(options.toSJISFunc)\n    }\n  }\n\n  return createSymbol(data, version, errorCorrectionLevel, mask)\n}\n","var BufferUtil = require('../utils/buffer')\nvar Polynomial = require('./polynomial')\nvar Buffer = require('buffer').Buffer\n\nfunction ReedSolomonEncoder (degree) {\n  this.genPoly = undefined\n  this.degree = degree\n\n  if (this.degree) this.initialize(this.degree)\n}\n\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\nReedSolomonEncoder.prototype.initialize = function initialize (degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree\n  this.genPoly = Polynomial.generateECPolynomial(this.degree)\n}\n\n/**\n * Encodes a chunk of data\n *\n * @param  {Buffer} data Buffer containing input data\n * @return {Buffer}      Buffer containing encoded data\n */\nReedSolomonEncoder.prototype.encode = function encode (data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized')\n  }\n\n  // Calculate EC for this data block\n  // extends data size to data+genPoly size\n  var pad = BufferUtil.alloc(this.degree)\n  var paddedData = Buffer.concat([data, pad], data.length + this.degree)\n\n  // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n  var remainder = Polynomial.mod(paddedData, this.genPoly)\n\n  // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n  var start = this.degree - remainder.length\n  if (start > 0) {\n    var buff = BufferUtil.alloc(this.degree)\n    remainder.copy(buff, start)\n\n    return buff\n  }\n\n  return remainder\n}\n\nmodule.exports = ReedSolomonEncoder\n","var numeric = '[0-9]+'\nvar alphanumeric = '[A-Z $%*+\\\\-./:]+'\nvar kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +\n  '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +\n  '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +\n  '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+'\nkanji = kanji.replace(/u/g, '\\\\u')\n\nvar byte = '(?:(?![A-Z0-9 $%*+\\\\-./:]|' + kanji + ')(?:.|[\\r\\n]))+'\n\nexports.KANJI = new RegExp(kanji, 'g')\nexports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\\\-./:]+', 'g')\nexports.BYTE = new RegExp(byte, 'g')\nexports.NUMERIC = new RegExp(numeric, 'g')\nexports.ALPHANUMERIC = new RegExp(alphanumeric, 'g')\n\nvar TEST_KANJI = new RegExp('^' + kanji + '$')\nvar TEST_NUMERIC = new RegExp('^' + numeric + '$')\nvar TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\\\-./:]+$')\n\nexports.testKanji = function testKanji (str) {\n  return TEST_KANJI.test(str)\n}\n\nexports.testNumeric = function testNumeric (str) {\n  return TEST_NUMERIC.test(str)\n}\n\nexports.testAlphanumeric = function testAlphanumeric (str) {\n  return TEST_ALPHANUMERIC.test(str)\n}\n","var Mode = require('./mode')\nvar NumericData = require('./numeric-data')\nvar AlphanumericData = require('./alphanumeric-data')\nvar ByteData = require('./byte-data')\nvar KanjiData = require('./kanji-data')\nvar Regex = require('./regex')\nvar Utils = require('./utils')\nvar dijkstra = require('dijkstrajs')\n\n/**\n * Returns UTF8 byte length\n *\n * @param  {String} str Input string\n * @return {Number}     Number of byte\n */\nfunction getStringByteLength (str) {\n  return unescape(encodeURIComponent(str)).length\n}\n\n/**\n * Get a list of segments of the specified mode\n * from a string\n *\n * @param  {Mode}   mode Segment mode\n * @param  {String} str  String to process\n * @return {Array}       Array of object with segments data\n */\nfunction getSegments (regex, mode, str) {\n  var segments = []\n  var result\n\n  while ((result = regex.exec(str)) !== null) {\n    segments.push({\n      data: result[0],\n      index: result.index,\n      mode: mode,\n      length: result[0].length\n    })\n  }\n\n  return segments\n}\n\n/**\n * Extracts a series of segments with the appropriate\n * modes from a string\n *\n * @param  {String} dataStr Input string\n * @return {Array}          Array of object with segments data\n */\nfunction getSegmentsFromString (dataStr) {\n  var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr)\n  var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr)\n  var byteSegs\n  var kanjiSegs\n\n  if (Utils.isKanjiModeEnabled()) {\n    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr)\n    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr)\n  } else {\n    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr)\n    kanjiSegs = []\n  }\n\n  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs)\n\n  return segs\n    .sort(function (s1, s2) {\n      return s1.index - s2.index\n    })\n    .map(function (obj) {\n      return {\n        data: obj.data,\n        mode: obj.mode,\n        length: obj.length\n      }\n    })\n}\n\n/**\n * Returns how many bits are needed to encode a string of\n * specified length with the specified mode\n *\n * @param  {Number} length String length\n * @param  {Mode} mode     Segment mode\n * @return {Number}        Bit length\n */\nfunction getSegmentBitsLength (length, mode) {\n  switch (mode) {\n    case Mode.NUMERIC:\n      return NumericData.getBitsLength(length)\n    case Mode.ALPHANUMERIC:\n      return AlphanumericData.getBitsLength(length)\n    case Mode.KANJI:\n      return KanjiData.getBitsLength(length)\n    case Mode.BYTE:\n      return ByteData.getBitsLength(length)\n  }\n}\n\n/**\n * Merges adjacent segments which have the same mode\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\nfunction mergeSegments (segs) {\n  return segs.reduce(function (acc, curr) {\n    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null\n    if (prevSeg && prevSeg.mode === curr.mode) {\n      acc[acc.length - 1].data += curr.data\n      return acc\n    }\n\n    acc.push(curr)\n    return acc\n  }, [])\n}\n\n/**\n * Generates a list of all possible nodes combination which\n * will be used to build a segments graph.\n *\n * Nodes are divided by groups. Each group will contain a list of all the modes\n * in which is possible to encode the given text.\n *\n * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n * The group for '12345' will contain then 3 objects, one for each\n * possible encoding mode.\n *\n * Each node represents a possible segment.\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\nfunction buildNodes (segs) {\n  var nodes = []\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i]\n\n    switch (seg.mode) {\n      case Mode.NUMERIC:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },\n          { data: seg.data, mode: Mode.BYTE, length: seg.length }\n        ])\n        break\n      case Mode.ALPHANUMERIC:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.BYTE, length: seg.length }\n        ])\n        break\n      case Mode.KANJI:\n        nodes.push([seg,\n          { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }\n        ])\n        break\n      case Mode.BYTE:\n        nodes.push([\n          { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }\n        ])\n    }\n  }\n\n  return nodes\n}\n\n/**\n * Builds a graph from a list of nodes.\n * All segments in each node group will be connected with all the segments of\n * the next group and so on.\n *\n * At each connection will be assigned a weight depending on the\n * segment's byte length.\n *\n * @param  {Array} nodes    Array of object with segments data\n * @param  {Number} version QR Code version\n * @return {Object}         Graph of all possible segments\n */\nfunction buildGraph (nodes, version) {\n  var table = {}\n  var graph = {'start': {}}\n  var prevNodeIds = ['start']\n\n  for (var i = 0; i < nodes.length; i++) {\n    var nodeGroup = nodes[i]\n    var currentNodeIds = []\n\n    for (var j = 0; j < nodeGroup.length; j++) {\n      var node = nodeGroup[j]\n      var key = '' + i + j\n\n      currentNodeIds.push(key)\n      table[key] = { node: node, lastCount: 0 }\n      graph[key] = {}\n\n      for (var n = 0; n < prevNodeIds.length; n++) {\n        var prevNodeId = prevNodeIds[n]\n\n        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n          graph[prevNodeId][key] =\n            getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -\n            getSegmentBitsLength(table[prevNodeId].lastCount, node.mode)\n\n          table[prevNodeId].lastCount += node.length\n        } else {\n          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length\n\n          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +\n            4 + Mode.getCharCountIndicator(node.mode, version) // switch cost\n        }\n      }\n    }\n\n    prevNodeIds = currentNodeIds\n  }\n\n  for (n = 0; n < prevNodeIds.length; n++) {\n    graph[prevNodeIds[n]]['end'] = 0\n  }\n\n  return { map: graph, table: table }\n}\n\n/**\n * Builds a segment from a specified data and mode.\n * If a mode is not specified, the more suitable will be used.\n *\n * @param  {String} data             Input data\n * @param  {Mode | String} modesHint Data mode\n * @return {Segment}                 Segment\n */\nfunction buildSingleSegment (data, modesHint) {\n  var mode\n  var bestMode = Mode.getBestModeForData(data)\n\n  mode = Mode.from(modesHint, bestMode)\n\n  // Make sure data can be encoded\n  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n    throw new Error('\"' + data + '\"' +\n      ' cannot be encoded with mode ' + Mode.toString(mode) +\n      '.\\n Suggested mode is: ' + Mode.toString(bestMode))\n  }\n\n  // Use Mode.BYTE if Kanji support is disabled\n  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n    mode = Mode.BYTE\n  }\n\n  switch (mode) {\n    case Mode.NUMERIC:\n      return new NumericData(data)\n\n    case Mode.ALPHANUMERIC:\n      return new AlphanumericData(data)\n\n    case Mode.KANJI:\n      return new KanjiData(data)\n\n    case Mode.BYTE:\n      return new ByteData(data)\n  }\n}\n\n/**\n * Builds a list of segments from an array.\n * Array can contain Strings or Objects with segment's info.\n *\n * For each item which is a string, will be generated a segment with the given\n * string and the more appropriate encoding mode.\n *\n * For each item which is an object, will be generated a segment with the given\n * data and mode.\n * Objects must contain at least the property \"data\".\n * If property \"mode\" is not present, the more suitable mode will be used.\n *\n * @param  {Array} array Array of objects with segments data\n * @return {Array}       Array of Segments\n */\nexports.fromArray = function fromArray (array) {\n  return array.reduce(function (acc, seg) {\n    if (typeof seg === 'string') {\n      acc.push(buildSingleSegment(seg, null))\n    } else if (seg.data) {\n      acc.push(buildSingleSegment(seg.data, seg.mode))\n    }\n\n    return acc\n  }, [])\n}\n\n/**\n * Builds an optimized sequence of segments from a string,\n * which will produce the shortest possible bitstream.\n *\n * @param  {String} data    Input string\n * @param  {Number} version QR Code version\n * @return {Array}          Array of segments\n */\nexports.fromString = function fromString (data, version) {\n  var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled())\n\n  var nodes = buildNodes(segs)\n  var graph = buildGraph(nodes, version)\n  var path = dijkstra.find_path(graph.map, 'start', 'end')\n\n  var optimizedSegs = []\n  for (var i = 1; i < path.length - 1; i++) {\n    optimizedSegs.push(graph.table[path[i]].node)\n  }\n\n  return exports.fromArray(mergeSegments(optimizedSegs))\n}\n\n/**\n * Splits a string in various segments with the modes which\n * best represent their content.\n * The produced segments are far from being optimized.\n * The output of this function is only used to estimate a QR Code version\n * which may contain the data.\n *\n * @param  {string} data Input string\n * @return {Array}       Array of segments\n */\nexports.rawSplit = function rawSplit (data) {\n  return exports.fromArray(\n    getSegmentsFromString(data, Utils.isKanjiModeEnabled())\n  )\n}\n","var toSJISFunction\nvar CODEWORDS_COUNT = [\n  0, // Not used\n  26, 44, 70, 100, 134, 172, 196, 242, 292, 346,\n  404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,\n  1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,\n  2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706\n]\n\n/**\n * Returns the QR Code size for the specified version\n *\n * @param  {Number} version QR Code version\n * @return {Number}         size of QR code\n */\nexports.getSymbolSize = function getSymbolSize (version) {\n  if (!version) throw new Error('\"version\" cannot be null or undefined')\n  if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40')\n  return version * 4 + 17\n}\n\n/**\n * Returns the total number of codewords used to store data and EC information.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Data length in bits\n */\nexports.getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {\n  return CODEWORDS_COUNT[version]\n}\n\n/**\n * Encode data with Bose-Chaudhuri-Hocquenghem\n *\n * @param  {Number} data Value to encode\n * @return {Number}      Encoded value\n */\nexports.getBCHDigit = function (data) {\n  var digit = 0\n\n  while (data !== 0) {\n    digit++\n    data >>>= 1\n  }\n\n  return digit\n}\n\nexports.setToSJISFunction = function setToSJISFunction (f) {\n  if (typeof f !== 'function') {\n    throw new Error('\"toSJISFunc\" is not a valid function.')\n  }\n\n  toSJISFunction = f\n}\n\nexports.isKanjiModeEnabled = function () {\n  return typeof toSJISFunction !== 'undefined'\n}\n\nexports.toSJIS = function toSJIS (kanji) {\n  return toSJISFunction(kanji)\n}\n","/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */\nexports.isValid = function isValid (version) {\n  return !isNaN(version) && version >= 1 && version <= 40\n}\n","var Utils = require('./utils')\nvar ECCode = require('./error-correction-code')\nvar ECLevel = require('./error-correction-level')\nvar Mode = require('./mode')\nvar VersionCheck = require('./version-check')\nvar isArray = require('isarray')\n\n// Generator polynomial used to encode version information\nvar G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)\nvar G18_BCH = Utils.getBCHDigit(G18)\n\nfunction getBestVersionForDataLength (mode, length, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\nfunction getReservedBitsCount (mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4\n}\n\nfunction getTotalBitsFromDataArray (segments, version) {\n  var totalBits = 0\n\n  segments.forEach(function (data) {\n    var reservedBits = getReservedBitsCount(data.mode, version)\n    totalBits += reservedBits + data.getBitsLength()\n  })\n\n  return totalBits\n}\n\nfunction getBestVersionForMixedData (segments, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    var length = getTotalBitsFromDataArray(segments, currentVersion)\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from (value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10)\n  }\n\n  return defaultValue\n}\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE\n\n  // Total codewords for this QR code version (Data + Error correction)\n  var totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits\n\n  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor((usableBits / 10) * 3)\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor((usableBits / 11) * 2)\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13)\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8)\n  }\n}\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {\n  var seg\n\n  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)\n\n  if (isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl)\n    }\n\n    if (data.length === 0) {\n      return 1\n    }\n\n    seg = data[0]\n  } else {\n    seg = data\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)\n}\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits (version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  var d = version << 12\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))\n  }\n\n  return (version << 12) | d\n}\n","var Utils = require('./utils')\n\nfunction clearCanvas (ctx, canvas, size) {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n  if (!canvas.style) canvas.style = {}\n  canvas.height = size\n  canvas.width = size\n  canvas.style.height = size + 'px'\n  canvas.style.width = size + 'px'\n}\n\nfunction getCanvasElement () {\n  try {\n    return document.createElement('canvas')\n  } catch (e) {\n    throw new Error('You need to specify a canvas element')\n  }\n}\n\nexports.render = function render (qrData, canvas, options) {\n  var opts = options\n  var canvasEl = canvas\n\n  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n    opts = canvas\n    canvas = undefined\n  }\n\n  if (!canvas) {\n    canvasEl = getCanvasElement()\n  }\n\n  opts = Utils.getOptions(opts)\n  var size = Utils.getImageWidth(qrData.modules.size, opts)\n\n  var ctx = canvasEl.getContext('2d')\n  var image = ctx.createImageData(size, size)\n  Utils.qrToImageData(image.data, qrData, opts)\n\n  clearCanvas(ctx, canvasEl, size)\n  ctx.putImageData(image, 0, 0)\n\n  return canvasEl\n}\n\nexports.renderToDataURL = function renderToDataURL (qrData, canvas, options) {\n  var opts = options\n\n  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n    opts = canvas\n    canvas = undefined\n  }\n\n  if (!opts) opts = {}\n\n  var canvasEl = exports.render(qrData, canvas, opts)\n\n  var type = opts.type || 'image/png'\n  var rendererOpts = opts.rendererOpts || {}\n\n  return canvasEl.toDataURL(type, rendererOpts.quality)\n}\n","var Utils = require('./utils')\n\nfunction getColorAttrib (color, attrib) {\n  var alpha = color.a / 255\n  var str = attrib + '=\"' + color.hex + '\"'\n\n  return alpha < 1\n    ? str + ' ' + attrib + '-opacity=\"' + alpha.toFixed(2).slice(1) + '\"'\n    : str\n}\n\nfunction svgCmd (cmd, x, y) {\n  var str = cmd + x\n  if (typeof y !== 'undefined') str += ' ' + y\n\n  return str\n}\n\nfunction qrToPath (data, size, margin) {\n  var path = ''\n  var moveBy = 0\n  var newRow = false\n  var lineLength = 0\n\n  for (var i = 0; i < data.length; i++) {\n    var col = Math.floor(i % size)\n    var row = Math.floor(i / size)\n\n    if (!col && !newRow) newRow = true\n\n    if (data[i]) {\n      lineLength++\n\n      if (!(i > 0 && col > 0 && data[i - 1])) {\n        path += newRow\n          ? svgCmd('M', col + margin, 0.5 + row + margin)\n          : svgCmd('m', moveBy, 0)\n\n        moveBy = 0\n        newRow = false\n      }\n\n      if (!(col + 1 < size && data[i + 1])) {\n        path += svgCmd('h', lineLength)\n        lineLength = 0\n      }\n    } else {\n      moveBy++\n    }\n  }\n\n  return path\n}\n\nexports.render = function render (qrData, options, cb) {\n  var opts = Utils.getOptions(options)\n  var size = qrData.modules.size\n  var data = qrData.modules.data\n  var qrcodesize = size + opts.margin * 2\n\n  var bg = !opts.color.light.a\n    ? ''\n    : '<path ' + getColorAttrib(opts.color.light, 'fill') +\n      ' d=\"M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z\"/>'\n\n  var path =\n    '<path ' + getColorAttrib(opts.color.dark, 'stroke') +\n    ' d=\"' + qrToPath(data, size, opts.margin) + '\"/>'\n\n  var viewBox = 'viewBox=\"' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '\"'\n\n  var width = !opts.width ? '' : 'width=\"' + opts.width + '\" height=\"' + opts.width + '\" '\n\n  var svgTag = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + width + viewBox + ' shape-rendering=\"crispEdges\">' + bg + path + '</svg>\\n'\n\n  if (typeof cb === 'function') {\n    cb(null, svgTag)\n  }\n\n  return svgTag\n}\n","function hex2rgba (hex) {\n  if (typeof hex === 'number') {\n    hex = hex.toString()\n  }\n\n  if (typeof hex !== 'string') {\n    throw new Error('Color should be defined as hex string')\n  }\n\n  var hexCode = hex.slice().replace('#', '').split('')\n  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {\n    throw new Error('Invalid hex color: ' + hex)\n  }\n\n  // Convert from short to long form (fff -> ffffff)\n  if (hexCode.length === 3 || hexCode.length === 4) {\n    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {\n      return [c, c]\n    }))\n  }\n\n  // Add default alpha value\n  if (hexCode.length === 6) hexCode.push('F', 'F')\n\n  var hexValue = parseInt(hexCode.join(''), 16)\n\n  return {\n    r: (hexValue >> 24) & 255,\n    g: (hexValue >> 16) & 255,\n    b: (hexValue >> 8) & 255,\n    a: hexValue & 255,\n    hex: '#' + hexCode.slice(0, 6).join('')\n  }\n}\n\nexports.getOptions = function getOptions (options) {\n  if (!options) options = {}\n  if (!options.color) options.color = {}\n\n  var margin = typeof options.margin === 'undefined' ||\n    options.margin === null ||\n    options.margin < 0 ? 4 : options.margin\n\n  var width = options.width && options.width >= 21 ? options.width : undefined\n  var scale = options.scale || 4\n\n  return {\n    width: width,\n    scale: width ? 4 : scale,\n    margin: margin,\n    color: {\n      dark: hex2rgba(options.color.dark || '#000000ff'),\n      light: hex2rgba(options.color.light || '#ffffffff')\n    },\n    type: options.type,\n    rendererOpts: options.rendererOpts || {}\n  }\n}\n\nexports.getScale = function getScale (qrSize, opts) {\n  return opts.width && opts.width >= qrSize + opts.margin * 2\n    ? opts.width / (qrSize + opts.margin * 2)\n    : opts.scale\n}\n\nexports.getImageWidth = function getImageWidth (qrSize, opts) {\n  var scale = exports.getScale(qrSize, opts)\n  return Math.floor((qrSize + opts.margin * 2) * scale)\n}\n\nexports.qrToImageData = function qrToImageData (imgData, qr, opts) {\n  var size = qr.modules.size\n  var data = qr.modules.data\n  var scale = exports.getScale(size, opts)\n  var symbolSize = Math.floor((size + opts.margin * 2) * scale)\n  var scaledMargin = opts.margin * scale\n  var palette = [opts.color.light, opts.color.dark]\n\n  for (var i = 0; i < symbolSize; i++) {\n    for (var j = 0; j < symbolSize; j++) {\n      var posDst = (i * symbolSize + j) * 4\n      var pxColor = opts.color.light\n\n      if (i >= scaledMargin && j >= scaledMargin &&\n        i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {\n        var iSrc = Math.floor((i - scaledMargin) / scale)\n        var jSrc = Math.floor((j - scaledMargin) / scale)\n        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0]\n      }\n\n      imgData[posDst++] = pxColor.r\n      imgData[posDst++] = pxColor.g\n      imgData[posDst++] = pxColor.b\n      imgData[posDst] = pxColor.a\n    }\n  }\n}\n","/**\n * Implementation of a subset of node.js Buffer methods for the browser.\n * Based on https://github.com/feross/buffer\n */\n\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar isArray = require('isarray')\n\nfunction typedArraySupport () {\n  // Can typed array instances be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nvar K_MAX_LENGTH = Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n\nfunction Buffer (arg, offset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, offset, length)\n  }\n\n  if (typeof arg === 'number') {\n    return allocUnsafe(this, arg)\n  }\n\n  return from(this, arg, offset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n\n  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true,\n      enumerable: false,\n      writable: false\n    })\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\nfunction createBuffer (that, length) {\n  var buf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    buf = new Uint8Array(length)\n    buf.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    buf = that\n    if (buf === null) {\n      buf = new Buffer(length)\n    }\n    buf.length = length\n  }\n\n  return buf\n}\n\nfunction allocUnsafe (that, size) {\n  var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      buf[i] = 0\n    }\n  }\n\n  return buf\n}\n\nfunction fromString (that, string) {\n  var length = byteLength(string) | 0\n  var buf = createBuffer(that, length)\n\n  var actual = buf.write(string)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    buf.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    buf = fromArrayLike(that, buf)\n  }\n\n  return buf\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(that, len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction byteLength (string) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  return utf8ToBytes(string).length\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction from (that, value, offset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, offset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, offset)\n  }\n\n  return fromObject(that, value)\n}\n\nBuffer.prototype.write = function write (string, offset, length) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n    } else {\n      length = undefined\n    }\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  return utf8Write(this, string, offset, length)\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    // Return an augmented `Uint8Array` instance\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\nBuffer.prototype.fill = function fill (val, start, end) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val)\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return createBuffer(null, 0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = allocUnsafe(null, length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nBuffer.byteLength = byteLength\n\nBuffer.prototype._isBuffer = true\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nmodule.exports.alloc = function (size) {\n  var buffer = new Buffer(size)\n  buffer.fill(0)\n  return buffer\n}\n\nmodule.exports.from = function (data) {\n  return new Buffer(data)\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      Uint8Array.prototype.set.call(\n        buffer,\n        buf,\n        pos\n      )\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","export default \"<div class=\\\"checkin-visitor-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t<h4 class=\\\"mb-4\\\">\\n            <span *ngIf=\\\"urlType == 'frequent-visitor-create'\\\">Create Frequent Visitor</span>\\n            <span *ngIf=\\\"urlType == 'vendor-pass-create'\\\">Create Vendor Pass</span>\\n        </h4>\\n\\t\\t<app-loader *ngIf=\\\"!isDataLoaded\\\"></app-loader>\\n\\t\\t<condo-message class=\\\"mb-3\\\" *ngIf=\\\"message\\\"\\n\\t\\t\\t[appearance]=\\\"message.appearance\\\"\\n\\t\\t\\t[showIcon]=\\\"message.showIcon\\\"\\n\\t\\t\\t[type]=\\\"message.type\\\"\\n\\t\\t\\t[@shake]=\\\"message.shake\\\">\\n                    {{message.content}}\\n\\t\\t</condo-message>\\n\\t\\t<form #expectedVisitorForm=\\\"ngForm\\\" *ngIf=\\\"isDataLoaded\\\">\\n\\t\\t\\t<div class=\\\"bg-card shadow\\\" *ngIf=\\\"isAdmin\\\">\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Expected Visit Type\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Visit\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"visitTypeList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"lookupValueName\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.visitTypeId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"lookupValueId\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedVisitType($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- Unit Visitor -->\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.visitTypeId && visitor.visitTypeId == 50\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Tower No\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Tower\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"towerList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"block_Label\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"block.blockId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"block_Id\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedBlock($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"block.blockId && visitor.visitTypeId && visitor.visitTypeId == 50\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Unit No\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Unit\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"unitList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"bu_Label\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.apartmentUnitId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"buId\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedBlockUnit($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.apartmentUnitId\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Primary Name</label>\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" [disabled]=\\\"true\\\" class=\\\"form-control\\\" placeholder=\\\"Primary Name\\\" [value]=\\\"block.primaryName\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- Community Visitor -->\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.visitTypeId && visitor.visitTypeId == 51\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Staff\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Staff\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"staffsList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"staffName\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.tomeetStaffId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"staffId\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedStaff($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"bg-card shadow\\\">\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>{{type}} Visitor Name<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Visitor Name\\\" name=\\\"visitorName\\\" [(ngModel)]=\\\"visitor.expectedVisitorName\\\" required>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>{{type}}  Visitor Count<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input OnlyNumber=\\\"true\\\" class=\\\"form-control\\\" placeholder=\\\"Visitor Count\\\" name=\\\"visitorCount\\\" [(ngModel)]=\\\"visitor.expectedVisitorCount\\\" required>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>{{type}}  Phone/Mobile No<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<ngx-intl-tel-input [inputId]=\\\"'userMobile'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[preferredCountries]=\\\"preferredCountries\\\"\\n\\t\\t\\t\\t\\t\\t\\t[enableAutoCountrySelect]=\\\"true\\\" [enablePlaceholder]=\\\"true\\\"\\n\\t\\t\\t\\t\\t\\t\\t[searchCountryFlag]=\\\"true\\\"\\n\\t\\t\\t\\t\\t\\t\\t[searchCountryField]=\\\"[SearchCountryField.Iso2, SearchCountryField.Name]\\\"\\n\\t\\t\\t\\t\\t\\t\\t[selectFirstCountry]=\\\"false\\\"\\n\\t\\t\\t\\t\\t\\t\\t[selectedCountryISO]=\\\"CountryISO.Philippines\\\" [maxLength]=\\\"15\\\"\\n\\t\\t\\t\\t\\t\\t\\t[phoneValidation]=\\\"false\\\" [separateDialCode]=\\\"separateDialCode\\\"\\n\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"visitor.expectedVisitorPhone\\\" name=\\\"phone\\\">\\n\\t\\t\\t\\t\\t\\t</ngx-intl-tel-input>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"urlType == 'vendor-pass-create'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>{{type}} Time of Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" name=\\\"visitorInTime\\\" [owlDateTime]=\\\"visitorInTime\\\" [owlDateTimeTrigger]=\\\"visitorInTime\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Time\\\" [(ngModel)]=\\\"visitor.expectedVisitorInTime\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t\\t<owl-date-time [pickerType]=\\\"'timer'\\\" #visitorInTime></owl-date-time>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"visitorInTime\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"feather:clock\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"urlType == 'vendor-pass-create'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>{{type}} Out-Time<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" name=\\\"visitorOutTime\\\" [owlDateTime]=\\\"visitorOutTime\\\" [owlDateTimeTrigger]=\\\"visitorOutTime\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Time\\\" [(ngModel)]=\\\"visitor.expectedVisitorOutTime\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t\\t<owl-date-time [pickerType]=\\\"'timer'\\\" #visitorOutTime></owl-date-time>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"visitorOutTime\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"feather:clock\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- <div class=\\\"col-sm-4\\\" *ngIf=\\\"urlType == 'vendor-pass-create'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>{{type}} Duration of Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" placeholder=\\\"Duration Info\\\" name=\\\"durationInfo\\\" [value]=\\\"expectedDurationInfo\\\" [disabled]=\\\"true\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div> -->\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"{{type}} Visit Category\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Category\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"visitCategoryList | orderBy : 'lookupValueName'\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"lookupValueName\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.visitorCategoryId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"lookupValueId\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedCategory($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Reason for Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<textarea  type=\\\"text\\\" class=\\\"form-control purpose-box\\\" placeholder=\\\"Enter purpose\\\" name=\\\"visitorpurpose\\\" [(ngModel)]=\\\"visitor.purpose\\\" required></textarea>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"text-right\\\">\\n\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"createExpectedVisitor()\\\">Submit</button>\\n\\t\\t\\t\\t\\t\\t<button class=\\\"ml-2\\\" mat-stroked-button (click)=\\\"back()\\\">Cancel</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</form>\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"currently-checked-list-wrapper\\\">\\n    <app-loader *ngIf=\\\"!isVisitorDataLoaded\\\"></app-loader>\\n    <div class=\\\"main\\\">\\n        <ng-container *ngIf=\\\"isVisitorDataLoaded\\\">\\n\\n            <div class=\\\"d-flex mb-4\\\">\\n                <div>\\n                    <h4 class=\\\"mb-2\\\">Currently Checked-In Visitors</h4>\\n                    <p class=\\\"text-secondary mb-1\\\">{{totalItems}} results</p>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"d-flex mb-4\\\">\\n                <div class=\\\"d-flex ml-auto\\\">\\n                    <div class=\\\"mr-3\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"searchData\\\">\\n                    </div>\\n                    <div class=\\\"mr-3 ml-auto\\\">\\n                        <button mat-flat-button [color]=\\\"'primary'\\\" routerLink=\\\"/ams/visitor/info/checkin\\\">\\n                            <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_solid:plus\\\"></mat-icon><span class=\\\"button-name\\\">Visitor</span>\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"bg-card shadow mb-3\\\" *ngFor=\\\" let item of visitorList | simpleSearch: searchData | slice:ItemStartIndex:ItemEndIndex; let i = index\\\">\\n\\n                <div class=\\\"visitor-item\\\">\\n                    <div class=\\\"d-flex\\\">\\n                        <div class=\\\"media\\\">\\n                            <div class=\\\"icon\\\">\\n                                <mat-icon svgIcon=\\\"heroicons_outline:user-circle\\\"></mat-icon>\\n                            </div>\\n                            <div class=\\\"media-body\\\">\\n                                <h5 class=\\\"mb-2\\\">{{item.visitorName}}</h5>\\n                                <p class=\\\"pb-1 text-secondary others\\\">\\n                                    <span class=\\\"mr-4\\\"><mat-icon svgIcon=\\\"heroicons_outline:phone\\\"></mat-icon>{{item.visitorPhone}}</span>\\n                                    <span class=\\\"d-md-inline-block d-none\\\"><mat-icon svgIcon=\\\"dripicons:user-id\\\"></mat-icon>{{item.passNumber}}</span>\\n                                </p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"ml-auto check d-flex flex-column align-items-center\\\">\\n                            <div class=\\\"icon\\\" (click)=\\\"checkOut(item.visitorId)\\\">\\n                                <mat-icon svgIcon=\\\"feather:check-square\\\"></mat-icon>\\n                            </div>\\n                            <a class=\\\"mt-2\\\" href=\\\"javascript:void(0)\\\" (click)=\\\"editVisitor(item.visitorId)\\\">Edit</a>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"border-top visitor-extras\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-12 col-md-3 item d-block d-md-none\\\">\\n                                <p class=\\\"font-medium\\\">Pass ID</p>\\n                                <p class=\\\"right\\\">{{item.passNumber}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                <p class=\\\"font-medium\\\">IN Time</p>\\n                                <p class=\\\"right\\\">{{getDateTime(item.visitorInTime)}}</p>\\n                            </div>\\n                            <div class=\\\"ccol-sm-12 col-md-3 item\\\">\\n                                <p class=\\\"font-medium\\\">Expected Out</p>\\n                                <p class=\\\"right\\\">{{getDateTime(item.expectedVisitorOutTime)}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                <p class=\\\"font-medium\\\">Visit Type</p>\\n                                <p class=\\\"right\\\">{{item.visitTypeName}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                <p class=\\\"font-medium\\\">Tower</p>\\n                                <p class=\\\"right\\\">{{item.block_Unit}}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n            </div>\\n\\n            <div class=\\\"bg-card shadow p-0\\\" *ngIf=\\\"visitorList.length > 0\\\">\\n                <app-pagination [totalItems]=\\\"totalItems\\\" [ItemStartIndex]=\\\"ItemStartIndex\\\"\\n                        [ItemEndIndex]=\\\"ItemEndIndex\\\" [itemLimit]=\\\"itemLimit\\\" (outputParams)=\\\"getIndexParams($event)\\\">\\n            </app-pagination>\\n            </div>\\n\\n        </ng-container>\\n    </div>\\n</div>\";","export default \"<div class=\\\"expected-user-visitor-list-wrapper\\\">\\n    <app-loader *ngIf=\\\"!isVisitorDataLoaded\\\"></app-loader>\\n    <div class=\\\"main\\\">\\n        \\n        <ng-container *ngIf=\\\"isVisitorDataLoaded\\\">\\n\\n            <div class=\\\"d-flex mb-4\\\">\\n                <div>\\n                    <h4 class=\\\"mb-2\\\">Expected Visitors</h4>\\n                    <p class=\\\"text-secondary mb-1\\\" *ngIf=\\\"visitorList.length != 0\\\">{{totalItems}} results</p>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"bg-card shadow mb-3\\\" *ngIf=\\\"visitorList.length == 0\\\">\\n                <h6 class=\\\"text-secondary\\\">No Results found</h6>\\n            </div>\\n\\n            <div class=\\\"d-flex mb-4\\\" *ngIf=\\\"visitorList.length != 0\\\">\\n                <div class=\\\"d-flex ml-auto\\\">\\n                    <div class=\\\"mr-3\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"searchData\\\">\\n                    </div>\\n                    <div class=\\\"mr-3 ml-auto\\\">\\n                        <button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"navigateToCreate()\\\">\\n                            <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_solid:plus\\\"></mat-icon><span class=\\\"button-name\\\">Expected Visitor</span>\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"bg-card shadow mb-3\\\" *ngFor=\\\" let item of visitorList | simpleSearch: searchData | slice:ItemStartIndex:ItemEndIndex; let i = index\\\">\\n\\n                <div class=\\\"visitor-item\\\">\\n                    <div class=\\\"d-flex\\\">\\n                        <div class=\\\"media\\\">\\n                            <div class=\\\"icon\\\">\\n                                <mat-icon svgIcon=\\\"heroicons_outline:user-circle\\\"></mat-icon>\\n                            </div>\\n                            <div class=\\\"media-body\\\">\\n                                <h5 class=\\\"mb-2\\\">{{item.expectedVisitorName}}</h5>\\n                                <p class=\\\"pb-1 text-secondary others\\\">\\n                                    <span class=\\\"mr-4\\\"><mat-icon svgIcon=\\\"heroicons_outline:phone\\\"></mat-icon>{{item.expectedVisitorPhone}}</span>\\n                                    <span (click)=\\\"viewPass(item.expectedVisitorId)\\\" class=\\\"d-md-inline-block d-none text-primary link\\\"><mat-icon svgIcon=\\\"dripicons:user-id\\\"></mat-icon>{{item.visitorPassId}}</span>\\n                                </p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"ml-auto actions d-flex align-items-center\\\">\\n                            <mat-icon class=\\\"mr-2\\\" [color]=\\\"'primary'\\\" svgIcon=\\\"feather:edit\\\" (click)=\\\"editVisitor(item.expectedVisitorId)\\\"></mat-icon>\\n                            <mat-icon [color]=\\\"'warn'\\\" svgIcon=\\\"feather:trash\\\" (click)=\\\"deleteVisitor(item.expectedVisitorId, i)\\\"></mat-icon>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"border-top visitor-extras\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-12 col-md-3 item d-block d-md-none\\\">\\n                                <p class=\\\"font-medium\\\">Pass ID</p>\\n                                <p class=\\\"right link text-primary\\\" (click)=\\\"viewPass(item.expectedVisitorId)\\\">{{item.visitorPassId}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-4 item\\\">\\n                                <p class=\\\"font-medium\\\">Expected IN</p>\\n                                <p class=\\\"right\\\">{{getDateTime(item.expectedVisitorInTime)}}</p>\\n                            </div>\\n                            <div class=\\\"ccol-sm-12 col-md-4 item\\\">\\n                                <p class=\\\"font-medium\\\">Expected OUT</p>\\n                                <p class=\\\"right\\\">{{getDateTime(item.expectedVisitorOutTime)}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-4 item\\\">\\n                                <p class=\\\"font-medium\\\">Visit Type</p>\\n                                <p class=\\\"right\\\">{{item.visitType_Label}}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n            </div>\\n\\n            <div class=\\\"bg-card shadow p-0\\\" *ngIf=\\\"visitorList.length != 0\\\">\\n                <app-pagination [totalItems]=\\\"totalItems\\\" [ItemStartIndex]=\\\"ItemStartIndex\\\"\\n                        [ItemEndIndex]=\\\"ItemEndIndex\\\" [itemLimit]=\\\"itemLimit\\\" (outputParams)=\\\"getIndexParams($event)\\\">\\n            </app-pagination>\\n            </div>\\n\\n        </ng-container>\\n    </div>\\n</div>\\n\";","export default \"\\n<div class=\\\"exp-visitor-confirm-wrapper content-layout fullwidth-basic-normal-scroll\\\">\\n\\n    <!-- Background - Inline SVG for easy customizations -->\\n    <svg class=\\\"background\\\"\\n         viewBox=\\\"0 0 1531 891\\\"\\n         preserveAspectRatio=\\\"xMidYMax slice\\\"\\n         xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path d=\\\"M0 182c144.327 47.973 534.462 219.712 440.509 369.87C346.555 702.028 79.877 662.846 0 638V182z\\\"></path>\\n        <path d=\\\"M1405 848c-424.366 158.009-437-164-437-272s102-425 563-576v769c-21.333 29.333-63.333 55.667-126 79z\\\"></path>\\n        <path d=\\\"M1531 162c-122.914-17.284-377.96 33.191-543.433 206.414C822.095 541.636 797.342 648.75 835.842 731.622c38.5 82.871 198.243 134.841 400.555 92.053C1438.71 780.886 1492.752 775.894 1531 768V162z\\\"></path>\\n    </svg>\\n    \\n    <div class=\\\"main\\\">\\n\\n        <app-loader *ngIf=\\\"!isDataLoaded\\\"></app-loader>\\n\\n        <ng-container *ngIf=\\\"isDataLoaded\\\">\\n\\n            <condo-message class=\\\"mb-3\\\" *ngIf=\\\"message\\\"\\n            [appearance]=\\\"message.appearance\\\"\\n            [showIcon]=\\\"message.showIcon\\\"\\n            [type]=\\\"message.type\\\"\\n            [@shake]=\\\"message.shake\\\">\\n                    {{message.content}}\\n            </condo-message>\\n\\n        \\n            <div class=\\\"bg-card mt-4 p-5\\\">\\n\\n                <div class=\\\"id-details\\\">\\n                    <h5>{{visitorStructure.name}} ID: <span class=\\\"font-normal text-primary\\\">{{visitor.visitorPassId}}</span></h5>\\n                </div>\\n\\n                <div class=\\\"divider\\\"></div>\\n\\n                <div class=\\\"visitor-item\\\">\\n                    \\n                    <div class=\\\"d-flex flex-wrap\\\">\\n\\n                        <div class=\\\"media\\\">\\n                            <div class=\\\"icon\\\">\\n                                <mat-icon svgIcon=\\\"heroicons_outline:user-circle\\\"></mat-icon>\\n                            </div>\\n                            <div class=\\\"media-body\\\">\\n                                <h5 class=\\\"mt-0\\\">{{visitor.expectedVisitorName}}</h5>\\n                                <p class=\\\"pt-3 text-secondary others\\\">\\n                                    <span class=\\\"mr-4\\\"><mat-icon svgIcon=\\\"heroicons_outline:phone\\\"></mat-icon>{{visitor.expectedVisitorPhone}}</span>\\n                                    <span><mat-icon svgIcon=\\\"feather:home\\\"></mat-icon>{{visitor.block_Unit}}</span>\\n                                </p>\\n                                <p class=\\\"pt-2 type text-smr font-medium\\\">Multi use</p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"barcode\\\">\\n                            <!-- <ngx-barcode6\\n                                [bc-format]=\\\"'MSI'\\\"\\n                                [bc-value]=\\\"'12345678901231'\\\"\\n                                [bc-line-color]=\\\"'#64748B'\\\"\\n                                [bc-height]=\\\"80\\\"\\n                                [bc-display-value]=\\\"true\\\">\\n                            </ngx-barcode6> -->\\n                            <ngx-qrcode\\n                                [elementType]=\\\"elementType\\\"\\n                                [errorCorrectionLevel]=\\\"correctionLevel\\\"\\n                                [value]=\\\"visitor.visitorPassId\\\">\\n                            </ngx-qrcode>\\n                            <h6>{{visitor.visitorPassId}}</h6>\\n                        </div>\\n\\n                    </div>\\n                    \\n                    <div class=\\\"border-top visitor-extras\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-12 col-lg-6 item\\\">\\n                                <p>Contact Person</p>\\n                                <p class=\\\"font-medium right\\\">{{visitor.meetingPersonName | nill}}</p>\\n                            </div>\\n                            <div class=\\\"ccol-sm-12 col-lg-6 item\\\">\\n                                <p>Created On</p>\\n                                <p class=\\\"font-medium right\\\">{{getDateTime(visitor.insertedOn)}}</p>\\n                            </div>\\n                            <div class=\\\"ccol-sm-12 col-lg-6 item\\\">\\n                                <p>Valid Till</p>\\n                                <p class=\\\"font-medium right\\\">-</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-lg-6 item\\\">\\n                                <p>Visit Reason</p>\\n                                <p class=\\\"font-medium right\\\">{{visitor.purpose | nill}}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"row actions\\\">\\n                <a class=\\\"nav-link\\\" [routerLink]=\\\"visitorStructure.createBtnUrl\\\" \\n                routerLinkActive=\\\"active\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\" mat-flat-button [color]=\\\"'primary'\\\">{{visitorStructure.createBtnName}}</a>\\n                <a class=\\\"nav-link\\\" [routerLink]=\\\"visitorStructure.viewBtnUrl\\\" \\n                routerLinkActive=\\\"active\\\" [routerLinkActiveOptions] = \\\"{exact:true}\\\" mat-button>{{visitorStructure.viewBtnName}}</a>\\n            </div>\\n\\n        </ng-container>\\n\\n    </div>\\n</div>\";","export default \"<div class=\\\"checkin-visitor-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t\\n\\t\\t<app-loader *ngIf=\\\"!isDataLoaded\\\"></app-loader>\\n\\n\\t\\t<ng-container *ngIf=\\\"isDataLoaded\\\">\\n\\n\\t\\t\\t<condo-message class=\\\"mb-5\\\" *ngIf=\\\"message\\\"\\n\\t\\t\\t[appearance]=\\\"message.appearance\\\"\\n\\t\\t\\t[showIcon]=\\\"message.showIcon\\\"\\n\\t\\t\\t[type]=\\\"message.type\\\"\\n\\t\\t\\t[@shake]=\\\"message.shake\\\">\\n                    {{message.content}}\\n\\t\\t\\t</condo-message>\\n\\n\\n\\t\\t\\t<h4 class=\\\"mb-4\\\">Create Expected Visitor</h4>\\n\\n\\t\\t\\t<form #expectedVisitorForm=\\\"ngForm\\\"  name=\\\"expectedVisitorForm\\\" (ngSubmit)=\\\"submitExpectedVisitorForm(expectedVisitorForm)\\\" novalidate>\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t<div class=\\\"bg-card shadow\\\" *ngIf=\\\"isAdmin()\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\n\\t\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Expected Visit Type\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Visit\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"visitTypeList\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"lookupValueName\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.visitTypeId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"lookupValueId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"getSelectedVisitType($event)\\\" \\n\\t\\t\\t\\t\\t\\t\\t></condo-select>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<!-- Unit Visitor -->\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.visitTypeId && visitor.visitTypeId == 50\\\">\\n\\n\\t\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Tower No\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Tower\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"towerList\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"block_Label\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"block.blockId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"block_Id\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"getSelectedBlock($event)\\\" \\n\\t\\t\\t\\t\\t\\t\\t></condo-select>\\n\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"block.blockId && visitor.visitTypeId && visitor.visitTypeId == 50\\\">\\n\\n\\t\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Unit No\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Unit\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"unitList\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"bu_Label\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.apartmentUnitId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"buId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"getSelectedBlockUnit($event)\\\" \\n\\t\\t\\t\\t\\t\\t\\t></condo-select>\\n\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.apartmentUnitId\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Primary Name</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" [disabled]=\\\"true\\\" class=\\\"form-control\\\" placeholder=\\\"Primary Name\\\" [value]=\\\"block.primaryName\\\">\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<!-- Community Visitor -->\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.visitTypeId && visitor.visitTypeId == 51\\\">\\n\\n\\t\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Staff\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Staff\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"staffsList\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"staffName\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.tomeetStaffId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"staffId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"getSelectedStaff($event)\\\" \\n\\t\\t\\t\\t\\t\\t\\t></condo-select>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<div class=\\\"bg-card shadow\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Expected Visitor Name<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Visitor Name\\\" name=\\\"visitorName\\\" [(ngModel)]=\\\"visitor.expectedVisitorName\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Expected Visitor Count<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<input OnlyNumber=\\\"true\\\" class=\\\"form-control\\\" placeholder=\\\"Visitor Count\\\" name=\\\"visitorCount\\\" [(ngModel)]=\\\"visitor.expectedVisitorCount\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Expected Phone/Mobile No<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<ngx-intl-tel-input [inputId]=\\\"'userMobile'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[preferredCountries]=\\\"preferredCountries\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[enableAutoCountrySelect]=\\\"true\\\" [enablePlaceholder]=\\\"true\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[searchCountryFlag]=\\\"true\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[searchCountryField]=\\\"[SearchCountryField.Iso2, SearchCountryField.Name]\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[selectFirstCountry]=\\\"false\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[selectedCountryISO]=\\\"selectedCountryISO\\\" [maxLength]=\\\"15\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[phoneValidation]=\\\"false\\\" [separateDialCode]=\\\"separateDialCode\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"visitor.expectedVisitorPhone\\\" name=\\\"phone\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t</ngx-intl-tel-input>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Expected Date/Time of Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" name=\\\"visitorInTime\\\" [owlDateTime]=\\\"visitorInTime\\\" [owlDateTimeTrigger]=\\\"visitorInTime\\\" \\n\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Date Time\\\" [(ngModel)]=\\\"visitor.expectedVisitorInTime\\\" autocomplete=\\\"off\\\" (ngModelChange)=\\\"expectedDurationChange()\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[min]=\\\"currentDate\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t<owl-date-time #visitorInTime></owl-date-time>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"visitorInTime\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Expected Out-Time<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" name=\\\"visitorOutTime\\\" [owlDateTime]=\\\"visitorOutTime\\\" [owlDateTimeTrigger]=\\\"visitorOutTime\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Date Time\\\" [(ngModel)]=\\\"visitor.expectedVisitorOutTime\\\" autocomplete=\\\"off\\\" (ngModelChange)=\\\"expectedDurationChange()\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[min]=\\\"visitor.expectedVisitorInTime\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t<owl-date-time #visitorOutTime></owl-date-time>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"visitorOutTime\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Expected Duration of Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" placeholder=\\\"Duration Info\\\" name=\\\"durationInfo\\\" [value]=\\\"expectedDurationInfo\\\" [disabled]=\\\"true\\\">\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\n\\t\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Expected Visit Category\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Category\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"visitCategoryList | orderBy : 'lookupValueName'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"lookupValueName\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.visitorCategoryId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"lookupValueId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"getSelectedCategory($event)\\\" \\n\\t\\t\\t\\t\\t\\t\\t></condo-select>\\n\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Reason for Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t\\t<textarea  type=\\\"text\\\" class=\\\"form-control purpose-box\\\" placeholder=\\\"Enter purpose\\\" name=\\\"visitorpurpose\\\" [(ngModel)]=\\\"visitor.purpose\\\" required></textarea>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t\\t<button class=\\\"float-right\\\" mat-flat-button [color]=\\\"'primary'\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span *ngIf=\\\"!isEdit\\\">Submit</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngIf=\\\"isEdit\\\">Update</span>\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</form>\\n\\n\\t\\t</ng-container>\\n\\t\\n\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"expected-visitor-wrapper content-layout right-sidebar-fullheight-basic-inner-scroll\\\">\\n    <mat-drawer-container class=\\\"example-container\\\" [hasBackdrop]=\\\"true\\\" #matDrawer>\\n        <mat-drawer class=\\\"col-lg-3 col-md-3 col-sm-3 col-xs-3 p-0\\\" #filter mode=\\\"over\\\" position=\\\"end\\\">\\n\\t\\t\\t<div class=\\\"expected-visitor-drawer\\\">\\n\\t\\t\\t\\t<div class=\\\"title\\\">\\n\\t\\t\\t\\t\\t<h4> Filter </h4>\\n\\t\\t\\t\\t\\t<div class=\\\"ml-auto\\\">\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button (click)=\\\"goBack()\\\">\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon [svgIcon]=\\\"'close'\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<form>\\n\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n                        <div class=\\\"col-sm-12\\\">\\n                            <div class=\\\"input-box\\\">\\n                                <label>From Date</label>\\n                                <input class=\\\"form-control\\\" name=\\\"eventDateFrom\\\" [owlDateTime]=\\\"eventDateFrom\\\" [owlDateTimeTrigger]=\\\"eventDateFrom\\\" placeholder=\\\"From Date\\\" \\n                                [(ngModel)]=\\\"filterField.fromDate\\\" autocomplete=\\\"off\\\">\\n                                <owl-date-time [pickerType]=\\\"'calendar'\\\" #eventDateFrom></owl-date-time>\\n                                <div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"eventDateFrom\\\">\\n                                    <mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-sm-12\\\">\\n                            <div class=\\\"input-box\\\">\\n                                <label>To Date</label>\\n                                <input class=\\\"form-control\\\" name=\\\"eventDateTo\\\" [owlDateTime]=\\\"eventDateTo\\\" [owlDateTimeTrigger]=\\\"eventDateTo\\\" placeholder=\\\"To Date\\\" \\n                                [(ngModel)]=\\\"filterField.toDate\\\" autocomplete=\\\"off\\\">\\n                                <owl-date-time [pickerType]=\\\"'calendar'\\\" #eventDateTo></owl-date-time>\\n                                <div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"eventDateTo\\\">\\n                                    <mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"text-right mt-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"filterApply()\\\">Apply</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button (click)=\\\"clearFilter()\\\">Clear</button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</form>\\n\\t\\t\\t</div>\\n        </mat-drawer>\\n        <mat-drawer-content>\\n            <app-loader *ngIf=\\\"!isVisitorDataLoaded\\\"></app-loader>\\n\\t\\t\\t<div class=\\\"main\\\">\\n                \\n               <ng-container *ngIf=\\\"isVisitorDataLoaded\\\">\\n\\n                    <div class=\\\"d-flex mb-4\\\">\\n                        <div>\\n                            <h4 class=\\\"mb-2\\\">Expected Visitors</h4>\\n                            <p class=\\\"text-secondary mb-1\\\">{{totalItems}} results from {{getDate(filterField.fromDate)}} to {{getDate(filterField.toDate)}}</p>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"d-flex mb-4\\\">\\n                        <div class=\\\"d-flex ml-auto\\\">\\n                            <div class=\\\"mr-3\\\">\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"searchData\\\">\\n                            </div>\\n                            <div class=\\\"mr-3 ml-auto\\\">\\n                                <button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"navigateToCreate()\\\">\\n                                    <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_solid:plus\\\"></mat-icon><span class=\\\"button-name\\\">Expected Visitor</span>\\n                                </button>\\n                            </div>\\n                            <div>\\n                                <button mat-flat-button [color]=\\\"'accent'\\\" (click)=\\\"filter.toggle()\\\">\\n                                    <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_outline:filter\\\"></mat-icon><span class=\\\"button-name\\\">Filter</span>\\n                                </button>\\n                            </div>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"bg-card shadow mb-3\\\" *ngFor=\\\" let item of visitorList | simpleSearch: searchData | slice:ItemStartIndex:ItemEndIndex; let i = index\\\">\\n\\n                        <div class=\\\"visitor-item\\\">\\n                            <div class=\\\"d-flex\\\">\\n                                <div class=\\\"media\\\">\\n                                    <div class=\\\"icon\\\">\\n                                        <mat-icon svgIcon=\\\"heroicons_outline:user-circle\\\"></mat-icon>\\n                                    </div>\\n                                    <div class=\\\"media-body\\\">\\n                                        <h5 class=\\\"mb-2\\\">{{item.expectedVisitorName}}</h5>\\n                                        <p class=\\\"pb-1 text-secondary others\\\">\\n                                            <span class=\\\"mr-4\\\"><mat-icon svgIcon=\\\"heroicons_outline:phone\\\"></mat-icon>{{item.expectedVisitorPhone}}</span>\\n                                            <span (click)=\\\"viewPass(item.expectedVisitorId)\\\" class=\\\"d-md-inline-block d-none link text-primary\\\"><mat-icon svgIcon=\\\"dripicons:user-id\\\"></mat-icon>{{item.visitorPassId}}</span>\\n                                        </p>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"ml-auto check d-flex align-items-center\\\">\\n                                    <div class=\\\"icon\\\" (click)=\\\"checkIn(item)\\\">\\n                                        <mat-icon svgIcon=\\\"feather:check-square\\\"></mat-icon>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"border-top visitor-extras\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-sm-12 col-md-3 item d-block d-md-none\\\">\\n                                        <p class=\\\"font-medium\\\">Pass ID</p>\\n                                        <p class=\\\"right link text-primary\\\" (click)=\\\"viewPass(item.expectedVisitorId)\\\">{{item.visitorPassId}}</p>\\n                                    </div>\\n                                    <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                        <p class=\\\"font-medium\\\">Expected IN</p>\\n                                        <p class=\\\"right\\\">{{getDateTime(item.expectedVisitorInTime)}}</p>\\n                                    </div>\\n                                    <div class=\\\"ccol-sm-12 col-md-3 item\\\">\\n                                        <p class=\\\"font-medium\\\">Expected OUT</p>\\n                                        <p class=\\\"right\\\">{{getDateTime(item.expectedVisitorOutTime)}}</p>\\n                                    </div>\\n                                    <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                        <p class=\\\"font-medium\\\">Visit Type</p>\\n                                        <p class=\\\"right\\\">{{item.visitType_Label}}</p>\\n                                    </div>\\n                                    <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                        <p class=\\\"font-medium\\\">Tower</p>\\n                                        <p class=\\\"right\\\">{{item.block_Unit}}</p>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                    </div>\\n\\n                    <div class=\\\"bg-card shadow p-0\\\" *ngIf=\\\"visitorList.length > 0\\\">\\n                        <app-pagination [totalItems]=\\\"totalItems\\\" [ItemStartIndex]=\\\"ItemStartIndex\\\"\\n                                [ItemEndIndex]=\\\"ItemEndIndex\\\" [itemLimit]=\\\"itemLimit\\\" (outputParams)=\\\"getIndexParams($event)\\\">\\n                    </app-pagination>\\n                    </div>\\n\\n               </ng-container>\\n\\n                <!-- <condo-card *ngIf=\\\"isVisitorDataLoaded\\\">\\n                    <div CondoCardHeader>\\n                        <div class=\\\"d-sm-flex table-header\\\">\\n                            <div>\\n                                <h4>Expected Visitors <span class=\\\"d-block d-md-inline-block\\\">({{dateFormat(filterField.fromDate)}} - {{dateFormat(filterField.toDate)}})</span></h4>\\n                                <p>{{totalItems}} results</p>\\n                            </div>\\n                            <div class=\\\"d-flex ml-auto\\\">\\n                                <div class=\\\"mr-3\\\">\\n                                    <app-table-search [input]=\\\"visitorSearch\\\" (outputParams)=\\\"onGlSearchFilter($event)\\\"></app-table-search>\\n                                </div>\\n                                <div class=\\\"mr-3\\\">\\n                                    <app-print-dropdown (outputParams) =\\\"getPrintParams($event)\\\"></app-print-dropdown>\\n                                </div>\\n                                <div class=\\\"mr-3 ml-auto\\\">\\n                                    <button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"navigateToCreate()\\\">\\n                                        <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_solid:plus\\\"></mat-icon><span class=\\\"button-name\\\">Expected Visitor</span>\\n                                    </button>\\n                                </div>\\n                                <div>\\n                                    <button mat-flat-button [color]=\\\"'accent'\\\" (click)=\\\"filter.toggle()\\\">\\n                                        <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_outline:filter\\\"></mat-icon><span class=\\\"button-name\\\">Filter</span>\\n                                    </button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div CondoCardBody>\\n                        <jqxGrid  [theme]=\\\"'material'\\\"  [width]=\\\"'100%'\\\" [rowsheight]=\\\"48\\\" [autoheight]=\\\"true\\\"\\n                            [pageable]=\\\"true\\\" [filterable]=\\\"true\\\" [sortable]=\\\"true\\\" [source]=\\\"visitorList\\\"\\n                            [columns]=\\\"columnData\\\" [columnsresize]=\\\"true\\\" [enablehover]=\\\"false\\\" #datagrid>\\n                        </jqxGrid> \\n                    </div>\\n                </condo-card> -->\\n\\n            </div>\\n        </mat-drawer-content>\\n    </mat-drawer-container>\\n</div>\\n\";","export default \"<div class=\\\"frequent-vendor-list-wrapper\\\">\\n    <app-loader *ngIf=\\\"!isVisitorDataLoaded\\\"></app-loader>\\n    <div class=\\\"main\\\">\\n        <ng-container *ngIf=\\\"isVisitorDataLoaded\\\">\\n\\n            <div class=\\\"d-flex mb-4\\\">\\n                <div>\\n                    <h4 class=\\\"mb-2\\\">\\n                        <span *ngIf=\\\"urlType == 'frequent-visitor-list'\\\">Frequent Visitor List</span>\\n                        <span *ngIf=\\\"urlType == 'vendor-pass-list'\\\">Vendor Pass List</span>\\n                    </h4>\\n                    <p class=\\\"text-secondary mb-1\\\">{{totalItems}} results</p>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"d-flex mb-4\\\">\\n                <div class=\\\"d-flex ml-auto\\\">\\n                    <div class=\\\"mr-3\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"searchData\\\">\\n                    </div>\\n                    <div class=\\\"mr-3 ml-auto\\\">\\n                        <button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"navigateToCreate()\\\">\\n                            <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_solid:plus\\\"></mat-icon>\\n                            <span class=\\\"button-name\\\" *ngIf=\\\"urlType == 'frequent-visitor-list'\\\">Frequent Visitor</span>\\n                            <span class=\\\"button-name\\\" *ngIf=\\\"urlType == 'vendor-pass-list'\\\">Vendor Pass</span>\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"bg-card shadow mb-3\\\" *ngFor=\\\" let item of visitorList | simpleSearch: searchData | slice:ItemStartIndex:ItemEndIndex; let i = index\\\">\\n\\n                <div class=\\\"visitor-item\\\">\\n                    <div class=\\\"d-flex\\\">\\n                        <div class=\\\"media\\\">\\n                            <div class=\\\"icon\\\">\\n                                <mat-icon svgIcon=\\\"heroicons_outline:user-circle\\\"></mat-icon>\\n                            </div>\\n                            <div class=\\\"media-body\\\">\\n                                <h5 class=\\\"mb-2\\\">{{item.expectedVisitorName}}</h5>\\n                                <p class=\\\"pb-1 text-secondary others\\\">\\n                                    <span class=\\\"mr-4\\\"><mat-icon svgIcon=\\\"heroicons_outline:phone\\\"></mat-icon>{{item.expectedVisitorPhone}}</span>\\n                                    <span class=\\\"d-md-inline-block d-none link text-primary\\\" (click)=\\\"viewPass(item.expectedVisitorId)\\\"><mat-icon svgIcon=\\\"dripicons:user-id\\\"></mat-icon>{{item.visitorPassId}}</span>\\n                                </p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"ml-auto check d-flex align-items-center\\\" *ngIf=\\\"isAdmin\\\">\\n                            <div class=\\\"icon\\\" (click)=\\\"checkIn(item)\\\">\\n                                <mat-icon svgIcon=\\\"feather:check-square\\\"></mat-icon>\\n                            </div>\\n                        </div>\\n                        <!-- <div class=\\\"ml-auto actions d-flex align-items-center\\\">\\n                            <mat-icon class=\\\"mr-2\\\" [color]=\\\"'primary'\\\" svgIcon=\\\"feather:edit\\\" (click)=\\\"editVisitor(item.expectedVisitorId)\\\"></mat-icon>\\n                            <mat-icon [color]=\\\"'warn'\\\" svgIcon=\\\"feather:trash\\\" (click)=\\\"deleteVisitor(item.expectedVisitorId, i)\\\"></mat-icon>\\n                        </div> -->\\n                    </div>\\n                    <div class=\\\"border-top visitor-extras\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-12 col-md-3 item d-block d-md-none\\\">\\n                                <p class=\\\"font-medium\\\">Pass ID</p>\\n                                <p class=\\\"right link text-primary\\\" (click)=\\\"viewPass(item.expectedVisitorId)\\\">{{item.visitorPassId}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-3 item\\\" *ngIf=\\\"urlType == 'vendor-pass-list'\\\">\\n                                <p class=\\\"font-medium\\\">Expected IN</p>\\n                                <p class=\\\"right\\\">{{getDateTime(item.expectedVisitorInTime)}}</p>\\n                            </div>\\n                            <div class=\\\"ccol-sm-12 col-md-3 item\\\" *ngIf=\\\"urlType == 'vendor-pass-list'\\\">\\n                                <p class=\\\"font-medium\\\">Expected OUT</p>\\n                                <p class=\\\"right\\\">{{getDateTime(item.expectedVisitorOutTime)}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                <p class=\\\"font-medium\\\">Visit Type</p>\\n                                <p class=\\\"right\\\">{{item.visitType_Label}}</p>\\n                            </div>\\n                            <div class=\\\"col-sm-12 col-md-3 item\\\">\\n                                <p class=\\\"font-medium\\\">Tower</p>\\n                                <p class=\\\"right\\\">{{item.block_Unit}}</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n            </div>\\n\\n            <div class=\\\"bg-card shadow p-0\\\" *ngIf=\\\"visitorList.length > 0\\\">\\n                <app-pagination [totalItems]=\\\"totalItems\\\" [ItemStartIndex]=\\\"ItemStartIndex\\\"\\n                        [ItemEndIndex]=\\\"ItemEndIndex\\\" [itemLimit]=\\\"itemLimit\\\" (outputParams)=\\\"getIndexParams($event)\\\">\\n            </app-pagination>\\n            </div>\\n\\n        </ng-container>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"user-visitor-list-wrapper\\\">\\n    <app-loader *ngIf=\\\"!isVisitorDataLoaded\\\"></app-loader>\\n    <div class=\\\"main\\\">\\n        <condo-card *ngIf=\\\"isVisitorDataLoaded\\\">\\n            <div CondoCardHeader>\\n                <div class=\\\"d-sm-flex table-header\\\">\\n                    <div>\\n                        <h4>\\n                            <span *ngIf=\\\"urlType == 'expected-visitor-user-checked-in'\\\">Currently Checked In</span>\\n                            <span *ngIf=\\\"urlType == 'expected-visitor-user-history'\\\">Visitor History</span>\\n                       </h4>\\n                        <p>{{totalItems}} results</p>\\n                    </div>\\n                    <div class=\\\"d-flex ml-auto\\\">\\n                        <div class=\\\"mr-3\\\">\\n                            <app-table-search [input]=\\\"visitorSearch\\\" (outputParams)=\\\"onGlSearchFilter($event)\\\"></app-table-search>\\n                        </div>\\n                        <div class=\\\"mr-3\\\">\\n                            <app-print-dropdown (outputParams) =\\\"getPrintParams($event)\\\"></app-print-dropdown>\\n                        </div>\\n                        <div class=\\\"ml-auto\\\">\\n                            <button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"navigateToCreate()\\\">\\n                                <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_solid:plus\\\"></mat-icon><span class=\\\"button-name\\\">Expected Visitor</span>\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div CondoCardBody>\\n                <jqxGrid  [theme]=\\\"'material'\\\"  [width]=\\\"'100%'\\\" [rowsheight]=\\\"48\\\" [autoheight]=\\\"true\\\"\\n                    [pageable]=\\\"true\\\" [filterable]=\\\"true\\\" [sortable]=\\\"true\\\" [source]=\\\"visitorList\\\"\\n                    [columns]=\\\"columnData\\\" [columnsresize]=\\\"true\\\" [enablehover]=\\\"false\\\" #datagrid>\\n                </jqxGrid> \\n            </div>\\n        </condo-card>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"checkin-visitor-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t<h4 class=\\\"mb-4\\\">\\n\\t\\t\\t<span *ngIf=\\\"urlType =='create' || urlType =='checkin'\\\">Visitor Check-In</span>\\n\\t\\t\\t<span *ngIf=\\\"urlType =='checkout'\\\">Visitor Check-Out</span>\\n\\t\\t\\t<span *ngIf=\\\"urlType =='edit'\\\">Edit Visitor Check-Out</span>\\n\\t\\t</h4>\\n\\t\\t<app-loader *ngIf=\\\"!isDataLoaded\\\"></app-loader>\\n\\t\\t<condo-message class=\\\"mb-3\\\" *ngIf=\\\"message\\\"\\n\\t\\t\\t[appearance]=\\\"message.appearance\\\"\\n\\t\\t\\t[showIcon]=\\\"message.showIcon\\\"\\n\\t\\t\\t[type]=\\\"message.type\\\"\\n\\t\\t\\t[@shake]=\\\"message.shake\\\">\\n\\t\\t\\t\\t{{message.content}}\\n\\t\\t</condo-message>\\n\\t\\t<form #visitorForm=\\\"ngForm\\\" *ngIf=\\\"isDataLoaded\\\">\\n\\t\\t\\t<div class=\\\"bg-card shadow\\\">\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Expected Visit Type\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Visit\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"visitTypeList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"lookupValueName\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.visitTypeId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"lookupValueId\\\"\\n\\t\\t\\t\\t\\t\\t\\t[isDisabled]=\\\"disableField()\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedVisitType($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- Unit Visitor -->\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.visitTypeId && visitor.visitTypeId == 50\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Tower No\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Tower\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"towerList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"block_Label\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"block.blockId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"block_Id\\\"\\n\\t\\t\\t\\t\\t\\t\\t[isDisabled]=\\\"disableField()\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedBlock($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"block.blockId && visitor.visitTypeId && visitor.visitTypeId == 50\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Unit No\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Unit\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"unitList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"bu_Label\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.apartmentUnitId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"buId\\\"\\n\\t\\t\\t\\t\\t\\t\\t[isDisabled]=\\\"disableField()\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedBlockUnit($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.apartmentUnitId\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Primary Name</label>\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" disabled class=\\\"form-control\\\" placeholder=\\\"Primary Name\\\" [value]=\\\"block.primaryName\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- Community Visitor -->\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"visitor.visitTypeId && visitor.visitTypeId == 51\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Staff\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Staff\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"staffsList\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"staffName\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.tomeetStaffId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"staffId\\\"\\n\\t\\t\\t\\t\\t\\t\\t[isDisabled]=\\\"disableField()\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedStaff($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"bg-card shadow\\\">\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Visitor Name<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Visitor Name\\\" name=\\\"visitorName\\\" [(ngModel)]=\\\"visitor.visitorName\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"disableField()\\\" required>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Visitor Count<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input OnlyNumber=\\\"true\\\" class=\\\"form-control\\\" placeholder=\\\"Visitor Count\\\" name=\\\"visitorCount\\\" [(ngModel)]=\\\"visitor.visitorCount\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"disableField()\\\" required>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\"> \\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Phone/Mobile No<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<ngx-intl-tel-input [inputId]=\\\"'userMobile'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[preferredCountries]=\\\"preferredCountries\\\"\\n\\t\\t\\t\\t\\t\\t\\t[enableAutoCountrySelect]=\\\"true\\\" [enablePlaceholder]=\\\"true\\\"\\n\\t\\t\\t\\t\\t\\t\\t[searchCountryFlag]=\\\"true\\\"\\n\\t\\t\\t\\t\\t\\t\\t[searchCountryField]=\\\"[SearchCountryField.Iso2, SearchCountryField.Name]\\\"\\n\\t\\t\\t\\t\\t\\t\\t[selectFirstCountry]=\\\"false\\\"\\n\\t\\t\\t\\t\\t\\t\\t[selectedCountryISO]=\\\"CountryISO.Philippines\\\" [maxLength]=\\\"15\\\"\\n\\t\\t\\t\\t\\t\\t\\t[phoneValidation]=\\\"false\\\" [separateDialCode]=\\\"separateDialCode\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"disableField()\\\"\\n\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"visitor.visitorPhone\\\" name=\\\"phone\\\">\\n\\t\\t\\t\\t\\t\\t</ngx-intl-tel-input>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Actual Date/Time of Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" name=\\\"visitorInTime\\\" [owlDateTime]=\\\"visitorInTime\\\" [owlDateTimeTrigger]=\\\"visitorInTime\\\" \\n\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Date Time\\\" [(ngModel)]=\\\"visitor.visitorInTime\\\" autocomplete=\\\"off\\\" [disabled]=\\\"true\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t<owl-date-time #visitorInTime></owl-date-time>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"visitorInTime\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Expected OutTime<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" name=\\\"expectedVisitorOutTime\\\" [owlDateTime]=\\\"expectedVisitorOutTime\\\" [owlDateTimeTrigger]=\\\"expectedVisitorOutTime\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Date Time\\\" [(ngModel)]=\\\"visitor.expectedVisitorOutTime\\\" autocomplete=\\\"off\\\" (ngModelChange)=\\\"expectedDurationChange()\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[min]=\\\"visitor.visitorInTime\\\" [disabled]=\\\"urlType =='checkout'\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t<owl-date-time #expectedVisitorOutTime></owl-date-time>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"expectedVisitorOutTime\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- CheckOutPage Enable -->\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"urlType=='checkout'\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Check OutTime<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" name=\\\"visitorOutTime\\\" [owlDateTime]=\\\"visitorOutTime\\\" [owlDateTimeTrigger]=\\\"visitorOutTime\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Date Time\\\" [(ngModel)]=\\\"visitor.visitorOutTime\\\" autocomplete=\\\"off\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[min]=\\\"visitor.visitorInTime\\\" disabled required>\\n\\t\\t\\t\\t\\t\\t\\t<owl-date-time #visitorOutTime></owl-date-time> \\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"date-btn\\\" [owlDateTimeTrigger]=\\\"visitorOutTime\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Expected Duration of Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-control\\\" placeholder=\\\"Duration Info\\\" name=\\\"durationInfo\\\" [value]=\\\"expectedDurationInfo\\\" [disabled]=\\\"true\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Pass Number<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter Number\\\" name=\\\"visitorPassNumber\\\" [(ngModel)]=\\\"visitor.passNumber\\\"\\n\\t\\t\\t\\t\\t\\t\\t[disabled]=\\\"urlType !='create'\\\" required>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Visit Category\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Category\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"visitCategoryList | orderBy : 'lookupValueName'\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"lookupValueName\\\"\\n\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"visitor.visitorCategoryId\\\"\\n\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"lookupValueId\\\"\\n\\t\\t\\t\\t\\t\\t\\t[isDisabled]=\\\"disableField()\\\"\\n\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setSelectedCategory($event)\\\" \\n\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label>Reason for Visit<span class=\\\"required\\\">*</span></label>\\n\\t\\t\\t\\t\\t\\t\\t<textarea  type=\\\"text\\\" class=\\\"form-control purpose-box\\\" placeholder=\\\"Enter purpose\\\" name=\\\"visitorpurpose\\\" [(ngModel)]=\\\"visitor.purpose\\\" required></textarea>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"text-right\\\">\\n\\t\\t\\t\\t\\t\\t<button *ngIf=\\\"urlType =='create' || urlType =='checkin'\\\" mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"createCheckIn()\\\">CheckIn</button>\\n\\t\\t\\t\\t\\t\\t<button *ngIf=\\\"urlType=='checkout'\\\" mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"createCheckOut()\\\">CheckOut</button>\\n\\t\\t\\t\\t\\t\\t<button *ngIf=\\\"urlType=='edit'\\\" mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"updateCheckIn()\\\">Update</button>\\n\\t\\t\\t\\t\\t\\t<button *ngIf=\\\"urlType =='create'\\\" class=\\\"ml-2\\\" mat-stroked-button (click)=\\\"resetField()\\\">Clear</button>\\n\\t\\t\\t\\t\\t\\t<button *ngIf=\\\"(pageComingFrom && pageComingFrom.length > 0) || (urlType =='checkout'|| urlType=='edit')\\\" class=\\\"ml-2\\\" mat-stroked-button (click)=\\\"navigateBack()\\\">Cancel</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</form>\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"visitor-history-wrapper\\\">\\n\\t<app-loader *ngIf=\\\"!isVisitorDataLoaded\\\"></app-loader>\\n   <div class=\\\"main\\\">\\n\\t\\t<condo-card *ngIf=\\\"isVisitorDataLoaded\\\">\\n\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\t\\t<div class=\\\"d-sm-flex table-header\\\">\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<h4>Visitors History</h4>\\n\\t\\t\\t\\t\\t\\t<p>{{totalItems}} results</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"d-flex ml-auto\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"mr-3\\\">\\n\\t\\t\\t\\t\\t\\t\\t<app-table-search [input]=\\\"visitorSearch\\\" (outputParams)=\\\"onGlSearchFilter($event)\\\"></app-table-search>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"mr-3\\\">\\n\\t\\t\\t\\t\\t\\t\\t<app-print-dropdown (outputParams) =\\\"getPrintParams($event)\\\"></app-print-dropdown>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"ml-auto\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"navigateToCreate()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_solid:plus\\\"></mat-icon><span class=\\\"button-name\\\">Visitor</span>\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div CondoCardBody>\\n\\t\\t\\t\\t<jqxGrid [theme]=\\\"'material'\\\" [width]=\\\"'100%'\\\" [rowsheight]=\\\"48\\\" [autoheight]=\\\"true\\\"\\n\\t\\t\\t\\t\\t[pageable]=\\\"true\\\" [filterable]=\\\"true\\\" [sortable]=\\\"true\\\" [source]=\\\"visitorList\\\"\\n\\t\\t\\t\\t\\t[columns]=\\\"columnData\\\" [columnsresize]=\\\"true\\\" [enablehover]=\\\"false\\\" #datagrid>\\n\\t\\t\\t\\t</jqxGrid> \\n\\t\\t\\t</div>\\n\\t\\t</condo-card>\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"visitor-setup-wrapper content-layout right-sidebar-fullheight-basic-inner-scroll\\\">\\n    <mat-drawer-container class=\\\"example-container\\\" [hasBackdrop]=\\\"true\\\" #matDrawer>\\n        <mat-drawer  #filter mode=\\\"over\\\" position=\\\"end\\\">\\n\\t\\t\\t<div class=\\\"visitor-setup-drawer\\\">\\n\\t\\t\\t\\t<div class=\\\"title\\\">\\n\\t\\t\\t\\t\\t<h4 class= \\\"mb-4\\\" *ngIf=\\\"clickMode == 'add'\\\">Add Visitor Category</h4>\\n\\t\\t\\t\\t\\t<h4 class= \\\"mb-4\\\" *ngIf=\\\"clickMode == 'edit'\\\">Edit Visitor Category</h4>\\n\\t\\t\\t\\t\\t<div class=\\\"ml-auto\\\">\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button (click)=\\\"closeDrawer()\\\">\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon [svgIcon]=\\\"'close'\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<app-loader *ngIf=\\\"!isDrawerLoader\\\"></app-loader>\\n\\t\\t\\t\\t<div *ngIf=\\\"isDrawerLoader\\\">\\n\\t\\t\\t\\t\\t<form #addVisitorCategoryForm = \\\"ngForm\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Category Type*</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Type\\\" name=\\\"name\\\" [(ngModel)]=\\\"visitor.lookupValueName\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Description</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\"  placeholder=\\\"Description\\\" name=\\\"description\\\" [(ngModel)]=\\\"visitor.description\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"float-right\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<button  class=\\\"mr-2\\\" mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"submitVisitorCategoryForm()\\\">{{clickMode=='add' ? 'Submit' : 'Update'}}</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button (click)=\\\"closeDrawer()\\\">Cancel</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</form>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n        </mat-drawer>\\n        <mat-drawer-content>\\n\\t\\t\\t<div class=\\\"main\\\">\\n\\t\\t\\t\\t<!-- Loader -->\\n\\t\\t\\t\\t<app-loader *ngIf=\\\"!isDataLoaded\\\"></app-loader>\\n\\t\\t\\t\\t<div *ngIf=\\\"isDataLoaded\\\">\\n\\t\\t\\t\\t\\t\\t<!-- Visitor Header -->\\n\\t\\t\\t\\t\\t<div class=\\\"d-flex mb-4\\\">\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<h4>Visitor Categories</h4>\\n\\t\\t\\t\\t\\t\\t\\t<p class=\\\"text-secondary\\\">{{totalItems}} Items</p>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"d-flex ml-auto\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"d-none d-md-block mr-3\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"categorySearch\\\">\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"addVisitorCategory()\\\">Add New Type</button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<!-- Visitor List -->\\n\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12 col-md-6 col-lg-4 col-xl-3\\\" *ngFor=\\\"let item of visitorCategoryList | columnSearch : 'lookupValueName': categorySearch; let i = index\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"bg-card shadow overflow-hidden text-nowrap\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<h6 class=\\\"mt-2\\\">{{item.lookupValueName}}</h6>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"d-flex mt-4 button-wrapper\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"px-3\\\" mat-button [color]=\\\"'primary'\\\" (click)=\\\"editVisitorCategory(item)\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon [svgIcon]=\\\"'feather:edit'\\\"></mat-icon> Edit\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"px-3\\\" mat-button [color]=\\\"'warn'\\\" (click)=\\\"deleteVisitorCategory(item,i)\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon [svgIcon]=\\\"'feather:trash-2'\\\"></mat-icon> Delete\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n        </mat-drawer-content>\\n    </mat-drawer-container>\\n</div>\\n\";","export default \"<router-outlet></router-outlet>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tbW9uL3Zpc2l0b3IvY29tcG9uZW50cy9jcmVhdGUtdmVuZG9yLWZycXVlbnQtdmlzaXRvci9jcmVhdGUtdmVuZG9yLWZycXVlbnQtdmlzaXRvci5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, ChangeDetectorRef, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApartmentService } from 'src/app/api/controllers/Apartment';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { StaffService } from 'src/app/api/controllers/Staff';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { SearchCountryField, CountryISO } from 'ngx-intl-tel-input';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\n\n@Component({\n  selector: 'app-create-vendor-frquent-visitor',\n  templateUrl: './create-vendor-frquent-visitor.component.html',\n  styleUrls: ['./create-vendor-frquent-visitor.component.scss']\n})\nexport class CreateVendorFrquentVisitorComponent implements OnInit {\n  @ViewChild('expectedVisitorForm') form:any;\n  visitor:any = {};\n  urlType:string;\n  message: any = null;\n  isDataLoaded:boolean = true;\n  visitTypeList:any =[];\n  visitCategoryList:any = [];\n  towerList:any = [];\n  unitList:any = [];\n  staffsList:any = [];\n  block:any = {};\n  type:string;\n\n\n  separateDialCode = true;\n  SearchCountryField = SearchCountryField;\n  CountryISO = CountryISO;\n  preferredCountries: CountryISO[] = [CountryISO.UnitedStates, CountryISO.UnitedKingdom];\n\n  constructor(\n    private apartmentService:ApartmentService,\n    private visitorService:VisitorService,\n    private lookupService: LookupService,\n    private sessionService:SessionService,\n    private staffService: StaffService,\n    private router:Router,\n    private activateRouter: ActivatedRoute,\n    private sharedService: SharedService,\n    private _changeDetectorRef: ChangeDetectorRef,\n  ) {\n    this.activateRouter.url.subscribe((data)=>{\n      this.urlType = data[0].path;\n      if(this.urlType == 'vendor-pass-create')\n      this.type = 'Vendor';\n      else if(this.urlType == 'frequent-visitor-create')\n      this.type = 'Frequent';\n    })\n  }\n\n  get isAdmin() {\n    return this.sessionService.isAdmin();\n  }\n\n  resetField() {\n    this.visitor={};\n    this.visitor.visitTypeId = null;\n    this.visitor.visitorCategoryId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n  }\n\n  setSelectedCategory(event){\n    this.visitor.visitorCategoryId = event[0].lookupValueId\n  }\n\n  setSelectedVisitType(event){\n    this.visitor.visitTypeId = event[0].lookupValueId;\n    this.visitor.apartmentUnitId = null;\n    this.visitor.tomeetStaffId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n  }\n\n  setSelectedBlock(event) {\n    this.block.blockId = event[0].block_Id\n    this.getUnits('change');\n  }\n\n  setSelectedBlockUnit(event){\n    this.visitor.apartmentUnitId = event[0].buId\n    this.getPrimaryName();\n  }\n\n  setSelectedStaff(event){\n    this.visitor.tomeetStaffId = event[0].staffId;\n    this.visitor.apartmentUnitId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n  }\n\n  getTowers() {\n    let tower = {\n     apartmentId: this.sessionService.apartmentId\n    }\n    return this.apartmentService.getApartmentBlockAndBlockUnitIsLivingByApartmentId(tower).toPromise();\n  }\n\n  getUnits(type) {\n    if(type == 'change') {\n      this.visitor.apartmentUnitId = null;\n      this.block.primaryName = '';\n    }\n    for(let data of this.towerList) {\n      if(this.block.blockId == data.block_Id) {\n        this.unitList = data.blockUnit;\n        break;\n      }\n    }\n  }\n\n  getPrimaryName() {\n    for(let data of this.unitList) {\n      if(this.visitor.apartmentUnitId == data.buId) {\n        this.block.primaryName = data.il_Label;\n        break;\n      }\n    }\n  }\n\n  back() {\n    if(this.urlType == 'vendor-pass-create')\n      this.router.navigate(['vendor-pass-list'],{relativeTo: this.activateRouter.parent});\n    else if(this.urlType == 'frequent-visitor-create')\n      this.router.navigate(['frequent-visitor-list'],{relativeTo: this.activateRouter.parent});\n  }\n\n  createExpectedVisitor() {\n    this.message = null;\n    if(!this.form.valid){\n      window.scroll({\n        top: 0,\n        behavior: 'smooth'\n      });\n      // Show the validation message\n      this.message = {\n        appearance: 'outline',\n        content   : \"Fill the Required Fields\",\n        shake     : true,\n        showIcon  : true,\n        type      : 'error'\n      };\n      //Mark for check\n      this._changeDetectorRef.markForCheck();\n    } else {\n      this.isDataLoaded = false;\n      let params = {\n        expectedVisitor : {\n          ...this.visitor,\n          \"apartmentUnitId\": this.visitor.apartmentUnitId,\n          \"apartmentId\" : this.sessionService.apartmentId,\n          \"expectedVisitorPhone\": this.visitor.expectedVisitorPhone.number,\n          \"expectedVisitorInTime\": this.visitor.expectedVisitorInTime ? moment(this.visitor.expectedVisitorInTime).format('HH:mm') : '',\n          \"expectedVisitorOutTime\": this.visitor.expectedVisitorOutTime ? moment(this.visitor.expectedVisitorInTime).format('HH:mm') : '',\n          \"isActive\": true,\n          \"insertedBy\": this.sessionService.userId,\n          \"insertedOn\": _moment().toISOString(),\n          \"updatedBy\": null,\n          \"updatedOn\": null,\n          \"enteredBy\": parseInt(this.sessionService.userId),\n          \"meetingPersonId\": 1,\n          \"visitorsOrg\": \"string\",\n          \"entryGateId\": null,\n          \"exitGateId\": null,\n          \"tomeetStaffId\": this.visitor.tomeetStaffId,\n          \"phonecountrycode\":  this.visitor.expectedVisitorPhone.countryCode,\n          \"isDailyvendor\":  this.urlType == 'vendor-pass-create' ? true : false,\n          \"isFrequentvisitor\": this.urlType == 'frequent-visitor-create' ? true : false,\n        }\n      }\n      this.visitorService.addExpectedVisitor(params).subscribe((res:any) => {\n        this.isDataLoaded = true;\n        if(res.message) {\n          let id,type;\n          id = res.message.split('#');\n          if(this.urlType == 'vendor-pass-create')\n            type = 'vendor';\n          else if(this.urlType == 'frequent-visitor-create')\n            type = 'frequent';\n          this.router.navigate(['confirm-expected-visitor', id[0], type],{relativeTo: this.activateRouter.parent});\n        } else {\n          this.sharedService.openSnackBar(res.errorMessage,'error');\n        }\n      },(error)=>{\n        this.sharedService.openSnackBar('Server Error','error');\n      })\n    }\n  }\n\n  ngOnInit(): void {\n    this.resetField();\n    this.getTowers().then((res:any)=>{\n      if(res.length > 0) {\n        this.towerList = res;\n      }\n    })\n\n    //set apartmentBlockUnitId and VisitorTypeId in User Mode\n     if(!this.isAdmin) {\n      this.visitor.apartmentUnitId = this.sessionService.apartmentBlockUnitID;\n      this.visitor.visitTypeId = 50 // unitVisitor Type\n    }\n\n    //visit type\n    let visitParams = {\n      ApartmentId: this.sessionService.apartmentId,\n      LookupTypeId: 15\n    }\n    this.lookupService.getLookupValueByLookupTypeId(visitParams).subscribe((res:any) => {\n      this.visitTypeList = res;\n    });\n\n    //Visit Category\n    let visitCategoryParams = {\n      ApartmentId: this.sessionService.apartmentId,\n      LookupTypeId: this.urlType == 'frequent-visitor-create' ? 202 : 100\n    }\n    this.lookupService.getLookupValueByLookupTypeId(visitCategoryParams).subscribe((res:any) => {\n      this.visitCategoryList = res\n    });\n\n    //Staff\n    let staffParms = {\n      apartmentId: this.sessionService.apartmentId,\n      RoleTypeId: this.sessionService.roleTypeId\n    }\n    this.staffService.getAllStaffs(staffParms).subscribe((res:any) => {\n      this.staffsList = res;;\n    });\n  }\n\n}\n","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #27303f;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #fd3223;\\n  margin: 0;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-crescent .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-crescent .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #404040;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #fd3223;\\n  margin: 0;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n  color: #748694;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-light .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-light .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #fd3223;\\n  margin: 0;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-orange .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-orange .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #fd3223;\\n  margin: 0;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-maroon .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-maroon .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #212121;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #fd3223;\\n  margin: 0;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-blue .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-blue .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #475569;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #ffffff;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #fd3223;\\n  margin: 0;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n  color: #cfd8e3;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-dark .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-dark .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #2f2f2f;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #fd3223;\\n  margin: 0;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n  color: #54575d;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-public .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-public .currently-checked-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","import { Component, OnInit, Injector, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { SessionService } from 'src/app/core/session/session.service';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { Subscription } from 'rxjs';\nimport { ConfirmDialogModel, CommonConfirmModalComponent } from 'src/app/shared/components/common-confirm-modal/common-confirm-modal.component';\n\n@Component({\n  selector: 'app-currently-checkedin-list',\n  templateUrl: './currently-checkedin-list.component.html',\n  styleUrls: ['./currently-checkedin-list.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class CurrentlyCheckedinListComponent implements OnInit {\n  visitorList:any = [];\n  searchData:string = '';\n  isVisitorDataLoaded:boolean;\n  modalService:any;\n\n  ItemStartIndex: any = 0;\n  ItemEndIndex: any;\n  totalItems: any = 0;\n  itemLimit: any = 10;\n\n  timeZone:any;\n\n  constructor(\n    private router: Router,\n    private injector: Injector,\n    private visitorService:VisitorService,\n    private sessionService:SessionService,\n    public dialog: MatDialog,\n    private sharedService: SharedService,\n    private activeRouter: ActivatedRoute,\n  ) { \n    this.modalService = this.injector.get(ModalService);\n  }\n\n  getDateTime(date) {\n    return moment(date).format(this.timeZone.time)\n  }\n\n  getIndexParams(event){\n    this.ItemStartIndex = event.ItemStartIndex;\n    this.ItemEndIndex = event.ItemEndIndex;\n    this.itemLimit = event.itemLimit;\n  }\n\n  editVisitor(id){\n    this.router.navigate([`edit/${id}`],{relativeTo:this.activeRouter.parent});\n  }\n\n  checkOut(id) {\n    const message = `Are you sure, you want to Check Out?`;\n    const dialogData = new ConfirmDialogModel(\"Confirm Action\", message);\n    const dialogRef = this.dialog.open(CommonConfirmModalComponent, {\n      panelClass: 'material-dialog-medium',\n      disableClose: true,\n      data: dialogData\n    });\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if (dialogResult) {\n        this.router.navigate([`checkout/${id}`],{relativeTo:this.activeRouter.parent});\n      }\n    });\n  }\n\n  getVisitorList() {\n    this.isVisitorDataLoaded = false;\n    let apartmentParams = {\n      apartmentId: this.sessionService.apartmentId,\n    }\n    this.visitorService.getYetToCheckoutVisitorsByApartmentId(apartmentParams).subscribe((res:any) => {\n      if(res.length > 0) {\n        this.visitorList = res.reverse();\n        this.totalItems = this.visitorList.length;\n        if (this.totalItems > this.itemLimit) {\n          this.ItemEndIndex = this.itemLimit;\n        }\n        else {\n          this.ItemEndIndex = this.totalItems;\n        }\n        this.isVisitorDataLoaded = true;\n      }\n      else {\n        this.isVisitorDataLoaded = true;\n      }\n    },(error)=>{\n      this.isVisitorDataLoaded = true;\n      this.sharedService.openSnackBar('Server Error','error');\n    })\n  }\n\n  ngOnInit() {\n    this.sharedService.timezonecast.subscribe( timeZone => this.timeZone = timeZone );\n    this.getVisitorList();\n  }\n}\n","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #27303f;\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-crescent .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #404040;\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #748694;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-light .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-orange .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-maroon .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #212121;\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-blue .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #475569;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #ffffff;\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #cfd8e3;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-dark .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #2f2f2f;\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  cursor: pointer;\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .actions mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #54575d;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-public .expected-user-visitor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","import { Component, OnInit, Injector, ViewEncapsulation } from '@angular/core';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { Subscription } from 'rxjs';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\n\n@Component({\n  selector: 'app-exp-user-visitor-list',\n  templateUrl: './exp-user-visitor-list.component.html',\n  styleUrls: ['./exp-user-visitor-list.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class ExpUserVisitorListComponent implements OnInit {\n  \n  visitorList:any = [];\n  visitorSearch:string = '';\n  isVisitorDataLoaded:boolean;\n  modalService:any;\n  apiSubscribe:Subscription;\n\n  ItemStartIndex: any = 0;\n  ItemEndIndex: any;\n  totalItems: any;\n  itemLimit: any = 10;\n\n  timeZone:any;\n\n  constructor(\n    private router: Router,\n    private injector: Injector,\n    private visitorService:VisitorService,\n    private sessionService:SessionService,\n    public dialog: MatDialog,\n    private sharedService: SharedService,\n    private activeRouter: ActivatedRoute,\n  ) { \n    this.modalService = this.injector.get(ModalService);\n  }\n\n  navigateToCreate(){\n    this.router.navigate(['create-expected-visitor'], { relativeTo: this.activeRouter.parent });\n  }\n\n  viewPass(id) {\n    this.router.navigate(['confirm-expected-visitor', id, 'expected'],{relativeTo: this.activeRouter.parent});\n  }\n\n  getDate(date) {\n    return moment(date).format(this.timeZone.date)\n  }\n\n  getDateTime(date) {\n    return moment(date).format(this.timeZone.time)\n  }\n\n  getIndexParams(event){\n    this.ItemStartIndex = event.ItemStartIndex;\n    this.ItemEndIndex = event.ItemEndIndex;\n    this.itemLimit = event.itemLimit;\n  }\n\n  editVisitor(expectedVisitorId){\n    this.router.navigate([`expected-visitor/edit/${expectedVisitorId}`], { relativeTo: this.activeRouter.parent });\n  }\n\n  deleteVisitor(id, index){\n    this.modalService.showConfirmModal({id:id,index:index});\n  }\n\n\n  getVisitorList() {\n    \n    this.isVisitorDataLoaded = false;\n    \n    let param = {\n      apartmentUnitId: this.sessionService.apartmentBlockUnitID\n    }\n\n    this.visitorService.getExpectedVisitorsByApartmentUnitId(param).subscribe((res:any) => {\n      \n      if(res.length > 0) {\n        \n        this.visitorList = res;\n        this.totalItems = this.visitorList.length;\n\n        if (this.totalItems > this.itemLimit) {\n          this.ItemEndIndex = this.itemLimit;\n        }\n        else {\n          this.ItemEndIndex = this.totalItems;\n        }\n\n        this.isVisitorDataLoaded = true;\n      }\n      else {\n        this.isVisitorDataLoaded = true;\n      }\n    },(error)=>{\n      this.isVisitorDataLoaded = true;\n    })\n  }\n\n  ngOnInit() {\n\n    this.sharedService.timezonecast.subscribe( timeZone => this.timeZone = timeZone )\n\n    this.getVisitorList();\n\n    \n    //delete expected visitor\n    this.apiSubscribe = this.sharedService.unitlistdeleteindexcast.subscribe( item => {\n\t\t\tif(item != null && item.id ) {\n        let params = {\n          expectedVisitorId: item.id,\n          deleteBy: this.sessionService.userId\n        }\n        this.visitorService.deleteExpectedVisitorById(params).subscribe((res: any) => {\n          if(res.message) {\n            this.sharedService.setUnitListDeleteIndex(null);\n            \n            this.visitorList = this.visitorList.filter( visitor => {\n              return visitor.expectedVisitorId != item.id\n            })\n\n            this.totalItems = this.visitorList.length;\n\n            if (this.totalItems > this.itemLimit) {\n              this.ItemEndIndex = this.itemLimit;\n            }\n            else {\n              this.ItemEndIndex = this.totalItems;\n            }\n\n            this.sharedService.openSnackBar(res.message,'success');\n          } else {\n            this.sharedService.openSnackBar(res.errorMessage,'error');\n          }\n        }, error => {\n          this.sharedService.openSnackBar('Server Error','error');\n        });\n\t\t\t}\n\t\t});\n  }\n\n  ngOnDestroy(){\n\t\tthis.apiSubscribe.unsubscribe();\n  }\n}\n\n","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n.exp-visitor-confirm-wrapper.content-layout {\\n  padding: 32px;\\n  align-items: center;\\n  overflow: hidden;\\n}\\n.exp-visitor-confirm-wrapper.content-layout .main {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  width: 100%;\\n  max-width: 1200px;\\n  padding: 0 !important;\\n}\\n.exp-visitor-confirm-wrapper.content-layout .background {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n}\\n.exp-visitor-confirm-wrapper.content-layout .background path {\\n  opacity: 0.1;\\n}\\n.exp-visitor-confirm-wrapper .bg-card {\\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;\\n  -moz-box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;\\n  -webkit-box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;\\n  min-width: 800px;\\n  z-index: 1000;\\n}\\n@media (max-width: 991px) {\\n  .exp-visitor-confirm-wrapper .bg-card {\\n    width: 100%;\\n    min-width: auto;\\n  }\\n}\\n.exp-visitor-confirm-wrapper .divider {\\n  width: 32px;\\n  height: 4px;\\n  margin: 40px 0;\\n  border-radius: 2px !important;\\n}\\n.exp-visitor-confirm-wrapper .visitor-item .media {\\n  width: 50%;\\n}\\n@media (max-width: 767px) {\\n  .exp-visitor-confirm-wrapper .visitor-item .media {\\n    width: 100%;\\n  }\\n}\\n.exp-visitor-confirm-wrapper .visitor-item .barcode {\\n  margin: -18px 0 0 0;\\n  display: flex;\\n  justify-content: center;\\n  width: 50%;\\n  align-items: center;\\n  flex-direction: column;\\n}\\n@media (max-width: 767px) {\\n  .exp-visitor-confirm-wrapper .visitor-item .barcode {\\n    margin: 20px 0 -10px 0;\\n    width: 100%;\\n  }\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .background path {\\n  fill: #a4cafe;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .divider {\\n  background-color: #5850ec;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .icon {\\n  width: 74px;\\n  height: 74px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon {\\n  width: 34px;\\n  height: 34px;\\n  min-width: 34px;\\n  min-height: 34px;\\n  font-size: 34px;\\n  line-height: 34px;\\n  color: #27303f;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon svg {\\n  width: 34px;\\n  height: 34px;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .type {\\n  color: #06c987;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .visitor-extras {\\n  margin-top: 28px;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.6rem;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 20px;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-crescent .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 16px;\\n  }\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .actions {\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  display: flex;\\n  justify-content: center;\\n  padding: 30px 12px 4px 12px;\\n  z-index: 1000;\\n}\\n.condo-theme-crescent .exp-visitor-confirm-wrapper .actions a:first-child {\\n  margin: 0 18px 0 0;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-crescent .exp-visitor-confirm-wrapper .actions a {\\n    width: 100%;\\n  }\\n  .condo-theme-crescent .exp-visitor-confirm-wrapper .actions a:first-child {\\n    margin: 0 0 14px 0;\\n  }\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .background path {\\n  fill: #a4cafe;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .divider {\\n  background-color: #00BCD4;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .icon {\\n  width: 74px;\\n  height: 74px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon {\\n  width: 34px;\\n  height: 34px;\\n  min-width: 34px;\\n  min-height: 34px;\\n  font-size: 34px;\\n  line-height: 34px;\\n  color: #404040;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon svg {\\n  width: 34px;\\n  height: 34px;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .type {\\n  color: #06c987;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .visitor-extras {\\n  margin-top: 28px;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n  color: #748694;\\n  font-size: 1.6rem;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 20px;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-light .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 16px;\\n  }\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .actions {\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  display: flex;\\n  justify-content: center;\\n  padding: 30px 12px 4px 12px;\\n  z-index: 1000;\\n}\\n.condo-theme-light .exp-visitor-confirm-wrapper .actions a:first-child {\\n  margin: 0 18px 0 0;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-light .exp-visitor-confirm-wrapper .actions a {\\n    width: 100%;\\n  }\\n  .condo-theme-light .exp-visitor-confirm-wrapper .actions a:first-child {\\n    margin: 0 0 14px 0;\\n  }\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .background path {\\n  fill: #a4cafe;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .divider {\\n  background-color: #d44c25;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .icon {\\n  width: 74px;\\n  height: 74px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon {\\n  width: 34px;\\n  height: 34px;\\n  min-width: 34px;\\n  min-height: 34px;\\n  font-size: 34px;\\n  line-height: 34px;\\n  color: #372558;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon svg {\\n  width: 34px;\\n  height: 34px;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .type {\\n  color: #06c987;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .visitor-extras {\\n  margin-top: 28px;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.6rem;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 20px;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-orange .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 16px;\\n  }\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .actions {\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  display: flex;\\n  justify-content: center;\\n  padding: 30px 12px 4px 12px;\\n  z-index: 1000;\\n}\\n.condo-theme-orange .exp-visitor-confirm-wrapper .actions a:first-child {\\n  margin: 0 18px 0 0;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-orange .exp-visitor-confirm-wrapper .actions a {\\n    width: 100%;\\n  }\\n  .condo-theme-orange .exp-visitor-confirm-wrapper .actions a:first-child {\\n    margin: 0 0 14px 0;\\n  }\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .background path {\\n  fill: #a4cafe;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .divider {\\n  background-color: #8803a7;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .icon {\\n  width: 74px;\\n  height: 74px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon {\\n  width: 34px;\\n  height: 34px;\\n  min-width: 34px;\\n  min-height: 34px;\\n  font-size: 34px;\\n  line-height: 34px;\\n  color: #372558;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon svg {\\n  width: 34px;\\n  height: 34px;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .type {\\n  color: #06c987;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .visitor-extras {\\n  margin-top: 28px;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.6rem;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 20px;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-maroon .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 16px;\\n  }\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .actions {\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  display: flex;\\n  justify-content: center;\\n  padding: 30px 12px 4px 12px;\\n  z-index: 1000;\\n}\\n.condo-theme-maroon .exp-visitor-confirm-wrapper .actions a:first-child {\\n  margin: 0 18px 0 0;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-maroon .exp-visitor-confirm-wrapper .actions a {\\n    width: 100%;\\n  }\\n  .condo-theme-maroon .exp-visitor-confirm-wrapper .actions a:first-child {\\n    margin: 0 0 14px 0;\\n  }\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .background path {\\n  fill: #a4cafe;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .divider {\\n  background-color: #38A2E9;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .icon {\\n  width: 74px;\\n  height: 74px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon {\\n  width: 34px;\\n  height: 34px;\\n  min-width: 34px;\\n  min-height: 34px;\\n  font-size: 34px;\\n  line-height: 34px;\\n  color: #212121;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon svg {\\n  width: 34px;\\n  height: 34px;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .type {\\n  color: #06c987;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .visitor-extras {\\n  margin-top: 28px;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.6rem;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 20px;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-blue .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 16px;\\n  }\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .actions {\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  display: flex;\\n  justify-content: center;\\n  padding: 30px 12px 4px 12px;\\n  z-index: 1000;\\n}\\n.condo-theme-blue .exp-visitor-confirm-wrapper .actions a:first-child {\\n  margin: 0 18px 0 0;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-blue .exp-visitor-confirm-wrapper .actions a {\\n    width: 100%;\\n  }\\n  .condo-theme-blue .exp-visitor-confirm-wrapper .actions a:first-child {\\n    margin: 0 0 14px 0;\\n  }\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .background path {\\n  fill: #27303f;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .divider {\\n  background-color: #0694a2;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .icon {\\n  width: 74px;\\n  height: 74px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #475569;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon {\\n  width: 34px;\\n  height: 34px;\\n  min-width: 34px;\\n  min-height: 34px;\\n  font-size: 34px;\\n  line-height: 34px;\\n  color: #ffffff;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon svg {\\n  width: 34px;\\n  height: 34px;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .type {\\n  color: #06c987;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .visitor-extras {\\n  margin-top: 28px;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n  color: #cfd8e3;\\n  font-size: 1.6rem;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 20px;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-dark .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 16px;\\n  }\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .actions {\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  display: flex;\\n  justify-content: center;\\n  padding: 30px 12px 4px 12px;\\n  z-index: 1000;\\n}\\n.condo-theme-dark .exp-visitor-confirm-wrapper .actions a:first-child {\\n  margin: 0 18px 0 0;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-dark .exp-visitor-confirm-wrapper .actions a {\\n    width: 100%;\\n  }\\n  .condo-theme-dark .exp-visitor-confirm-wrapper .actions a:first-child {\\n    margin: 0 0 14px 0;\\n  }\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .background path {\\n  fill: #a4cafe;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .divider {\\n  background-color: #2296ef;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .icon {\\n  width: 74px;\\n  height: 74px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon {\\n  width: 34px;\\n  height: 34px;\\n  min-width: 34px;\\n  min-height: 34px;\\n  font-size: 34px;\\n  line-height: 34px;\\n  color: #2f2f2f;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .icon mat-icon svg {\\n  width: 34px;\\n  height: 34px;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .type {\\n  color: #06c987;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .visitor-extras {\\n  margin-top: 28px;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n  color: #54575d;\\n  font-size: 1.6rem;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 20px;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-public .exp-visitor-confirm-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 16px;\\n  }\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .actions {\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  display: flex;\\n  justify-content: center;\\n  padding: 30px 12px 4px 12px;\\n  z-index: 1000;\\n}\\n.condo-theme-public .exp-visitor-confirm-wrapper .actions a:first-child {\\n  margin: 0 18px 0 0;\\n}\\n@media (max-width: 991px) {\\n  .condo-theme-public .exp-visitor-confirm-wrapper .actions a {\\n    width: 100%;\\n  }\\n  .condo-theme-public .exp-visitor-confirm-wrapper .actions a:first-child {\\n    margin: 0 0 14px 0;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AYW5ndWxhci9tYXRlcmlhbC9fdGhlbWluZy5zY3NzIiwic3JjL2FwcC9tb2R1bGVzL2NvbW1vbi92aXNpdG9yL2NvbXBvbmVudHMvZXhwLXZpc2l0b3ItY29uZmlybS9leHAtdmlzaXRvci1jb25maXJtLmNvbXBvbmVudC5zY3NzIiwic3JjL0Bjb25kby9zdHlsZXMvdXRpbGl0aWVzL19taXhpbnMuc2NzcyIsInNyYy9AY29uZG8vc3R5bGVzL3V0aWxpdGllcy9fdHlwb2dyYXBoeS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJ0REEsbUNBQUE7QUFnSkEseURBQUE7QUE2WEEseURBQUE7QUE0ekRBLDJDQUFBO0FBd0NBLHFCQUFBO0FDeGtJSTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGdCQUFBO0FBRVI7QUFBUTtFQUNJLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsbUJBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxxQkFBQTtBQUVaO0FBQ1E7RUFDSSxrQkFBQTtFQUNBLE1BQUE7RUFDQSxPQUFBO0VBQ0EsV0FBQTtBQUNaO0FBRVk7RUFDSSxZQUFBO0FBQWhCO0FBTUk7RUNYRiw0RkRZTTtFQ1hOLGlHRFdNO0VDVk4sb0dEVU07RUFDQSxnQkFBQTtFQUNBLGFBQUE7QUFGUjtBQzZHTTtFRDlHRjtJQUtRLFdBQUE7SUFDQSxlQUFBO0VBQVY7QUFDRjtBQUdJO0VBQ0ksV0FBQTtFQUNBLFdBQUE7RUFDQSxjQUFBO0VDeENQLDZCQUFBO0FEMENEO0FBR1E7RUFDSSxVQUFBO0FBRFo7QUM0Rk07RUQ1RkU7SUFHUSxXQUFBO0VBQ2Q7QUFDRjtBQUNRO0VBQ0ksbUJBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxVQUFBO0VBQ0EsbUJBQUE7RUFDQSxzQkFBQTtBQUNaO0FDK0VNO0VEdEZFO0lBUVEsc0JBQUE7SUFDQSxXQUFBO0VBR2Q7QUFDRjtBQWNZO0VBSVEsYUFBQTtBQWRwQjtBQXVC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aXRvci1jb25maXJtL2V4cC12aXNpdG9yLWNvbmZpcm0uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGZvciB3aGljaCBhbGwgaW1wb3J0cyBhcmUgcmVzb2x2ZWQgYW5kIGJ1bmRsZWQuIFRoaXMgaXMgdGhlIGVudHJ5LXBvaW50IGZvclxuLy8gdGhlIGBAYW5ndWxhci9tYXRlcmlhbGAgdGhlbWluZyBTYXNzIGJ1bmRsZS4gU2VlIGAvL3NyYy9tYXRlcmlhbDp0aGVtaW5nX2J1bmRsZWAuXG5cbi8vIEltcG9ydCBhbGwgdGhlIHRoZW1pbmcgZnVuY3Rpb25hbGl0eS5cbi8vIFdlIHdhbnQgb3ZlcmxheXMgdG8gYWx3YXlzIGFwcGVhciBvdmVyIHVzZXIgY29udGVudCwgc28gc2V0IGEgYmFzZWxpbmVcbi8vIHZlcnkgaGlnaCB6LWluZGV4IGZvciB0aGUgb3ZlcmxheSBjb250YWluZXIsIHdoaWNoIGlzIHdoZXJlIHdlIGNyZWF0ZSB0aGUgbmV3XG4vLyBzdGFja2luZyBjb250ZXh0IGZvciBhbGwgb3ZlcmxheXMuXG4kY2RrLXotaW5kZXgtb3ZlcmxheS1jb250YWluZXI6IDEwMDAgIWRlZmF1bHQ7XG4kY2RrLXotaW5kZXgtb3ZlcmxheTogMTAwMCAhZGVmYXVsdDtcbiRjZGstei1pbmRleC1vdmVybGF5LWJhY2tkcm9wOiAxMDAwICFkZWZhdWx0O1xuXG4vLyBCYWNrZ3JvdW5kIGNvbG9yIGZvciBhbGwgb2YgdGhlIGJhY2tkcm9wc1xuJGNkay1vdmVybGF5LWRhcmstYmFja2Ryb3AtYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjMyKSAhZGVmYXVsdDtcblxuLy8gRGVmYXVsdCBiYWNrZHJvcCBhbmltYXRpb24gaXMgYmFzZWQgb24gdGhlIE1hdGVyaWFsIERlc2lnbiBzd2lmdC1lYXNlLW91dC5cbiRiYWNrZHJvcC1hbmltYXRpb24tZHVyYXRpb246IDQwMG1zICFkZWZhdWx0O1xuJGJhY2tkcm9wLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuMjUsIDEpICFkZWZhdWx0O1xuXG5cbkBtaXhpbiBjZGstb3ZlcmxheSgpIHtcbiAgLmNkay1vdmVybGF5LWNvbnRhaW5lciwgLmNkay1nbG9iYWwtb3ZlcmxheS13cmFwcGVyIHtcbiAgICAvLyBEaXNhYmxlIGV2ZW50cyBmcm9tIGJlaW5nIGNhcHR1cmVkIG9uIHRoZSBvdmVybGF5IGNvbnRhaW5lci5cbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcblxuICAgIC8vIFRoZSBjb250YWluZXIgc2hvdWxkIGJlIHRoZSBzaXplIG9mIHRoZSB2aWV3cG9ydC5cbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAvLyBUaGUgb3ZlcmxheS1jb250YWluZXIgaXMgYW4gaW52aXNpYmxlIGVsZW1lbnQgd2hpY2ggY29udGFpbnMgYWxsIGluZGl2aWR1YWwgb3ZlcmxheXMuXG4gIC5jZGstb3ZlcmxheS1jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB6LWluZGV4OiAkY2RrLXotaW5kZXgtb3ZlcmxheS1jb250YWluZXI7XG5cbiAgICAmOmVtcHR5IHtcbiAgICAgIC8vIEhpZGUgdGhlIGVsZW1lbnQgd2hlbiBpdCBkb2Vzbid0IGhhdmUgYW55IGNoaWxkIG5vZGVzLiBUaGlzIGRvZXNuJ3RcbiAgICAgIC8vIGluY2x1ZGUgb3ZlcmxheXMgdGhhdCBoYXZlIGJlZW4gZGV0YWNoZWQsIHJhdGhlciB0aGFuIGRpc3Bvc2VkLlxuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cblxuICAvLyBXZSB1c2UgYW4gZXh0cmEgd3JhcHBlciBlbGVtZW50IGluIG9yZGVyIHRvIHVzZSBtYWtlIHRoZSBvdmVybGF5IGl0c2VsZiBhIGZsZXggaXRlbS5cbiAgLy8gVGhpcyBtYWtlcyBjZW50ZXJpbmcgdGhlIG92ZXJsYXkgZWFzeSB3aXRob3V0IHJ1bm5pbmcgaW50byB0aGUgc3VicGl4ZWwgcmVuZGVyaW5nXG4gIC8vIHByb2JsZW1zIHRpZWQgdG8gdXNpbmcgYHRyYW5zZm9ybWAgYW5kIHdpdGhvdXQgaW50ZXJmZXJpbmcgd2l0aCB0aGUgb3RoZXIgcG9zaXRpb25cbiAgLy8gc3RyYXRlZ2llcy5cbiAgLmNkay1nbG9iYWwtb3ZlcmxheS13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB6LWluZGV4OiAkY2RrLXotaW5kZXgtb3ZlcmxheTtcbiAgfVxuXG4gIC8vIEEgc2luZ2xlIG92ZXJsYXkgcGFuZS5cbiAgLmNkay1vdmVybGF5LXBhbmUge1xuICAgIC8vIE5vdGU6IGl0J3MgaW1wb3J0YW50IGZvciB0aGlzIG9uZSB0byBzdGFydCBvZmYgYGFic29sdXRlYCxcbiAgICAvLyBpbiBvcmRlciBmb3IgdXMgdG8gYmUgYWJsZSB0byBtZWFzdXJlIGl0IGNvcnJlY3RseS5cbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICB6LWluZGV4OiAkY2RrLXotaW5kZXgtb3ZlcmxheTtcblxuICAgIC8vIEZvciBjb25uZWN0ZWQtcG9zaXRpb24gb3ZlcmxheXMsIHdlIHNldCBgZGlzcGxheTogZmxleGAgaW5cbiAgICAvLyBvcmRlciB0byBmb3JjZSBgbWF4LXdpZHRoYCBhbmQgYG1heC1oZWlnaHRgIHRvIHRha2UgZWZmZWN0LlxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gIH1cblxuICAuY2RrLW92ZXJsYXktYmFja2Ryb3Age1xuICAgIC8vIFRPRE8oamVsYm91cm4pOiByZXVzZSBzaWRlbmF2IGZ1bGxzY3JlZW4gbWl4aW4uXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogMDtcbiAgICByaWdodDogMDtcblxuICAgIHotaW5kZXg6ICRjZGstei1pbmRleC1vdmVybGF5LWJhY2tkcm9wO1xuICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAkYmFja2Ryb3AtYW5pbWF0aW9uLWR1cmF0aW9uICRiYWNrZHJvcC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uO1xuICAgIG9wYWNpdHk6IDA7XG5cbiAgICAmLmNkay1vdmVybGF5LWJhY2tkcm9wLXNob3dpbmcge1xuICAgICAgb3BhY2l0eTogMTtcblxuICAgICAgLy8gSW4gaGlnaCBjb250cmFzdCBtb2RlIHRoZSByZ2JhIGJhY2tncm91bmQgd2lsbCBiZWNvbWUgc29saWQgc28gd2UgbmVlZCB0byBmYWxsIGJhY2tcbiAgICAgIC8vIHRvIG1ha2luZyBpdCBvcGFxdWUgdXNpbmcgYG9wYWNpdHlgLiBOb3RlIHRoYXQgd2UgY2FuJ3QgdXNlIHRoZSBgY2RrLWhpZ2gtY29udHJhc3RgXG4gICAgICAvLyBtaXhpbiwgYmVjYXVzZSB3ZSBjYW4ndCBub3JtYWxpemUgdGhlIGltcG9ydCBwYXRoIHRvIHRoZSBfYTExeS5zY3NzIGJvdGggZm9yIHRoZVxuICAgICAgLy8gc291cmNlIGFuZCB3aGVuIHRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZC4gU2VlICMxMDkwOC5cbiAgICAgIEBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKSB7XG4gICAgICAgIG9wYWNpdHk6IDAuNjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAuY2RrLW92ZXJsYXktZGFyay1iYWNrZHJvcCB7XG4gICAgYmFja2dyb3VuZDogJGNkay1vdmVybGF5LWRhcmstYmFja2Ryb3AtYmFja2dyb3VuZDtcbiAgfVxuXG4gIC5jZGstb3ZlcmxheS10cmFuc3BhcmVudC1iYWNrZHJvcCB7XG4gICAgLy8gTm90ZTogYXMgb2YgRmlyZWZveCA1NywgaGF2aW5nIHRoZSBiYWNrZHJvcCBiZSBgYmFja2dyb3VuZDogbm9uZWAgd2lsbCBwcmV2ZW50IGl0IGZyb21cbiAgICAvLyBjYXB0dXJpbmcgdGhlIHVzZXIncyBtb3VzZSBzY3JvbGwgZXZlbnRzLiBTaW5jZSB3ZSBhbHNvIGNhbid0IHVzZSBzb21ldGhpbmcgbGlrZVxuICAgIC8vIGByZ2JhKDAsIDAsIDAsIDApYCwgd2Ugd29yayBhcm91bmQgdGhlIGluY29uc2lzdGVuY3kgYnkgbm90IHNldHRpbmcgdGhlIGJhY2tncm91bmQgYXRcbiAgICAvLyBhbGwgYW5kIHVzaW5nIGBvcGFjaXR5YCB0byBtYWtlIHRoZSBlbGVtZW50IHRyYW5zcGFyZW50LlxuICAgICYsICYuY2RrLW92ZXJsYXktYmFja2Ryb3Atc2hvd2luZyB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cbiAgfVxuXG4gIC8vIE92ZXJsYXkgcGFyZW50IGVsZW1lbnQgdXNlZCB3aXRoIHRoZSBjb25uZWN0ZWQgcG9zaXRpb24gc3RyYXRlZ3kuIFVzZWQgdG8gY29uc3RyYWluIHRoZVxuICAvLyBvdmVybGF5IGVsZW1lbnQncyBzaXplIHRvIGZpdCB3aXRoaW4gdGhlIHZpZXdwb3J0LlxuICAuY2RrLW92ZXJsYXktY29ubmVjdGVkLXBvc2l0aW9uLWJvdW5kaW5nLWJveCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHotaW5kZXg6ICRjZGstei1pbmRleC1vdmVybGF5O1xuXG4gICAgLy8gV2UgdXNlIGBkaXNwbGF5OiBmbGV4YCBvbiB0aGlzIGVsZW1lbnQgZXhjbHVzaXZlbHkgZm9yIGNlbnRlcmluZyBjb25uZWN0ZWQgb3ZlcmxheXMuXG4gICAgLy8gV2hlbiAqbm90KiBjZW50ZXJpbmcsIGEgdG9wL2xlZnQvYm90dG9tL3JpZ2h0IHdpbGwgYmUgc2V0IHdoaWNoIG92ZXJyaWRlcyB0aGUgbm9ybWFsXG4gICAgLy8gZmxleCBsYXlvdXQuXG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIC8vIFdlIHVzZSB0aGUgYGNvbHVtbmAgZGlyZWN0aW9uIGhlcmUgdG8gYXZvaWQgc29tZSBmbGV4Ym94IGlzc3VlcyBpbiBFZGdlXG4gICAgLy8gd2hlbiB1c2luZyB0aGUgXCJncm93IGFmdGVyIG9wZW5cIiBvcHRpb25zLlxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cbiAgICAvLyBBZGQgc29tZSBkaW1lbnNpb25zIHNvIHRoZSBlbGVtZW50IGhhcyBhbiBgaW5uZXJUZXh0YCB3aGljaCBzb21lIHBlb3BsZSBkZXBlbmQgb24gaW4gdGVzdHMuXG4gICAgbWluLXdpZHRoOiAxcHg7XG4gICAgbWluLWhlaWdodDogMXB4O1xuICB9XG5cbiAgLy8gVXNlZCB3aGVuIGRpc2FibGluZyBnbG9iYWwgc2Nyb2xsaW5nLlxuICAuY2RrLWdsb2JhbC1zY3JvbGxibG9jayB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuXG4gICAgLy8gTmVjZXNzYXJ5IGZvciB0aGUgY29udGVudCBub3QgdG8gbG9zZSBpdHMgd2lkdGguIE5vdGUgdGhhdCB3ZSdyZSB1c2luZyAxMDAlLCBpbnN0ZWFkIG9mXG4gICAgLy8gMTAwdncsIGJlY2F1c2UgMTAwdncgaW5jbHVkZXMgdGhlIHdpZHRoIHBsdXMgdGhlIHNjcm9sbGJhciwgd2hlcmVhcyAxMDAlIGlzIHRoZSB3aWR0aFxuICAgIC8vIHRoYXQgdGhlIGVsZW1lbnQgaGFkIGJlZm9yZSB3ZSBtYWRlIGl0IGBmaXhlZGAuXG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICAvLyBOb3RlOiB0aGlzIHdpbGwgYWx3YXlzIGFkZCBhIHNjcm9sbGJhciB0byB3aGF0ZXZlciBlbGVtZW50IGl0IGlzIG9uLCB3aGljaCBjYW5cbiAgICAvLyBwb3RlbnRpYWxseSByZXN1bHQgaW4gZG91YmxlIHNjcm9sbGJhcnMuIEl0IHNob3VsZG4ndCBiZSBhbiBpc3N1ZSwgYmVjYXVzZSB3ZSB3b24ndFxuICAgIC8vIGJsb2NrIHNjcm9sbGluZyBvbiBhIHBhZ2UgdGhhdCBkb2Vzbid0IGhhdmUgYSBzY3JvbGxiYXIgaW4gdGhlIGZpcnN0IHBsYWNlLlxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgfVxufVxuXG5AbWl4aW4gY2RrLWExMXkge1xuICAuY2RrLXZpc3VhbGx5LWhpZGRlbiB7XG4gICAgYm9yZGVyOiAwO1xuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgbWFyZ2luOiAtMXB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcGFkZGluZzogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDFweDtcblxuICAgIC8vIEF2b2lkIGJyb3dzZXJzIHJlbmRlcmluZyB0aGUgZm9jdXMgcmluZyBpbiBzb21lIGNhc2VzLlxuICAgIG91dGxpbmU6IDA7XG5cbiAgICAvLyBBdm9pZCBzb21lIGNhc2VzIHdoZXJlIHRoZSBicm93c2VyIHdpbGwgc3RpbGwgcmVuZGVyIHRoZSBuYXRpdmUgY29udHJvbHMgKHNlZSAjOTA0OSkuXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgfVxufVxuXG4vLy8gRW1pdHMgdGhlIG1peGluJ3MgY29udGVudCBuZXN0ZWQgdW5kZXIgYCRzZWxlY3Rvci1jb250ZXh0YCBpZiBgJHNlbGVjdG9yLWNvbnRleHRgXG4vLy8gaXMgbm9uLWVtcHR5LlxuLy8vIEBwYXJhbSBzZWxlY3Rvci1jb250ZXh0IFRoZSBzZWxlY3RvciB1bmRlciB3aGljaCB0byBuZXN0IHRoZSBtaXhpbidzIGNvbnRlbnQuXG5AbWl4aW4gX2Nkay1vcHRpb25hbGx5LW5lc3QtY29udGVudCgkc2VsZWN0b3ItY29udGV4dCkge1xuICBAaWYgKCRzZWxlY3Rvci1jb250ZXh0ID09ICcnKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbiAgQGVsc2Uge1xuICAgICN7JHNlbGVjdG9yLWNvbnRleHR9IHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLy8gQXBwbGllcyBzdHlsZXMgZm9yIHVzZXJzIGluIGhpZ2ggY29udHJhc3QgbW9kZS4gTm90ZSB0aGF0IHRoaXMgb25seSBhcHBsaWVzXG4vLy8gdG8gTWljcm9zb2Z0IGJyb3dzZXJzLiBDaHJvbWUgY2FuIGJlIGluY2x1ZGVkIGJ5IGNoZWNraW5nIGZvciB0aGUgYGh0bWxbaGNdYFxuLy8vIGF0dHJpYnV0ZSwgaG93ZXZlciBDaHJvbWUgaGFuZGxlcyBoaWdoIGNvbnRyYXN0IGRpZmZlcmVudGx5LlxuLy8vXG4vLy8gQHBhcmFtIHRhcmdldCBXaGljaCBraW5kIG9mIGhpZ2ggY29udHJhc3Qgc2V0dGluZyB0byB0YXJnZXQuIERlZmF1bHRzIHRvIGBhY3RpdmVgLCBjYW4gYmVcbi8vLyAgICBgd2hpdGUtb24tYmxhY2tgIG9yIGBibGFjay1vbi13aGl0ZWAuXG4vLy8gQHBhcmFtIGVuY2Fwc3VsYXRpb24gV2hldGhlciB0byBlbWl0IHN0eWxlcyBmb3IgdmlldyBlbmNhcHN1bGF0aW9uLiBWYWx1ZXMgYXJlOlxuLy8vICAgICAqIGBvbmAgLSB3b3JrcyBmb3IgYEVtdWxhdGVkYCwgYE5hdGl2ZWAsIGFuZCBgU2hhZG93RG9tYFxuLy8vICAgICAqIGBvZmZgIC0gd29ya3MgZm9yIGBOb25lYFxuLy8vICAgICAqIGBhbnlgIC0gd29ya3MgZm9yIGFsbCBlbmNhcHN1bGF0aW9uIG1vZGVzIGJ5IGVtaXR0aW5nIHRoZSBDU1MgdHdpY2UgKGRlZmF1bHQpLlxuQG1peGluIGNkay1oaWdoLWNvbnRyYXN0KCR0YXJnZXQ6IGFjdGl2ZSwgJGVuY2Fwc3VsYXRpb246ICdhbnknKSB7XG4gIEBpZiAoJHRhcmdldCAhPSAnYWN0aXZlJyBhbmQgJHRhcmdldCAhPSAnYmxhY2stb24td2hpdGUnIGFuZCAkdGFyZ2V0ICE9ICd3aGl0ZS1vbi1ibGFjaycpIHtcbiAgICBAZXJyb3IgJ1Vua25vd24gY2RrLWhpZ2gtY29udHJhc3QgdmFsdWUgXCIjeyR0YXJnZXR9XCIgcHJvdmlkZWQuICcgK1xuICAgICAgICAgICAnQWxsb3dlZCB2YWx1ZXMgYXJlIFwiYWN0aXZlXCIsIFwiYmxhY2stb24td2hpdGVcIiwgYW5kIFwid2hpdGUtb24tYmxhY2tcIic7XG4gIH1cblxuICBAaWYgKCRlbmNhcHN1bGF0aW9uICE9ICdvbicgYW5kICRlbmNhcHN1bGF0aW9uICE9ICdvZmYnIGFuZCAkZW5jYXBzdWxhdGlvbiAhPSAnYW55Jykge1xuICAgIEBlcnJvciAnVW5rbm93biBjZGstaGlnaC1jb250cmFzdCBlbmNhcHN1bGF0aW9uIFwiI3skZW5jYXBzdWxhdGlvbn1cIiBwcm92aWRlZC4gJyArXG4gICAgICAgICAgICdBbGxvd2VkIHZhbHVlcyBhcmUgXCJvblwiLCBcIm9mZlwiLCBhbmQgXCJhbnlcIic7XG4gIH1cblxuICAvLyBJZiB0aGUgc2VsZWN0b3IgY29udGV4dCBoYXMgbXVsdGlwbGUgcGFydHMsIHN1Y2ggYXMgYC5zZWN0aW9uLCAucmVnaW9uYCwganVzdCBkb2luZ1xuICAvLyBgLmNkay1oaWdoLWNvbnRyYXN0LXh4eCAjeyZ9YCB3aWxsIG9ubHkgYXBwbHkgdGhlIHBhcmVudCBzZWxlY3RvciB0byB0aGUgZmlyc3QgcGFydCBvZiB0aGVcbiAgLy8gY29udGV4dC4gV2UgYWRkcmVzcyB0aGlzIGJ5IG5lc3RpbmcgdGhlIHNlbGVjdG9yIGNvbnRleHQgdW5kZXIgLmNkay1oaWdoLWNvbnRyYXN0LlxuICBAYXQtcm9vdCB7XG4gICAgJHNlbGVjdG9yLWNvbnRleHQ6ICN7Jn07XG5cbiAgICBAaWYgKCRlbmNhcHN1bGF0aW9uICE9ICdvbicpIHtcbiAgICAgIC5jZGstaGlnaC1jb250cmFzdC0jeyR0YXJnZXR9IHtcbiAgICAgICAgQGluY2x1ZGUgX2Nkay1vcHRpb25hbGx5LW5lc3QtY29udGVudCgkc2VsZWN0b3ItY29udGV4dCkge1xuICAgICAgICAgIEBjb250ZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICgkZW5jYXBzdWxhdGlvbiAhPSAnb2ZmJykge1xuICAgICAgLmNkay1oaWdoLWNvbnRyYXN0LSN7JHRhcmdldH0gOmhvc3Qge1xuICAgICAgICBAaW5jbHVkZSBfY2RrLW9wdGlvbmFsbHktbmVzdC1jb250ZW50KCRzZWxlY3Rvci1jb250ZXh0KSB7XG4gICAgICAgICAgQGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQ29yZSBzdHlsZXMgdGhhdCBlbmFibGUgbW9uaXRvcmluZyBhdXRvZmlsbCBzdGF0ZSBvZiB0ZXh0IGZpZWxkcy5cbkBtaXhpbiBjZGstdGV4dC1maWVsZCB7XG4gIC8vIEtleWZyYW1lcyB0aGF0IGFwcGx5IG5vIHN0eWxlcywgYnV0IGFsbG93IHVzIHRvIG1vbml0b3Igd2hlbiBhbiB0ZXh0IGZpZWxkIGJlY29tZXMgYXV0b2ZpbGxlZFxuICAvLyBieSB3YXRjaGluZyBmb3IgdGhlIGFuaW1hdGlvbiBldmVudHMgdGhhdCBhcmUgZmlyZWQgd2hlbiB0aGV5IHN0YXJ0LiBOb3RlOiB0aGUgLyohKi8gY29tbWVudCBpc1xuICAvLyBuZWVkZWQgdG8gcHJldmVudCBMaWJTYXNzIGZyb20gc3RyaXBwaW5nIHRoZSBrZXlmcmFtZXMgb3V0LlxuICAvLyBCYXNlZCBvbjogaHR0cHM6Ly9tZWRpdW0uY29tL0BicnVubi9kZXRlY3RpbmctYXV0b2ZpbGxlZC1maWVsZHMtaW4tamF2YXNjcmlwdC1hZWQ1OThkMjVkYTdcbiAgQGtleWZyYW1lcyBjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1zdGFydCB7LyohKi99XG4gIEBrZXlmcmFtZXMgY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtZW5kIHsvKiEqL31cblxuICAuY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtbW9uaXRvcmVkOi13ZWJraXQtYXV0b2ZpbGwge1xuICAgIC8vIFNpbmNlIENocm9tZSA4MCB3ZSBuZWVkIGEgMW1zIGRlbGF5LCBvciB0aGUgYW5pbWF0aW9uc3RhcnQgZXZlbnQgd29uJ3QgZmlyZS5cbiAgICBhbmltYXRpb246IGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLXN0YXJ0IDBzIDFtcztcbiAgfVxuXG4gIC5jZGstdGV4dC1maWVsZC1hdXRvZmlsbC1tb25pdG9yZWQ6bm90KDotd2Via2l0LWF1dG9maWxsKSB7XG4gICAgLy8gU2luY2UgQ2hyb21lIDgwIHdlIG5lZWQgYSAxbXMgZGVsYXksIG9yIHRoZSBhbmltYXRpb25zdGFydCBldmVudCB3b24ndCBmaXJlLlxuICAgIGFuaW1hdGlvbjogY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtZW5kIDBzIDFtcztcbiAgfVxuXG4gIC8vIFJlbW92ZSB0aGUgcmVzaXplIGhhbmRsZSBvbiBhdXRvc2l6aW5nIHRleHRhcmVhcywgYmVjYXVzZSB3aGF0ZXZlciBoZWlnaHRcbiAgLy8gdGhlIHVzZXIgcmVzaXplZCB0byB3aWxsIGJlIG92ZXJ3cml0dGVuIG9uY2UgdGhleSBzdGFydCB0eXBpbmcgYWdhaW4uXG4gIHRleHRhcmVhLmNkay10ZXh0YXJlYS1hdXRvc2l6ZSB7XG4gICAgcmVzaXplOiBub25lO1xuICB9XG5cbiAgLy8gVGhpcyBjbGFzcyBpcyB0ZW1wb3JhcmlseSBhcHBsaWVkIHRvIHRoZSB0ZXh0YXJlYSB3aGVuIGl0IGlzIGJlaW5nIG1lYXN1cmVkLiBJdCBpcyBpbW1lZGlhdGVseVxuICAvLyByZW1vdmVkIHdoZW4gbWVhc3VyaW5nIGlzIGNvbXBsZXRlLiBXZSB1c2UgYCFpbXBvcnRhbnRgIHJ1bGVzIGhlcmUgdG8gbWFrZSBzdXJlIHVzZXItc3BlY2lmaWVkXG4gIC8vIHJ1bGVzIGRvIG5vdCBpbnRlcmZlcmUgd2l0aCB0aGUgbWVhc3VyZW1lbnQuXG4gIHRleHRhcmVhLmNkay10ZXh0YXJlYS1hdXRvc2l6ZS1tZWFzdXJpbmcge1xuICAgIEBpbmNsdWRlIF9jZGstdGV4dGFyZWEtYXV0b3NpemUtbWVhc3VyaW5nLWJhc2U7XG4gICAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbiAhaW1wb3J0YW50O1xuICB9XG5cbiAgLy8gU2ltaWxhciB0byB0aGUgYGNkay10ZXh0YXJlYS1hdXRvc2l6ZS1tZWFzdXJpbmdgIGNsYXNzLCBidXQgb25seSBhcHBsaWVkIG9uIEZpcmVmb3guIFdlIG5lZWRcbiAgLy8gdG8gdXNlIHRoaXMgY2xhc3MsIGJlY2F1c2UgRmlyZWZveCBoYXMgYSBidWcgd2hlcmUgY2hhbmdpbmcgdGhlIGBvdmVyZmxvd2AgYnJlYWtzIHRoZSB1c2VyJ3NcbiAgLy8gYWJpbGl0eSB0byB1bmRvL3JlZG8gd2hhdCB0aGV5IHdlcmUgdHlwaW5nIChzZWUgIzE2NjI5KS4gVGhpcyBjbGFzcyBpcyBvbmx5IHNjb3BlZCB0byBGaXJlZm94LFxuICAvLyBiZWNhdXNlIHRoZSBtZWFzdXJlbWVudHMgdGhlcmUgZG9uJ3Qgc2VlbSB0byBiZSBhZmZlY3RlZCBieSB0aGUgYGhlaWdodDogMGAsIHdoZXJlYXMgb24gb3RoZXJcbiAgLy8gYnJvd3NlcnMgdGhleSBhcmUsIGUuZy4gQ2hyb21lIGRldGVjdHMgbG9uZ2VyIHRleHQgYW5kIElFIGRvZXMndCByZXNpemUgYmFjayB0byBub3JtYWwuXG4gIC8vIElkZW50aWNhbCBpc3N1ZSByZXBvcnQ6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ0ODc4NFxuICB0ZXh0YXJlYS5jZGstdGV4dGFyZWEtYXV0b3NpemUtbWVhc3VyaW5nLWZpcmVmb3gge1xuICAgIEBpbmNsdWRlIF9jZGstdGV4dGFyZWEtYXV0b3NpemUtbWVhc3VyaW5nLWJhc2U7XG4gICAgaGVpZ2h0OiAwICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuQG1peGluIF9jZGstdGV4dGFyZWEtYXV0b3NpemUtbWVhc3VyaW5nLWJhc2Uge1xuICAvLyBIYXZpbmcgMnB4IHRvcCBhbmQgYm90dG9tIHBhZGRpbmcgc2VlbXMgdG8gZml4IGEgYnVnIHdoZXJlIENocm9tZSBnZXRzIGFuIGluY29ycmVjdFxuICAvLyBtZWFzdXJlbWVudC4gV2UganVzdCBoYXZlIHRvIGFjY291bnQgZm9yIGl0IGxhdGVyIGFuZCBzdWJ0cmFjdCBpdCBvZmYgdGhlIGZpbmFsIHJlc3VsdC5cbiAgcGFkZGluZzogMnB4IDAgIWltcG9ydGFudDtcbiAgYm94LXNpemluZzogY29udGVudC1ib3ggIWltcG9ydGFudDtcbn1cblxuLy8gVXNlZCB0byBnZW5lcmF0ZSBVSURzIGZvciBrZXlmcmFtZXMgdXNlZCB0byBjaGFuZ2UgdGhlIHRleHQgZmllbGQgYXV0b2ZpbGwgc3R5bGVzLlxuJGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yLWZyYW1lLWNvdW50OiAwO1xuXG4vLyBNaXhpbiB1c2VkIHRvIGFwcGx5IGN1c3RvbSBiYWNrZ3JvdW5kIGFuZCBmb3JlZ3JvdW5kIGNvbG9ycyB0byBhbiBhdXRvZmlsbGVkIHRleHQgZmllbGQuXG4vLyBCYXNlZCBvbjogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc4MTU0OS9cbi8vIHJlbW92aW5nLWlucHV0LWJhY2tncm91bmQtY29sb3VyLWZvci1jaHJvbWUtYXV0b2NvbXBsZXRlI2Fuc3dlci0zNzQzMjI2MFxuQG1peGluIGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yKCRiYWNrZ3JvdW5kLCAkZm9yZWdyb3VuZDonJykge1xuICBAa2V5ZnJhbWVzIGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yLSN7JGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yLWZyYW1lLWNvdW50fSB7XG4gICAgdG8ge1xuICAgICAgYmFja2dyb3VuZDogJGJhY2tncm91bmQ7XG4gICAgICBAaWYgJGZvcmVncm91bmQgIT0gJycgeyBjb2xvcjogJGZvcmVncm91bmQ7IH1cbiAgICB9XG4gIH1cblxuICAmOi13ZWJraXQtYXV0b2ZpbGwge1xuICAgIGFuaW1hdGlvbjogY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtY29sb3ItI3skY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtY29sb3ItZnJhbWUtY291bnR9IGJvdGg7XG4gIH1cblxuICAmLmNkay10ZXh0LWZpZWxkLWF1dG9maWxsLW1vbml0b3JlZDotd2Via2l0LWF1dG9maWxsIHtcbiAgICAvLyBTaW5jZSBDaHJvbWUgODAgd2UgbmVlZCBhIDFtcyBkZWxheSBmb3IgY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtc3RhcnQsIG9yIHRoZSBhbmltYXRpb25zdGFydFxuICAgIC8vIGV2ZW50IHdvbid0IGZpcmUuXG4gICAgYW5pbWF0aW9uOiBjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1zdGFydCAwcyAxbXMsXG4gICAgICAgICAgICAgICBjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1jb2xvci0jeyRjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1jb2xvci1mcmFtZS1jb3VudH0gYm90aDtcbiAgfVxuXG4gICRjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1jb2xvci1mcmFtZS1jb3VudDpcbiAgICAgICRjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1jb2xvci1mcmFtZS1jb3VudCArIDEgIWdsb2JhbDtcbn1cblxuXG4vLyBDb3JlIHN0eWxlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGFwcGx5IG1hdGVyaWFsIGRlc2lnbiB0cmVhdG1lbnRzIHRvIGFueSBlbGVtZW50LlxuLy8gTWVkaWEgcXVlcmllc1xuLy8gVE9ETyhqb3NlcGhwZXJyb3R0KTogQ2hhbmdlICRtYXQteHNtYWxsIGFuZCAkbWF0LXNtYWxsIHVzYWdlcyB0byByZWx5IG9uIEJyZWFrcG9pbnRPYnNlcnZlcixcbiRtYXQteHNtYWxsOiAnbWF4LXdpZHRoOiA1OTlweCc7XG4kbWF0LXNtYWxsOiAnbWF4LXdpZHRoOiA5NTlweCc7XG5cbi8vIFRPRE86IFJldmlzaXQgYWxsIHotaW5kaWNlcyBiZWZvcmUgYmV0YVxuLy8gei1pbmRleCBtYXN0ZXIgbGlzdFxuXG4kei1pbmRleC1mYWI6IDIwICFkZWZhdWx0O1xuJHotaW5kZXgtZHJhd2VyOiAxMDAgIWRlZmF1bHQ7XG5cbi8vIEdsb2JhbCBjb25zdGFudHNcbiRwaTogMy4xNDE1OTI2NTtcblxuLy8gUGFkZGluZyBiZXR3ZWVuIGlucHV0IHRvZ2dsZXMgYW5kIHRoZWlyIGxhYmVsc1xuJG1hdC10b2dnbGUtcGFkZGluZzogOHB4ICFkZWZhdWx0O1xuLy8gV2lkdGggYW5kIGhlaWdodCBvZiBpbnB1dCB0b2dnbGVzXG4kbWF0LXRvZ2dsZS1zaXplOiAyMHB4ICFkZWZhdWx0O1xuXG4vLyBFYXNpbmcgQ3VydmVzXG4vLyBUT0RPKGplbGJvdXJuKTogYWxsIG9mIHRoZXNlIG5lZWQgdG8gYmUgcmV2aXNpdGVkXG5cbi8vIFRoZSBkZWZhdWx0IGFuaW1hdGlvbiBjdXJ2ZXMgdXNlZCBieSBtYXRlcmlhbCBkZXNpZ24uXG4kbWF0LWxpbmVhci1vdXQtc2xvdy1pbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAwLjIsIDAuMSkgIWRlZmF1bHQ7XG4kbWF0LWZhc3Qtb3V0LXNsb3ctaW4tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpICFkZWZhdWx0O1xuJG1hdC1mYXN0LW91dC1saW5lYXItaW4tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKSAhZGVmYXVsdDtcblxuJGVhc2UtaW4tb3V0LWN1cnZlLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zNSwgMCwgMC4yNSwgMSkgIWRlZmF1bHQ7XG5cbiRzd2lmdC1lYXNlLW91dC1kdXJhdGlvbjogNDAwbXMgIWRlZmF1bHQ7XG4kc3dpZnQtZWFzZS1vdXQtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjI1LCAxKSAhZGVmYXVsdDtcbiRzd2lmdC1lYXNlLW91dDogYWxsICRzd2lmdC1lYXNlLW91dC1kdXJhdGlvbiAkc3dpZnQtZWFzZS1vdXQtdGltaW5nLWZ1bmN0aW9uICFkZWZhdWx0O1xuXG4kc3dpZnQtZWFzZS1pbi1kdXJhdGlvbjogMzAwbXMgIWRlZmF1bHQ7XG4kc3dpZnQtZWFzZS1pbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjU1LCAwLCAwLjU1LCAwLjIpICFkZWZhdWx0O1xuJHN3aWZ0LWVhc2UtaW46IGFsbCAkc3dpZnQtZWFzZS1pbi1kdXJhdGlvbiAkc3dpZnQtZWFzZS1pbi10aW1pbmctZnVuY3Rpb24gIWRlZmF1bHQ7XG5cbiRzd2lmdC1lYXNlLWluLW91dC1kdXJhdGlvbjogNTAwbXMgIWRlZmF1bHQ7XG4kc3dpZnQtZWFzZS1pbi1vdXQtdGltaW5nLWZ1bmN0aW9uOiAkZWFzZS1pbi1vdXQtY3VydmUtZnVuY3Rpb24gIWRlZmF1bHQ7XG4kc3dpZnQtZWFzZS1pbi1vdXQ6IGFsbCAkc3dpZnQtZWFzZS1pbi1vdXQtZHVyYXRpb24gJHN3aWZ0LWVhc2UtaW4tb3V0LXRpbWluZy1mdW5jdGlvbiAhZGVmYXVsdDtcblxuJHN3aWZ0LWxpbmVhci1kdXJhdGlvbjogODBtcyAhZGVmYXVsdDtcbiRzd2lmdC1saW5lYXItdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXIgIWRlZmF1bHQ7XG4kc3dpZnQtbGluZWFyOiBhbGwgJHN3aWZ0LWxpbmVhci1kdXJhdGlvbiAkc3dpZnQtbGluZWFyLXRpbWluZy1mdW5jdGlvbiAhZGVmYXVsdDtcblxuXG5cbi8vIEEgY29sbGVjdGlvbiBvZiBtaXhpbnMgYW5kIENTUyBjbGFzc2VzIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXBwbHkgZWxldmF0aW9uIHRvIGEgbWF0ZXJpYWxcbi8vIGVsZW1lbnQuXG4vLyBTZWU6IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2Vudmlyb25tZW50L2VsZXZhdGlvbi5odG1sXG4vLyBFeGFtcGxlczpcbi8vXG4vL1xuLy8gLm1hdC1mb28ge1xuLy8gICBAaW5jbHVkZSAkbWF0LWVsZXZhdGlvbigyKTtcbi8vXG4vLyAgICY6YWN0aXZlIHtcbi8vICAgICBAaW5jbHVkZSAkbWF0LWVsZXZhdGlvbig4KTtcbi8vICAgfVxuLy8gfVxuLy9cbi8vIDxkaXYgaWQ9XCJleHRlcm5hbC1jYXJkXCIgY2xhc3M9XCJtYXQtZWxldmF0aW9uLXoyXCI+PHA+U29tZSBjb250ZW50PC9wPjwvZGl2PlxuLy9cbi8vIEZvciBhbiBleHBsYW5hdGlvbiBvZiB0aGUgZGVzaWduIGJlaGluZCBob3cgZWxldmF0aW9uIGlzIGltcGxlbWVudGVkLCBzZWUgdGhlIGRlc2lnbiBkb2MgYXRcbi8vIGh0dHBzOi8vZ29vLmdsL0txMGs5Wi5cblxuLy8gQ29sb3JzIGZvciB1bWJyYSwgcGVudW1icmEsIGFuZCBhbWJpZW50IHNoYWRvd3MuIEFzIGRlc2NyaWJlZCBpbiB0aGUgZGVzaWduIGRvYywgZWFjaCBlbGV2YXRpb25cbi8vIGxldmVsIGlzIGNyZWF0ZWQgdXNpbmcgYSBzZXQgb2YgMyBzaGFkb3cgdmFsdWVzLCBvbmUgZm9yIHVtYnJhICh0aGUgc2hhZG93IHJlcHJlc2VudGluZyB0aGVcbi8vIHNwYWNlIGNvbXBsZXRlbHkgb2JzY3VyZWQgYnkgYW4gb2JqZWN0IHJlbGF0aXZlIHRvIGl0cyBsaWdodCBzb3VyY2UpLCBvbmUgZm9yIHBlbnVtYnJhICh0aGVcbi8vIHNwYWNlIHBhcnRpYWxseSBvYnNjdXJlZCBieSBhbiBvYmplY3QpLCBhbmQgb25lIGZvciBhbWJpZW50ICh0aGUgc3BhY2Ugd2hpY2ggY29udGFpbnMgdGhlIG9iamVjdFxuLy8gaXRzZWxmKS4gRm9yIGEgZnVydGhlciBleHBsYW5hdGlvbiBvZiB0aGVzZSB0ZXJtcyBhbmQgdGhlaXIgbWVhbmluZ3MsIHNlZVxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW1icmEsX3BlbnVtYnJhX2FuZF9hbnR1bWJyYS5cblxuLy8gTWFwcyBmb3IgdGhlIGRpZmZlcmVudCBzaGFkb3cgc2V0cyBhbmQgdGhlaXIgdmFsdWVzIHdpdGhpbiBlYWNoIHotc3BhY2UuIFRoZXNlIHZhbHVlcyB3ZXJlXG4vLyBjcmVhdGVkIGJ5IHRha2luZyBhIGZldyByZWZlcmVuY2Ugc2hhZG93IHNldHMgY3JlYXRlZCBieSBHb29nbGUncyBEZXNpZ25lcnMgYW5kIGludGVycG9sYXRpbmdcbi8vIGFsbCBvZiB0aGUgdmFsdWVzIGJldHdlZW4gdGhlbS5cblxuQGZ1bmN0aW9uIF9nZXQtdW1icmEtbWFwKCRjb2xvciwgJG9wYWNpdHkpIHtcbiAgJHNoYWRvdy1jb2xvcjogaWYodHlwZS1vZigkY29sb3IpID09IGNvbG9yLCByZ2JhKCRjb2xvciwgJG9wYWNpdHkgKiAwLjIpLCAkY29sb3IpO1xuXG4gIEByZXR1cm4gKFxuICAgIDA6ICcwcHggMHB4IDBweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTogJzBweCAycHggMXB4IC0xcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjogJzBweCAzcHggMXB4IC0ycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMzogJzBweCAzcHggM3B4IC0ycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNDogJzBweCAycHggNHB4IC0xcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNTogJzBweCAzcHggNXB4IC0xcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNjogJzBweCAzcHggNXB4IC0xcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNzogJzBweCA0cHggNXB4IC0ycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgODogJzBweCA1cHggNXB4IC0zcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgOTogJzBweCA1cHggNnB4IC0zcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTA6ICcwcHggNnB4IDZweCAtM3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDExOiAnMHB4IDZweCA3cHggLTRweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxMjogJzBweCA3cHggOHB4IC00cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTM6ICcwcHggN3B4IDhweCAtNHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE0OiAnMHB4IDdweCA5cHggLTRweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNTogJzBweCA4cHggOXB4IC01cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTY6ICcwcHggOHB4IDEwcHggLTVweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNzogJzBweCA4cHggMTFweCAtNXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE4OiAnMHB4IDlweCAxMXB4IC01cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTk6ICcwcHggOXB4IDEycHggLTZweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMDogJzBweCAxMHB4IDEzcHggLTZweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMTogJzBweCAxMHB4IDEzcHggLTZweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMjogJzBweCAxMHB4IDE0cHggLTZweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMzogJzBweCAxMXB4IDE0cHggLTdweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyNDogJzBweCAxMXB4IDE1cHggLTdweCAjeyRzaGFkb3ctY29sb3J9J1xuICApO1xufVxuXG5AZnVuY3Rpb24gX2dldC1wZW51bWJyYS1tYXAoJGNvbG9yLCAkb3BhY2l0eSkge1xuICAkc2hhZG93LWNvbG9yOiBpZih0eXBlLW9mKCRjb2xvcikgPT0gY29sb3IsIHJnYmEoJGNvbG9yLCAkb3BhY2l0eSAqIDAuMTQpLCAkY29sb3IpO1xuXG4gIEByZXR1cm4gKFxuICAgIDA6ICcwcHggMHB4IDBweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTogJzBweCAxcHggMXB4IDBweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyOiAnMHB4IDJweCAycHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDM6ICcwcHggM3B4IDRweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNDogJzBweCA0cHggNXB4IDBweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA1OiAnMHB4IDVweCA4cHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDY6ICcwcHggNnB4IDEwcHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDc6ICcwcHggN3B4IDEwcHggMXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDg6ICcwcHggOHB4IDEwcHggMXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDk6ICcwcHggOXB4IDEycHggMXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDEwOiAnMHB4IDEwcHggMTRweCAxcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTE6ICcwcHggMTFweCAxNXB4IDFweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxMjogJzBweCAxMnB4IDE3cHggMnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDEzOiAnMHB4IDEzcHggMTlweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTQ6ICcwcHggMTRweCAyMXB4IDJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNTogJzBweCAxNXB4IDIycHggMnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE2OiAnMHB4IDE2cHggMjRweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTc6ICcwcHggMTdweCAyNnB4IDJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxODogJzBweCAxOHB4IDI4cHggMnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE5OiAnMHB4IDE5cHggMjlweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjA6ICcwcHggMjBweCAzMXB4IDNweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMTogJzBweCAyMXB4IDMzcHggM3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIyOiAnMHB4IDIycHggMzVweCAzcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjM6ICcwcHggMjNweCAzNnB4IDNweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyNDogJzBweCAyNHB4IDM4cHggM3B4ICN7JHNoYWRvdy1jb2xvcn0nXG4gICk7XG59XG5cbkBmdW5jdGlvbiBfZ2V0LWFtYmllbnQtbWFwKCRjb2xvciwgJG9wYWNpdHkpIHtcbiAgJHNoYWRvdy1jb2xvcjogaWYodHlwZS1vZigkY29sb3IpID09IGNvbG9yLCByZ2JhKCRjb2xvciwgJG9wYWNpdHkgKiAwLjEyKSwgJGNvbG9yKTtcblxuICBAcmV0dXJuIChcbiAgICAwOiAnMHB4IDBweCAwcHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE6ICcwcHggMXB4IDNweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjogJzBweCAxcHggNXB4IDBweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAzOiAnMHB4IDFweCA4cHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDQ6ICcwcHggMXB4IDEwcHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDU6ICcwcHggMXB4IDE0cHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDY6ICcwcHggMXB4IDE4cHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDc6ICcwcHggMnB4IDE2cHggMXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDg6ICcwcHggM3B4IDE0cHggMnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDk6ICcwcHggM3B4IDE2cHggMnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDEwOiAnMHB4IDRweCAxOHB4IDNweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxMTogJzBweCA0cHggMjBweCAzcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTI6ICcwcHggNXB4IDIycHggNHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDEzOiAnMHB4IDVweCAyNHB4IDRweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNDogJzBweCA1cHggMjZweCA0cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTU6ICcwcHggNnB4IDI4cHggNXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE2OiAnMHB4IDZweCAzMHB4IDVweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNzogJzBweCA2cHggMzJweCA1cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTg6ICcwcHggN3B4IDM0cHggNnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE5OiAnMHB4IDdweCAzNnB4IDZweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMDogJzBweCA4cHggMzhweCA3cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjE6ICcwcHggOHB4IDQwcHggN3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIyOiAnMHB4IDhweCA0MnB4IDdweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMzogJzBweCA5cHggNDRweCA4cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjQ6ICcwcHggOXB4IDQ2cHggOHB4ICN7JHNoYWRvdy1jb2xvcn0nXG4gICk7XG59XG5cbi8vIFRoZSBkZWZhdWx0IGR1cmF0aW9uIHZhbHVlIGZvciBlbGV2YXRpb24gdHJhbnNpdGlvbnMuXG4kbWF0LWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uOiAyODBtcyAhZGVmYXVsdDtcblxuLy8gVGhlIGRlZmF1bHQgZWFzaW5nIHZhbHVlIGZvciBlbGV2YXRpb24gdHJhbnNpdGlvbnMuXG4kbWF0LWVsZXZhdGlvbi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogJG1hdC1mYXN0LW91dC1zbG93LWluLXRpbWluZy1mdW5jdGlvbjtcblxuLy8gVGhlIGRlZmF1bHQgY29sb3IgZm9yIGVsZXZhdGlvbiBzaGFkb3dzLlxuJG1hdC1lbGV2YXRpb24tY29sb3I6IGJsYWNrICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBvcGFjaXR5IHNjYWxpbmcgdmFsdWUgZm9yIGVsZXZhdGlvbiBzaGFkb3dzLlxuJG1hdC1lbGV2YXRpb24tb3BhY2l0eTogMSAhZGVmYXVsdDtcblxuLy8gUHJlZml4IGZvciBlbGV2YXRpb24tcmVsYXRlZCBzZWxlY3RvcnMuXG4kX21hdC1lbGV2YXRpb24tcHJlZml4OiAnbWF0LWVsZXZhdGlvbi16JztcblxuLy8gQXBwbGllcyB0aGUgY29ycmVjdCBjc3MgcnVsZXMgdG8gYW4gZWxlbWVudCB0byBnaXZlIGl0IHRoZSBlbGV2YXRpb24gc3BlY2lmaWVkIGJ5ICR6VmFsdWUuXG4vLyBUaGUgJHpWYWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQuXG5AbWl4aW4gbWF0LWVsZXZhdGlvbigkelZhbHVlLCAkY29sb3I6ICRtYXQtZWxldmF0aW9uLWNvbG9yLCAkb3BhY2l0eTogJG1hdC1lbGV2YXRpb24tb3BhY2l0eSkge1xuICBAaWYgdHlwZS1vZigkelZhbHVlKSAhPSBudW1iZXIgb3Igbm90IHVuaXRsZXNzKCR6VmFsdWUpIHtcbiAgICBAZXJyb3IgJyR6VmFsdWUgbXVzdCBiZSBhIHVuaXRsZXNzIG51bWJlcic7XG4gIH1cbiAgQGlmICR6VmFsdWUgPCAwIG9yICR6VmFsdWUgPiAyNCB7XG4gICAgQGVycm9yICckelZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNCc7XG4gIH1cblxuICBib3gtc2hhZG93OiAje21hcC1nZXQoX2dldC11bWJyYS1tYXAoJGNvbG9yLCAkb3BhY2l0eSksICR6VmFsdWUpfSxcbiAgICAgICAgICAgICAgI3ttYXAtZ2V0KF9nZXQtcGVudW1icmEtbWFwKCRjb2xvciwgJG9wYWNpdHkpLCAkelZhbHVlKX0sXG4gICAgICAgICAgICAgICN7bWFwLWdldChfZ2V0LWFtYmllbnQtbWFwKCRjb2xvciwgJG9wYWNpdHkpLCAkelZhbHVlKX07XG59XG5cbkBtaXhpbiBfbWF0LXRoZW1lLWVsZXZhdGlvbigkelZhbHVlLCAkY29uZmlnLCAkb3BhY2l0eTogJG1hdC1lbGV2YXRpb24tb3BhY2l0eSkge1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGVsZXZhdGlvbi1jb2xvcjogbWFwLWdldCgkZm9yZWdyb3VuZCwgZWxldmF0aW9uKTtcbiAgJGVsZXZhdGlvbi1jb2xvci1vci1kZWZhdWx0OiBpZigkZWxldmF0aW9uLWNvbG9yID09IG51bGwsICRtYXQtZWxldmF0aW9uLWNvbG9yLCAkZWxldmF0aW9uLWNvbG9yKTtcblxuICBAaW5jbHVkZSBtYXQtZWxldmF0aW9uKCR6VmFsdWUsICRlbGV2YXRpb24tY29sb3Itb3ItZGVmYXVsdCwgJG9wYWNpdHkpO1xufVxuXG4vLyBBcHBsaWVzIHRoZSBlbGV2YXRpb24gdG8gYW4gZWxlbWVudCBpbiBhIG1hbm5lciB0aGF0IGFsbG93c1xuLy8gY29uc3VtZXJzIHRvIG92ZXJyaWRlIGl0IHZpYSB0aGUgTWF0ZXJpYWwgZWxldmF0aW9uIGNsYXNzZXMuXG5AbWl4aW4gbWF0LW92ZXJyaWRhYmxlLWVsZXZhdGlvbihcbiAgICAkelZhbHVlLFxuICAgICRjb2xvcjogJG1hdC1lbGV2YXRpb24tY29sb3IsXG4gICAgJG9wYWNpdHk6ICRtYXQtZWxldmF0aW9uLW9wYWNpdHkpIHtcbiAgJjpub3QoW2NsYXNzKj0nI3skX21hdC1lbGV2YXRpb24tcHJlZml4fSddKSB7XG4gICAgQGluY2x1ZGUgbWF0LWVsZXZhdGlvbigkelZhbHVlLCAkY29sb3IsICRvcGFjaXR5KTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oJHpWYWx1ZSwgJGNvbmZpZywgJG9wYWNpdHk6ICRtYXQtZWxldmF0aW9uLW9wYWNpdHkpIHtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRlbGV2YXRpb24tY29sb3I6IG1hcC1nZXQoJGZvcmVncm91bmQsIGVsZXZhdGlvbik7XG4gICRlbGV2YXRpb24tY29sb3Itb3ItZGVmYXVsdDogaWYoJGVsZXZhdGlvbi1jb2xvciA9PSBudWxsLCAkbWF0LWVsZXZhdGlvbi1jb2xvciwgJGVsZXZhdGlvbi1jb2xvcik7XG5cbiAgQGluY2x1ZGUgbWF0LW92ZXJyaWRhYmxlLWVsZXZhdGlvbigkelZhbHVlLCAkZWxldmF0aW9uLWNvbG9yLW9yLWRlZmF1bHQsICRvcGFjaXR5KTtcbn1cblxuLy8gUmV0dXJucyBhIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBmb3IgYSB0cmFuc2l0aW9uIHByb3BlcnR5IGZvciBlbGV2YXRpb24uXG4vLyBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gZGlyZWN0bHkgaXMgdXNlZnVsIGluIHNpdHVhdGlvbnMgd2hlcmUgYSBjb21wb25lbnQgbmVlZHMgdG8gdHJhbnNpdGlvblxuLy8gbW9yZSB0aGFuIG9uZSBwcm9wZXJ0eS5cbi8vXG4vLyAuZm9vIHtcbi8vICAgdHJhbnNpdGlvbjogbWF0LWVsZXZhdGlvbi10cmFuc2l0aW9uLXByb3BlcnR5LXZhbHVlKCksIG9wYWNpdHkgMTAwbXMgZWFzZTtcbi8vIH1cbkBmdW5jdGlvbiBtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tcHJvcGVydHktdmFsdWUoXG4gICAgJGR1cmF0aW9uOiAkbWF0LWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uLFxuICAgICRlYXNpbmc6ICRtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uKSB7XG4gIEByZXR1cm4gYm94LXNoYWRvdyAjeyRkdXJhdGlvbn0gI3skZWFzaW5nfTtcbn1cblxuLy8gQXBwbGllcyB0aGUgY29ycmVjdCBjc3MgcnVsZXMgbmVlZGVkIHRvIGhhdmUgYW4gZWxlbWVudCB0cmFuc2l0aW9uIGJldHdlZW4gZWxldmF0aW9ucy5cbi8vIFRoaXMgbWl4aW4gc2hvdWxkIGJlIGFwcGxpZWQgdG8gZWxlbWVudHMgd2hvc2UgZWxldmF0aW9uIHZhbHVlcyB3aWxsIGNoYW5nZSBkZXBlbmRpbmcgb24gdGhlaXJcbi8vIGNvbnRleHQgKGUuZy4gd2hlbiBhY3RpdmUgb3IgZGlzYWJsZWQpLlxuLy9cbi8vIE5PVEUodHJhdmlza2F1Zm1hbik6IEJvdGggdGhpcyBtaXhpbiBhbmQgdGhlIGFib3ZlIGZ1bmN0aW9uIHVzZSBkZWZhdWx0IHBhcmFtZXRlcnMgc28gdGhleSBjYW5cbi8vIGJlIHVzZWQgaW4gdGhlIHNhbWUgd2F5IGJ5IGNsaWVudHMuXG5AbWl4aW4gbWF0LWVsZXZhdGlvbi10cmFuc2l0aW9uKFxuICAgICRkdXJhdGlvbjogJG1hdC1lbGV2YXRpb24tdHJhbnNpdGlvbi1kdXJhdGlvbixcbiAgICAkZWFzaW5nOiAkbWF0LWVsZXZhdGlvbi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbikge1xuICB0cmFuc2l0aW9uOiBtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tcHJvcGVydHktdmFsdWUoJGR1cmF0aW9uLCAkZWFzaW5nKTtcbn1cblxuLy8gQ29sb3IgcGFsZXR0ZXMgZnJvbSB0aGUgTWF0ZXJpYWwgRGVzaWduIHNwZWMuXG4vLyBTZWUgaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vY29sb3IvXG4vL1xuLy8gQ29udHJhc3QgY29sb3JzIGFyZSBoYXJkLWNvZGVkIGJlY2F1c2UgaXQgaXMgdG9vIGRpZmZpY3VsdCAocHJvYmFibHkgaW1wb3NzaWJsZSkgdG9cbi8vIGNhbGN1bGF0ZSB0aGVtLiBUaGVzZSBjb250cmFzdCBjb2xvcnMgYXJlIHB1bGxlZCBmcm9tIHRoZSBwdWJsaWMgTWF0ZXJpYWwgRGVzaWduIHNwZWMgc3dhdGNoZXMuXG4vLyBXaGlsZSB0aGUgY29udHJhc3QgY29sb3JzIGluIHRoZSBzcGVjIGFyZSBub3QgcHJlc2NyaXB0aXZlLCB3ZSB1c2UgdGhlbSBmb3IgY29udmVuaWVuY2UuXG5cblxuLy8gQGRlcHJlY2F0ZWQgcmVuYW1lZCB0byAkZGFyay1wcmltYXJ5LXRleHQuXG4vLyBAYnJlYWtpbmctY2hhbmdlIDguMC4wXG4kYmxhY2stODctb3BhY2l0eTogcmdiYShibGFjaywgMC44Nyk7XG4vLyBAZGVwcmVjYXRlZCByZW5hbWVkIHRvICRsaWdodC1wcmltYXJ5LXRleHQuXG4vLyBAYnJlYWtpbmctY2hhbmdlIDguMC4wXG4kd2hpdGUtODctb3BhY2l0eTogcmdiYSh3aGl0ZSwgMC44Nyk7XG4vLyBAZGVwcmVjYXRlZCB1c2UgJGRhcmstW3NlY29uZGFyeS10ZXh0LGRpc2FibGVkLXRleHQsZGl2aWRlcnMsZm9jdXNlZF0gaW5zdGVhZC5cbi8vIEBicmVha2luZy1jaGFuZ2UgOC4wLjBcbiRibGFjay0xMi1vcGFjaXR5OiByZ2JhKGJsYWNrLCAwLjEyKTtcbi8vIEBkZXByZWNhdGVkIHVzZSAkbGlnaHQtW3NlY29uZGFyeS10ZXh0LGRpc2FibGVkLXRleHQsZGl2aWRlcnMsZm9jdXNlZF0gaW5zdGVhZC5cbi8vIEBicmVha2luZy1jaGFuZ2UgOC4wLjBcbiR3aGl0ZS0xMi1vcGFjaXR5OiByZ2JhKHdoaXRlLCAwLjEyKTtcbi8vIEBkZXByZWNhdGVkIHVzZSAkZGFyay1bc2Vjb25kYXJ5LXRleHQsZGlzYWJsZWQtdGV4dCxkaXZpZGVycyxmb2N1c2VkXSBpbnN0ZWFkLlxuLy8gQGJyZWFraW5nLWNoYW5nZSA4LjAuMFxuJGJsYWNrLTYtb3BhY2l0eTogcmdiYShibGFjaywgMC4wNik7XG4vLyBAZGVwcmVjYXRlZCB1c2UgJGxpZ2h0LVtzZWNvbmRhcnktdGV4dCxkaXNhYmxlZC10ZXh0LGRpdmlkZXJzLGZvY3VzZWRdIGluc3RlYWQuXG4vLyBAYnJlYWtpbmctY2hhbmdlIDguMC4wXG4kd2hpdGUtNi1vcGFjaXR5OiByZ2JhKHdoaXRlLCAwLjA2KTtcblxuJGRhcmstcHJpbWFyeS10ZXh0OiByZ2JhKGJsYWNrLCAwLjg3KTtcbiRkYXJrLXNlY29uZGFyeS10ZXh0OiByZ2JhKGJsYWNrLCAwLjU0KTtcbiRkYXJrLWRpc2FibGVkLXRleHQ6IHJnYmEoYmxhY2ssIDAuMzgpO1xuJGRhcmstZGl2aWRlcnM6IHJnYmEoYmxhY2ssIDAuMTIpO1xuJGRhcmstZm9jdXNlZDogcmdiYShibGFjaywgMC4xMik7XG4kbGlnaHQtcHJpbWFyeS10ZXh0OiB3aGl0ZTtcbiRsaWdodC1zZWNvbmRhcnktdGV4dDogcmdiYSh3aGl0ZSwgMC43KTtcbiRsaWdodC1kaXNhYmxlZC10ZXh0OiByZ2JhKHdoaXRlLCAwLjUpO1xuJGxpZ2h0LWRpdmlkZXJzOiByZ2JhKHdoaXRlLCAwLjEyKTtcbiRsaWdodC1mb2N1c2VkOiByZ2JhKHdoaXRlLCAwLjEyKTtcblxuJG1hdC1yZWQ6IChcbiAgNTA6ICNmZmViZWUsXG4gIDEwMDogI2ZmY2RkMixcbiAgMjAwOiAjZWY5YTlhLFxuICAzMDA6ICNlNTczNzMsXG4gIDQwMDogI2VmNTM1MCxcbiAgNTAwOiAjZjQ0MzM2LFxuICA2MDA6ICNlNTM5MzUsXG4gIDcwMDogI2QzMmYyZixcbiAgODAwOiAjYzYyODI4LFxuICA5MDA6ICNiNzFjMWMsXG4gIEExMDA6ICNmZjhhODAsXG4gIEEyMDA6ICNmZjUyNTIsXG4gIEE0MDA6ICNmZjE3NDQsXG4gIEE3MDA6ICNkNTAwMDAsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1waW5rOiAoXG4gIDUwOiAjZmNlNGVjLFxuICAxMDA6ICNmOGJiZDAsXG4gIDIwMDogI2Y0OGZiMSxcbiAgMzAwOiAjZjA2MjkyLFxuICA0MDA6ICNlYzQwN2EsXG4gIDUwMDogI2U5MWU2MyxcbiAgNjAwOiAjZDgxYjYwLFxuICA3MDA6ICNjMjE4NWIsXG4gIDgwMDogI2FkMTQ1NyxcbiAgOTAwOiAjODgwZTRmLFxuICBBMTAwOiAjZmY4MGFiLFxuICBBMjAwOiAjZmY0MDgxLFxuICBBNDAwOiAjZjUwMDU3LFxuICBBNzAwOiAjYzUxMTYyLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtcHVycGxlOiAoXG4gIDUwOiAjZjNlNWY1LFxuICAxMDA6ICNlMWJlZTcsXG4gIDIwMDogI2NlOTNkOCxcbiAgMzAwOiAjYmE2OGM4LFxuICA0MDA6ICNhYjQ3YmMsXG4gIDUwMDogIzljMjdiMCxcbiAgNjAwOiAjOGUyNGFhLFxuICA3MDA6ICM3YjFmYTIsXG4gIDgwMDogIzZhMWI5YSxcbiAgOTAwOiAjNGExNDhjLFxuICBBMTAwOiAjZWE4MGZjLFxuICBBMjAwOiAjZTA0MGZiLFxuICBBNDAwOiAjZDUwMGY5LFxuICBBNzAwOiAjYWEwMGZmLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1kZWVwLXB1cnBsZTogKFxuICA1MDogI2VkZTdmNixcbiAgMTAwOiAjZDFjNGU5LFxuICAyMDA6ICNiMzlkZGIsXG4gIDMwMDogIzk1NzVjZCxcbiAgNDAwOiAjN2U1N2MyLFxuICA1MDA6ICM2NzNhYjcsXG4gIDYwMDogIzVlMzViMSxcbiAgNzAwOiAjNTEyZGE4LFxuICA4MDA6ICM0NTI3YTAsXG4gIDkwMDogIzMxMWI5MixcbiAgQTEwMDogI2IzODhmZixcbiAgQTIwMDogIzdjNGRmZixcbiAgQTQwMDogIzY1MWZmZixcbiAgQTcwMDogIzYyMDBlYSxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtaW5kaWdvOiAoXG4gIDUwOiAjZThlYWY2LFxuICAxMDA6ICNjNWNhZTksXG4gIDIwMDogIzlmYThkYSxcbiAgMzAwOiAjNzk4NmNiLFxuICA0MDA6ICM1YzZiYzAsXG4gIDUwMDogIzNmNTFiNSxcbiAgNjAwOiAjMzk0OWFiLFxuICA3MDA6ICMzMDNmOWYsXG4gIDgwMDogIzI4MzU5MyxcbiAgOTAwOiAjMWEyMzdlLFxuICBBMTAwOiAjOGM5ZWZmLFxuICBBMjAwOiAjNTM2ZGZlLFxuICBBNDAwOiAjM2Q1YWZlLFxuICBBNzAwOiAjMzA0ZmZlLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1ibHVlOiAoXG4gIDUwOiAjZTNmMmZkLFxuICAxMDA6ICNiYmRlZmIsXG4gIDIwMDogIzkwY2FmOSxcbiAgMzAwOiAjNjRiNWY2LFxuICA0MDA6ICM0MmE1ZjUsXG4gIDUwMDogIzIxOTZmMyxcbiAgNjAwOiAjMWU4OGU1LFxuICA3MDA6ICMxOTc2ZDIsXG4gIDgwMDogIzE1NjVjMCxcbiAgOTAwOiAjMGQ0N2ExLFxuICBBMTAwOiAjODJiMWZmLFxuICBBMjAwOiAjNDQ4YWZmLFxuICBBNDAwOiAjMjk3OWZmLFxuICBBNzAwOiAjMjk2MmZmLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtbGlnaHQtYmx1ZTogKFxuICA1MDogI2UxZjVmZSxcbiAgMTAwOiAjYjNlNWZjLFxuICAyMDA6ICM4MWQ0ZmEsXG4gIDMwMDogIzRmYzNmNyxcbiAgNDAwOiAjMjliNmY2LFxuICA1MDA6ICMwM2E5ZjQsXG4gIDYwMDogIzAzOWJlNSxcbiAgNzAwOiAjMDI4OGQxLFxuICA4MDA6ICMwMjc3YmQsXG4gIDkwMDogIzAxNTc5YixcbiAgQTEwMDogIzgwZDhmZixcbiAgQTIwMDogIzQwYzRmZixcbiAgQTQwMDogIzAwYjBmZixcbiAgQTcwMDogIzAwOTFlYSxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1jeWFuOiAoXG4gIDUwOiAjZTBmN2ZhLFxuICAxMDA6ICNiMmViZjIsXG4gIDIwMDogIzgwZGVlYSxcbiAgMzAwOiAjNGRkMGUxLFxuICA0MDA6ICMyNmM2ZGEsXG4gIDUwMDogIzAwYmNkNCxcbiAgNjAwOiAjMDBhY2MxLFxuICA3MDA6ICMwMDk3YTcsXG4gIDgwMDogIzAwODM4ZixcbiAgOTAwOiAjMDA2MDY0LFxuICBBMTAwOiAjODRmZmZmLFxuICBBMjAwOiAjMThmZmZmLFxuICBBNDAwOiAjMDBlNWZmLFxuICBBNzAwOiAjMDBiOGQ0LFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtdGVhbDogKFxuICA1MDogI2UwZjJmMSxcbiAgMTAwOiAjYjJkZmRiLFxuICAyMDA6ICM4MGNiYzQsXG4gIDMwMDogIzRkYjZhYyxcbiAgNDAwOiAjMjZhNjlhLFxuICA1MDA6ICMwMDk2ODgsXG4gIDYwMDogIzAwODk3YixcbiAgNzAwOiAjMDA3OTZiLFxuICA4MDA6ICMwMDY5NWMsXG4gIDkwMDogIzAwNGQ0MCxcbiAgQTEwMDogI2E3ZmZlYixcbiAgQTIwMDogIzY0ZmZkYSxcbiAgQTQwMDogIzFkZTliNixcbiAgQTcwMDogIzAwYmZhNSxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LWdyZWVuOiAoXG4gIDUwOiAjZThmNWU5LFxuICAxMDA6ICNjOGU2YzksXG4gIDIwMDogI2E1ZDZhNyxcbiAgMzAwOiAjODFjNzg0LFxuICA0MDA6ICM2NmJiNmEsXG4gIDUwMDogIzRjYWY1MCxcbiAgNjAwOiAjNDNhMDQ3LFxuICA3MDA6ICMzODhlM2MsXG4gIDgwMDogIzJlN2QzMixcbiAgOTAwOiAjMWI1ZTIwLFxuICBBMTAwOiAjYjlmNmNhLFxuICBBMjAwOiAjNjlmMGFlLFxuICBBNDAwOiAjMDBlNjc2LFxuICBBNzAwOiAjMDBjODUzLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1saWdodC1ncmVlbjogKFxuICA1MDogI2YxZjhlOSxcbiAgMTAwOiAjZGNlZGM4LFxuICAyMDA6ICNjNWUxYTUsXG4gIDMwMDogI2FlZDU4MSxcbiAgNDAwOiAjOWNjYzY1LFxuICA1MDA6ICM4YmMzNGEsXG4gIDYwMDogIzdjYjM0MixcbiAgNzAwOiAjNjg5ZjM4LFxuICA4MDA6ICM1NThiMmYsXG4gIDkwMDogIzMzNjkxZSxcbiAgQTEwMDogI2NjZmY5MCxcbiAgQTIwMDogI2IyZmY1OSxcbiAgQTQwMDogIzc2ZmYwMyxcbiAgQTcwMDogIzY0ZGQxNyxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1saW1lOiAoXG4gIDUwOiAjZjlmYmU3LFxuICAxMDA6ICNmMGY0YzMsXG4gIDIwMDogI2U2ZWU5YyxcbiAgMzAwOiAjZGNlNzc1LFxuICA0MDA6ICNkNGUxNTcsXG4gIDUwMDogI2NkZGMzOSxcbiAgNjAwOiAjYzBjYTMzLFxuICA3MDA6ICNhZmI0MmIsXG4gIDgwMDogIzllOWQyNCxcbiAgOTAwOiAjODI3NzE3LFxuICBBMTAwOiAjZjRmZjgxLFxuICBBMjAwOiAjZWVmZjQxLFxuICBBNDAwOiAjYzZmZjAwLFxuICBBNzAwOiAjYWVlYTAwLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC15ZWxsb3c6IChcbiAgNTA6ICNmZmZkZTcsXG4gIDEwMDogI2ZmZjljNCxcbiAgMjAwOiAjZmZmNTlkLFxuICAzMDA6ICNmZmYxNzYsXG4gIDQwMDogI2ZmZWU1OCxcbiAgNTAwOiAjZmZlYjNiLFxuICA2MDA6ICNmZGQ4MzUsXG4gIDcwMDogI2ZiYzAyZCxcbiAgODAwOiAjZjlhODI1LFxuICA5MDA6ICNmNTdmMTcsXG4gIEExMDA6ICNmZmZmOGQsXG4gIEEyMDA6ICNmZmZmMDAsXG4gIEE0MDA6ICNmZmVhMDAsXG4gIEE3MDA6ICNmZmQ2MDAsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtYW1iZXI6IChcbiAgNTA6ICNmZmY4ZTEsXG4gIDEwMDogI2ZmZWNiMyxcbiAgMjAwOiAjZmZlMDgyLFxuICAzMDA6ICNmZmQ1NGYsXG4gIDQwMDogI2ZmY2EyOCxcbiAgNTAwOiAjZmZjMTA3LFxuICA2MDA6ICNmZmIzMDAsXG4gIDcwMDogI2ZmYTAwMCxcbiAgODAwOiAjZmY4ZjAwLFxuICA5MDA6ICNmZjZmMDAsXG4gIEExMDA6ICNmZmU1N2YsXG4gIEEyMDA6ICNmZmQ3NDAsXG4gIEE0MDA6ICNmZmM0MDAsXG4gIEE3MDA6ICNmZmFiMDAsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtb3JhbmdlOiAoXG4gIDUwOiAjZmZmM2UwLFxuICAxMDA6ICNmZmUwYjIsXG4gIDIwMDogI2ZmY2M4MCxcbiAgMzAwOiAjZmZiNzRkLFxuICA0MDA6ICNmZmE3MjYsXG4gIDUwMDogI2ZmOTgwMCxcbiAgNjAwOiAjZmI4YzAwLFxuICA3MDA6ICNmNTdjMDAsXG4gIDgwMDogI2VmNmMwMCxcbiAgOTAwOiAjZTY1MTAwLFxuICBBMTAwOiAjZmZkMTgwLFxuICBBMjAwOiAjZmZhYjQwLFxuICBBNDAwOiAjZmY5MTAwLFxuICBBNzAwOiAjZmY2ZDAwLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiBibGFjayxcbiAgKVxuKTtcblxuJG1hdC1kZWVwLW9yYW5nZTogKFxuICA1MDogI2ZiZTllNyxcbiAgMTAwOiAjZmZjY2JjLFxuICAyMDA6ICNmZmFiOTEsXG4gIDMwMDogI2ZmOGE2NSxcbiAgNDAwOiAjZmY3MDQzLFxuICA1MDA6ICNmZjU3MjIsXG4gIDYwMDogI2Y0NTExZSxcbiAgNzAwOiAjZTY0YTE5LFxuICA4MDA6ICNkODQzMTUsXG4gIDkwMDogI2JmMzYwYyxcbiAgQTEwMDogI2ZmOWU4MCxcbiAgQTIwMDogI2ZmNmU0MCxcbiAgQTQwMDogI2ZmM2QwMCxcbiAgQTcwMDogI2RkMmMwMCxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtYnJvd246IChcbiAgNTA6ICNlZmViZTksXG4gIDEwMDogI2Q3Y2NjOCxcbiAgMjAwOiAjYmNhYWE0LFxuICAzMDA6ICNhMTg4N2YsXG4gIDQwMDogIzhkNmU2MyxcbiAgNTAwOiAjNzk1NTQ4LFxuICA2MDA6ICM2ZDRjNDEsXG4gIDcwMDogIzVkNDAzNyxcbiAgODAwOiAjNGUzNDJlLFxuICA5MDA6ICMzZTI3MjMsXG4gIEExMDA6ICNkN2NjYzgsXG4gIEEyMDA6ICNiY2FhYTQsXG4gIEE0MDA6ICM4ZDZlNjMsXG4gIEE3MDA6ICM1ZDQwMzcsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtZ3JleTogKFxuICA1MDogI2ZhZmFmYSxcbiAgMTAwOiAjZjVmNWY1LFxuICAyMDA6ICNlZWVlZWUsXG4gIDMwMDogI2UwZTBlMCxcbiAgNDAwOiAjYmRiZGJkLFxuICA1MDA6ICM5ZTllOWUsXG4gIDYwMDogIzc1NzU3NSxcbiAgNzAwOiAjNjE2MTYxLFxuICA4MDA6ICM0MjQyNDIsXG4gIDkwMDogIzIxMjEyMSxcbiAgQTEwMDogI2ZmZmZmZixcbiAgQTIwMDogI2VlZWVlZSxcbiAgQTQwMDogI2JkYmRiZCxcbiAgQTcwMDogIzYxNjE2MSxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4vLyBBbGlhcyBmb3IgYWx0ZXJuYXRlIHNwZWxsaW5nLlxuJG1hdC1ncmF5OiAkbWF0LWdyZXk7XG5cbiRtYXQtYmx1ZS1ncmV5OiAoXG4gIDUwOiAjZWNlZmYxLFxuICAxMDA6ICNjZmQ4ZGMsXG4gIDIwMDogI2IwYmVjNSxcbiAgMzAwOiAjOTBhNGFlLFxuICA0MDA6ICM3ODkwOWMsXG4gIDUwMDogIzYwN2Q4YixcbiAgNjAwOiAjNTQ2ZTdhLFxuICA3MDA6ICM0NTVhNjQsXG4gIDgwMDogIzM3NDc0ZixcbiAgOTAwOiAjMjYzMjM4LFxuICBBMTAwOiAjY2ZkOGRjLFxuICBBMjAwOiAjYjBiZWM1LFxuICBBNDAwOiAjNzg5MDljLFxuICBBNzAwOiAjNDU1YTY0LFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbi8vIEFsaWFzIGZvciBhbHRlcm5hdGUgc3BlbGxpbmcuXG4kbWF0LWJsdWUtZ3JheTogJG1hdC1ibHVlLWdyZXk7XG5cblxuLy8gQmFja2dyb3VuZCBwYWxldHRlIGZvciBsaWdodCB0aGVtZXMuXG4kbWF0LWxpZ2h0LXRoZW1lLWJhY2tncm91bmQ6IChcbiAgc3RhdHVzLWJhcjogbWFwX2dldCgkbWF0LWdyZXksIDMwMCksXG4gIGFwcC1iYXI6ICAgIG1hcF9nZXQoJG1hdC1ncmV5LCAxMDApLFxuICBiYWNrZ3JvdW5kOiBtYXBfZ2V0KCRtYXQtZ3JleSwgNTApLFxuICBob3ZlcjogICAgICByZ2JhKGJsYWNrLCAwLjA0KSwgLy8gVE9ETyhrYXJhKTogY2hlY2sgc3R5bGUgd2l0aCBNYXRlcmlhbCBEZXNpZ24gVVhcbiAgY2FyZDogICAgICAgd2hpdGUsXG4gIGRpYWxvZzogICAgIHdoaXRlLFxuICBkaXNhYmxlZC1idXR0b246IHJnYmEoYmxhY2ssIDAuMTIpLFxuICByYWlzZWQtYnV0dG9uOiB3aGl0ZSxcbiAgZm9jdXNlZC1idXR0b246ICRkYXJrLWZvY3VzZWQsXG4gIHNlbGVjdGVkLWJ1dHRvbjogbWFwX2dldCgkbWF0LWdyZXksIDMwMCksXG4gIHNlbGVjdGVkLWRpc2FibGVkLWJ1dHRvbjogbWFwX2dldCgkbWF0LWdyZXksIDQwMCksXG4gIGRpc2FibGVkLWJ1dHRvbi10b2dnbGU6IG1hcF9nZXQoJG1hdC1ncmV5LCAyMDApLFxuICB1bnNlbGVjdGVkLWNoaXA6IG1hcF9nZXQoJG1hdC1ncmV5LCAzMDApLFxuICBkaXNhYmxlZC1saXN0LW9wdGlvbjogbWFwX2dldCgkbWF0LWdyZXksIDIwMCksXG4gIHRvb2x0aXA6IG1hcF9nZXQoJG1hdC1ncmV5LCA3MDApLFxuKTtcblxuLy8gQmFja2dyb3VuZCBwYWxldHRlIGZvciBkYXJrIHRoZW1lcy5cbiRtYXQtZGFyay10aGVtZS1iYWNrZ3JvdW5kOiAoXG4gIHN0YXR1cy1iYXI6IGJsYWNrLFxuICBhcHAtYmFyOiAgICBtYXBfZ2V0KCRtYXQtZ3JleSwgOTAwKSxcbiAgYmFja2dyb3VuZDogIzMwMzAzMCxcbiAgaG92ZXI6ICAgICAgcmdiYSh3aGl0ZSwgMC4wNCksIC8vIFRPRE8oa2FyYSk6IGNoZWNrIHN0eWxlIHdpdGggTWF0ZXJpYWwgRGVzaWduIFVYXG4gIGNhcmQ6ICAgICAgIG1hcF9nZXQoJG1hdC1ncmV5LCA4MDApLFxuICBkaWFsb2c6ICAgICBtYXBfZ2V0KCRtYXQtZ3JleSwgODAwKSxcbiAgZGlzYWJsZWQtYnV0dG9uOiByZ2JhKHdoaXRlLCAwLjEyKSxcbiAgcmFpc2VkLWJ1dHRvbjogbWFwLWdldCgkbWF0LWdyZXksIDgwMCksXG4gIGZvY3VzZWQtYnV0dG9uOiAkbGlnaHQtZm9jdXNlZCxcbiAgc2VsZWN0ZWQtYnV0dG9uOiBtYXBfZ2V0KCRtYXQtZ3JleSwgOTAwKSxcbiAgc2VsZWN0ZWQtZGlzYWJsZWQtYnV0dG9uOiBtYXBfZ2V0KCRtYXQtZ3JleSwgODAwKSxcbiAgZGlzYWJsZWQtYnV0dG9uLXRvZ2dsZTogYmxhY2ssXG4gIHVuc2VsZWN0ZWQtY2hpcDogbWFwX2dldCgkbWF0LWdyZXksIDcwMCksXG4gIGRpc2FibGVkLWxpc3Qtb3B0aW9uOiBibGFjayxcbiAgdG9vbHRpcDogbWFwX2dldCgkbWF0LWdyZXksIDcwMCksXG4pO1xuXG4vLyBGb3JlZ3JvdW5kIHBhbGV0dGUgZm9yIGxpZ2h0IHRoZW1lcy5cbiRtYXQtbGlnaHQtdGhlbWUtZm9yZWdyb3VuZDogKFxuICBiYXNlOiAgICAgICAgICAgICAgYmxhY2ssXG4gIGRpdmlkZXI6ICAgICAgICAgICAkZGFyay1kaXZpZGVycyxcbiAgZGl2aWRlcnM6ICAgICAgICAgICRkYXJrLWRpdmlkZXJzLFxuICBkaXNhYmxlZDogICAgICAgICAgJGRhcmstZGlzYWJsZWQtdGV4dCxcbiAgZGlzYWJsZWQtYnV0dG9uOiAgIHJnYmEoYmxhY2ssIDAuMjYpLFxuICBkaXNhYmxlZC10ZXh0OiAgICAgJGRhcmstZGlzYWJsZWQtdGV4dCxcbiAgZWxldmF0aW9uOiAgICAgICAgIGJsYWNrLFxuICBoaW50LXRleHQ6ICAgICAgICAgJGRhcmstZGlzYWJsZWQtdGV4dCxcbiAgc2Vjb25kYXJ5LXRleHQ6ICAgICRkYXJrLXNlY29uZGFyeS10ZXh0LFxuICBpY29uOiAgICAgICAgICAgICAgcmdiYShibGFjaywgMC41NCksXG4gIGljb25zOiAgICAgICAgICAgICByZ2JhKGJsYWNrLCAwLjU0KSxcbiAgdGV4dDogICAgICAgICAgICAgIHJnYmEoYmxhY2ssIDAuODcpLFxuICBzbGlkZXItbWluOiAgICAgICAgcmdiYShibGFjaywgMC44NyksXG4gIHNsaWRlci1vZmY6ICAgICAgICByZ2JhKGJsYWNrLCAwLjI2KSxcbiAgc2xpZGVyLW9mZi1hY3RpdmU6IHJnYmEoYmxhY2ssIDAuMzgpLFxuKTtcblxuLy8gRm9yZWdyb3VuZCBwYWxldHRlIGZvciBkYXJrIHRoZW1lcy5cbiRtYXQtZGFyay10aGVtZS1mb3JlZ3JvdW5kOiAoXG4gIGJhc2U6ICAgICAgICAgICAgICB3aGl0ZSxcbiAgZGl2aWRlcjogICAgICAgICAgICRsaWdodC1kaXZpZGVycyxcbiAgZGl2aWRlcnM6ICAgICAgICAgICRsaWdodC1kaXZpZGVycyxcbiAgZGlzYWJsZWQ6ICAgICAgICAgICRsaWdodC1kaXNhYmxlZC10ZXh0LFxuICBkaXNhYmxlZC1idXR0b246ICAgcmdiYSh3aGl0ZSwgMC4zKSxcbiAgZGlzYWJsZWQtdGV4dDogICAgICRsaWdodC1kaXNhYmxlZC10ZXh0LFxuICBlbGV2YXRpb246ICAgICAgICAgYmxhY2ssXG4gIGhpbnQtdGV4dDogICAgICAgICAkbGlnaHQtZGlzYWJsZWQtdGV4dCxcbiAgc2Vjb25kYXJ5LXRleHQ6ICAgICRsaWdodC1zZWNvbmRhcnktdGV4dCxcbiAgaWNvbjogICAgICAgICAgICAgIHdoaXRlLFxuICBpY29uczogICAgICAgICAgICAgd2hpdGUsXG4gIHRleHQ6ICAgICAgICAgICAgICB3aGl0ZSxcbiAgc2xpZGVyLW1pbjogICAgICAgIHdoaXRlLFxuICBzbGlkZXItb2ZmOiAgICAgICAgcmdiYSh3aGl0ZSwgMC4zKSxcbiAgc2xpZGVyLW9mZi1hY3RpdmU6IHJnYmEod2hpdGUsIDAuMyksXG4pO1xuXG5cbi8vIFdoZXRoZXIgZGVuc2l0eSBzaG91bGQgYmUgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQuXG4kX21hdC10aGVtZS1nZW5lcmF0ZS1kZWZhdWx0LWRlbnNpdHk6IHRydWUgIWRlZmF1bHQ7XG5cbi8vIEZvciBhIGdpdmVuIGh1ZSBpbiBhIHBhbGV0dGUsIHJldHVybiB0aGUgY29udHJhc3QgY29sb3IgZnJvbSB0aGUgbWFwIG9mIGNvbnRyYXN0IHBhbGV0dGVzLlxuLy8gQHBhcmFtICRjb2xvci1tYXBcbi8vIEBwYXJhbSAkaHVlXG5AZnVuY3Rpb24gbWF0LWNvbnRyYXN0KCRwYWxldHRlLCAkaHVlKSB7XG4gIEByZXR1cm4gbWFwLWdldChtYXAtZ2V0KCRwYWxldHRlLCBjb250cmFzdCksICRodWUpO1xufVxuXG5cbi8vIENyZWF0ZXMgYSBtYXAgb2YgaHVlcyB0byBjb2xvcnMgZm9yIGEgdGhlbWUuIFRoaXMgaXMgdXNlZCB0byBkZWZpbmUgYSB0aGVtZSBwYWxldHRlIGluIHRlcm1zXG4vLyBvZiB0aGUgTWF0ZXJpYWwgRGVzaWduIGh1ZXMuXG4vLyBAcGFyYW0gJGNvbG9yLW1hcFxuLy8gQHBhcmFtICRwcmltYXJ5XG4vLyBAcGFyYW0gJGxpZ2h0ZXJcbkBmdW5jdGlvbiBtYXQtcGFsZXR0ZSgkYmFzZS1wYWxldHRlLCAkZGVmYXVsdDogNTAwLCAkbGlnaHRlcjogMTAwLCAkZGFya2VyOiA3MDAsICR0ZXh0OiAkZGVmYXVsdCkge1xuICAkcmVzdWx0OiBtYXBfbWVyZ2UoJGJhc2UtcGFsZXR0ZSwgKFxuICAgIGRlZmF1bHQ6IG1hcC1nZXQoJGJhc2UtcGFsZXR0ZSwgJGRlZmF1bHQpLFxuICAgIGxpZ2h0ZXI6IG1hcC1nZXQoJGJhc2UtcGFsZXR0ZSwgJGxpZ2h0ZXIpLFxuICAgIGRhcmtlcjogbWFwLWdldCgkYmFzZS1wYWxldHRlLCAkZGFya2VyKSxcbiAgICB0ZXh0OiBtYXAtZ2V0KCRiYXNlLXBhbGV0dGUsICR0ZXh0KSxcblxuICAgIGRlZmF1bHQtY29udHJhc3Q6IG1hdC1jb250cmFzdCgkYmFzZS1wYWxldHRlLCAkZGVmYXVsdCksXG4gICAgbGlnaHRlci1jb250cmFzdDogbWF0LWNvbnRyYXN0KCRiYXNlLXBhbGV0dGUsICRsaWdodGVyKSxcbiAgICBkYXJrZXItY29udHJhc3Q6IG1hdC1jb250cmFzdCgkYmFzZS1wYWxldHRlLCAkZGFya2VyKVxuICApKTtcblxuICAvLyBGb3IgZWFjaCBodWUgaW4gdGhlIHBhbGV0dGUsIGFkZCBhIFwiLWNvbnRyYXN0XCIgY29sb3IgdG8gdGhlIG1hcC5cbiAgQGVhY2ggJGh1ZSwgJGNvbG9yIGluICRiYXNlLXBhbGV0dGUge1xuICAgICRyZXN1bHQ6IG1hcF9tZXJnZSgkcmVzdWx0LCAoXG4gICAgICAnI3skaHVlfS1jb250cmFzdCc6IG1hdC1jb250cmFzdCgkYmFzZS1wYWxldHRlLCAkaHVlKVxuICAgICkpO1xuICB9XG5cbiAgQHJldHVybiAkcmVzdWx0O1xufVxuXG5cbi8vIEdldHMgYSBjb2xvciBmcm9tIGEgdGhlbWUgcGFsZXR0ZSAodGhlIG91dHB1dCBvZiBtYXQtcGFsZXR0ZSkuXG4vLyBUaGUgaHVlIGNhbiBiZSBvbmUgb2YgdGhlIHN0YW5kYXJkIHZhbHVlcyAoNTAwLCBBNDAwLCBldGMuKSwgb25lIG9mIHRoZSB0aHJlZSBwcmVjb25maWd1cmVkXG4vLyBodWVzIChkZWZhdWx0LCBsaWdodGVyLCBkYXJrZXIpLCBvciBhbnkgb2YgdGhlIGFmb3JlbWVudGlvbmVkIHByZWZpeGVkIHdpdGggXCItY29udHJhc3RcIi5cbi8vXG4vLyBAcGFyYW0gJGNvbG9yLW1hcCBUaGUgdGhlbWUgcGFsZXR0ZSAob3V0cHV0IG9mIG1hdC1wYWxldHRlKS5cbi8vIEBwYXJhbSAkaHVlIFRoZSBodWUgZnJvbSB0aGUgcGFsZXR0ZSB0byB1c2UuIElmIHRoaXMgaXMgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIGl0IHdpbGxcbi8vICAgICBiZSB0cmVhdGVkIGFzIG9wYWNpdHkuXG4vLyBAcGFyYW0gJG9wYWNpdHkgVGhlIGFscGhhIGNoYW5uZWwgdmFsdWUgZm9yIHRoZSBjb2xvci5cbkBmdW5jdGlvbiBtYXQtY29sb3IoJHBhbGV0dGUsICRodWU6IGRlZmF1bHQsICRvcGFjaXR5OiBudWxsKSB7XG4gIC8vIElmIGh1ZUtleSBpcyBhIG51bWJlciBiZXR3ZWVuIHplcm8gYW5kIG9uZSwgdGhlbiBpdCBhY3R1YWxseSBjb250YWlucyBhblxuICAvLyBvcGFjaXR5IHZhbHVlLCBzbyByZWNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIHRoZSBkZWZhdWx0IGh1ZSBhbmQgdGhhdCBnaXZlbiBvcGFjaXR5LlxuICBAaWYgdHlwZS1vZigkaHVlKSA9PSBudW1iZXIgYW5kICRodWUgPj0gMCBhbmQgJGh1ZSA8PSAxIHtcbiAgICBAcmV0dXJuIG1hdC1jb2xvcigkcGFsZXR0ZSwgZGVmYXVsdCwgJGh1ZSk7XG4gIH1cblxuICAkY29sb3I6IG1hcC1nZXQoJHBhbGV0dGUsICRodWUpO1xuXG4gIEBpZiAodHlwZS1vZigkY29sb3IpICE9IGNvbG9yKSB7XG4gICAgLy8gSWYgdGhlICRjb2xvciByZXNvbHZlZCB0byBzb21ldGhpbmcgZGlmZmVyZW50IGZyb20gYSBjb2xvciAoZS5nLiBhIENTUyB2YXJpYWJsZSksXG4gICAgLy8gd2UgY2FuJ3QgYXBwbHkgdGhlIG9wYWNpdHkgYW55d2F5IHNvIHdlIHJldHVybiB0aGUgdmFsdWUgYXMgaXMsIG90aGVyd2lzZSBTYXNzIGNhblxuICAgIC8vIHRocm93IGFuIGVycm9yIG9yIG91dHB1dCBzb21ldGhpbmcgaW52YWxpZC5cbiAgICBAcmV0dXJuICRjb2xvcjtcbiAgfVxuXG4gIEByZXR1cm4gcmdiYSgkY29sb3IsIGlmKCRvcGFjaXR5ID09IG51bGwsIG9wYWNpdHkoJGNvbG9yKSwgJG9wYWNpdHkpKTtcbn1cblxuLy8gVmFsaWRhdGVzIHRoZSBzcGVjaWZpZWQgdGhlbWUgYnkgZW5zdXJpbmcgdGhhdCB0aGUgb3B0aW9uYWwgY29sb3IgY29uZmlnIGRlZmluZXNcbi8vIGEgcHJpbWFyeSwgYWNjZW50IGFuZCB3YXJuIHBhbGV0dGUuIFJldHVybnMgdGhlIHRoZW1lIGlmIG5vIGZhaWx1cmVzIHdlcmUgZm91bmQuXG5AZnVuY3Rpb24gX21hdC12YWxpZGF0ZS10aGVtZSgkdGhlbWUpIHtcbiAgQGlmIG1hcF9nZXQoJHRoZW1lLCBjb2xvcikge1xuICAgICRjb2xvcjogbWFwX2dldCgkdGhlbWUsIGNvbG9yKTtcbiAgICBAaWYgbm90IG1hcF9nZXQoJGNvbG9yLCBwcmltYXJ5KSB7XG4gICAgICBAZXJyb3IgJ1RoZW1lIGRvZXMgbm90IGRlZmluZSBhIHZhbGlkIFwicHJpbWFyeVwiIHBhbGV0dGUuJztcbiAgICB9XG4gICAgQGVsc2UgaWYgbm90IG1hcF9nZXQoJGNvbG9yLCBhY2NlbnQpIHtcbiAgICAgIEBlcnJvciAnVGhlbWUgZG9lcyBub3QgZGVmaW5lIGEgdmFsaWQgXCJhY2NlbnRcIiBwYWxldHRlLic7XG4gICAgfVxuICAgIEBlbHNlIGlmIG5vdCBtYXBfZ2V0KCRjb2xvciwgd2Fybikge1xuICAgICAgQGVycm9yICdUaGVtZSBkb2VzIG5vdCBkZWZpbmUgYSB2YWxpZCBcIndhcm5cIiBwYWxldHRlLic7XG4gICAgfVxuICB9XG4gIEByZXR1cm4gJHRoZW1lO1xufVxuXG4vLyBDcmVhdGVzIGEgYmFja3dhcmRzIGNvbXBhdGlibGUgdGhlbWUuIFByZXZpb3VzbHkgaW4gQW5ndWxhciBNYXRlcmlhbCwgdGhlbWUgb2JqZWN0c1xuLy8gY29udGFpbmVkIHRoZSBjb2xvciBjb25maWd1cmF0aW9uIGRpcmVjdGx5LiBXaXRoIHRoZSByZWNlbnQgcmVmYWN0b3Jpbmcgb2YgdGhlIHRoZW1pbmdcbi8vIHN5c3RlbSB0byBhbGxvdyBmb3IgZGVuc2l0eSBhbmQgdHlwb2dyYXBoeSBjb25maWd1cmF0aW9ucywgdGhpcyBpcyBubyBsb25nZXIgdGhlIGNhc2UuXG4vLyBUbyBlbnN1cmUgdGhhdCBjb25zdHJ1Y3RlZCB0aGVtZXMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gY3VzdG9tIHRoZW1lIG1peGlucyBkbyBub3QgYnJlYWssXG4vLyB3ZSBjb3B5IHRoZSBjb2xvciBjb25maWd1cmF0aW9uIGFuZCBwdXQgaXRzIHByb3BlcnRpZXMgYXQgdGhlIHRvcC1sZXZlbCBvZiB0aGUgdGhlbWUgb2JqZWN0LlxuLy8gSGVyZSBpcyBhbiBleGFtcGxlIG9mIGEgcGF0dGVybiB0aGF0IHNob3VsZCBzdGlsbCB3b3JrIHVudGlsIGl0J3Mgb2ZmaWNpYWxseSBtYXJrZWQgYXMgYVxuLy8gYnJlYWtpbmcgY2hhbmdlOlxuLy9cbi8vICAgIEBtaXhpbiBteS1jdXN0b20tY29tcG9uZW50LXRoZW1lKCR0aGVtZSkge1xuLy8gICAgICAubXktY29tcCB7XG4vLyAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKG1hcF9nZXQoJHRoZW1lLCBwcmltYXJ5KSk7XG4vLyAgICAgIH1cbi8vICAgIH1cbi8vXG4vLyBOb3RlIHRoYXQgdGhlIGAkdGhlbWUucHJpbWFyeWAga2V5IGRvZXMgdXN1YWxseSBub3QgZXhpc3Qgc2luY2UgdGhlIGNvbG9yIGNvbmZpZ3VyYXRpb25cbi8vIGlzIHN0b3JlZCBpbiBgJHRoZW1lLmNvbG9yYCB3aGljaCBjb250YWlucyBhIHByb3BlcnR5IGZvciBgcHJpbWFyeWAuIFRoaXMgbWV0aG9kIGNvcGllc1xuLy8gdGhlIG1hcCBmcm9tIGAkdGhlbWUuY29sb3JgIHRvIGAkdGhlbWVgIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbkBmdW5jdGlvbiBfbWF0LWNyZWF0ZS1iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS10aGVtZSgkdGhlbWUpIHtcbiAgQGlmIG5vdCBtYXBfZ2V0KCR0aGVtZSwgY29sb3IpIHtcbiAgICBAcmV0dXJuICR0aGVtZTtcbiAgfVxuICAkY29sb3I6IG1hcF9nZXQoJHRoZW1lLCBjb2xvcik7XG4gIEByZXR1cm4gbWFwX21lcmdlKCR0aGVtZSwgJGNvbG9yKTtcbn1cblxuLy8gQ3JlYXRlcyBhIGxpZ2h0LXRoZW1lZCBjb2xvciBjb25maWd1cmF0aW9uIGZyb20gdGhlIHNwZWNpZmllZFxuLy8gcHJpbWFyeSwgYWNjZW50IGFuZCB3YXJuIHBhbGV0dGVzLlxuQGZ1bmN0aW9uIF9tYXQtY3JlYXRlLWxpZ2h0LWNvbG9yLWNvbmZpZygkcHJpbWFyeSwgJGFjY2VudCwgJHdhcm46IG51bGwpIHtcbiAgQHJldHVybiAoXG4gICAgcHJpbWFyeTogJHByaW1hcnksXG4gICAgYWNjZW50OiAkYWNjZW50LFxuICAgIHdhcm46IGlmKCR3YXJuICE9IG51bGwsICR3YXJuLCBtYXQtcGFsZXR0ZSgkbWF0LXJlZCkpLFxuICAgIGlzLWRhcms6IGZhbHNlLFxuICAgIGZvcmVncm91bmQ6ICRtYXQtbGlnaHQtdGhlbWUtZm9yZWdyb3VuZCxcbiAgICBiYWNrZ3JvdW5kOiAkbWF0LWxpZ2h0LXRoZW1lLWJhY2tncm91bmQsXG4gICk7XG59XG5cbi8vIENyZWF0ZXMgYSBkYXJrLXRoZW1lZCBjb2xvciBjb25maWd1cmF0aW9uIGZyb20gdGhlIHNwZWNpZmllZFxuLy8gcHJpbWFyeSwgYWNjZW50IGFuZCB3YXJuIHBhbGV0dGVzLlxuQGZ1bmN0aW9uIF9tYXQtY3JlYXRlLWRhcmstY29sb3ItY29uZmlnKCRwcmltYXJ5LCAkYWNjZW50LCAkd2FybjogbnVsbCkge1xuICBAcmV0dXJuIChcbiAgICBwcmltYXJ5OiAkcHJpbWFyeSxcbiAgICBhY2NlbnQ6ICRhY2NlbnQsXG4gICAgd2FybjogaWYoJHdhcm4gIT0gbnVsbCwgJHdhcm4sIG1hdC1wYWxldHRlKCRtYXQtcmVkKSksXG4gICAgaXMtZGFyazogdHJ1ZSxcbiAgICBmb3JlZ3JvdW5kOiAkbWF0LWRhcmstdGhlbWUtZm9yZWdyb3VuZCxcbiAgICBiYWNrZ3JvdW5kOiAkbWF0LWRhcmstdGhlbWUtYmFja2dyb3VuZCxcbiAgKTtcbn1cblxuLy8gQ3JlYXRlcyBhIGNvbnRhaW5lciBvYmplY3QgZm9yIGEgbGlnaHQgdGhlbWUgdG8gYmUgZ2l2ZW4gdG8gaW5kaXZpZHVhbCBjb21wb25lbnQgdGhlbWUgbWl4aW5zLlxuLy8gVE9ETzogUmVtb3ZlIGxlZ2FjeSBBUEkgYW5kIHJlbmFtZSBgJHByaW1hcnlgIHRvIGAkY29uZmlnYC4gQ3VycmVudGx5IGl0IGNhbm5vdCBiZSByZW5hbWVkXG4vLyBhcyBpdCB3b3VsZCBicmVhayBleGlzdGluZyBhcHBzIHRoYXQgc2V0IHRoZSBwYXJhbWV0ZXIgYnkgbmFtZS5cbkBmdW5jdGlvbiBtYXQtbGlnaHQtdGhlbWUoJHByaW1hcnksICRhY2NlbnQ6IG51bGwsICR3YXJuOiBtYXQtcGFsZXR0ZSgkbWF0LXJlZCkpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgY29udGFpbmVyIG9iamVjdCBmb3IgdGhlIGluZGl2aWR1YWwgY29tcG9uZW50IHRoZW1lIG1peGlucy4gQ29uc3VtZXJzXG4gIC8vIGNhbiBjb25zdHJ1Y3Qgc3VjaCBhbiBvYmplY3QgYnkgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBvciBieSBidWlsZGluZyB0aGUgb2JqZWN0IG1hbnVhbGx5LlxuICAvLyBUaGVyZSBhcmUgdHdvIHBvc3NpYmxlIHdheXMgdG8gaW52b2tlIHRoaXMgZnVuY3Rpb24gaW4gb3JkZXIgdG8gY3JlYXRlIHN1Y2ggYW4gb2JqZWN0OlxuICAvL1xuICAvLyAgICAoMSkgUGFzc2luZyBpbiBhIG1hcCB0aGF0IGhvbGRzIG9wdGlvbmFsIGNvbmZpZ3VyYXRpb25zIGZvciBpbmRpdmlkdWFsIHBhcnRzIG9mIHRoZVxuICAvLyAgICAgICAgdGhlbWluZyBzeXN0ZW0uIEZvciBgY29sb3JgIGNvbmZpZ3VyYXRpb25zLCB0aGUgZnVuY3Rpb24gb25seSBleHBlY3RzIHRoZSBwYWxldHRlc1xuICAvLyAgICAgICAgZm9yIGBwcmltYXJ5YCBhbmQgYGFjY2VudGAgKGFuZCBvcHRpb25hbGx5IGB3YXJuYCkuIFRoZSBmdW5jdGlvbiB3aWxsIGV4cGFuZCB0aGVcbiAgLy8gICAgICAgIHNob3J0aGFuZCBpbnRvIGFuIGFjdHVhbCBjb25maWd1cmF0aW9uIHRoYXQgY2FuIGJlIGNvbnN1bWVkIGluIGAtY29sb3JgIG1peGlucy5cbiAgLy8gICAgKDIpIExlZ2FjeSBwYXR0ZXJuOiBQYXNzaW5nIGluIHRoZSBwYWxldHRlcyBhcyBwYXJhbWV0ZXJzLiBUaGlzIGlzIG5vdCBhcyBmbGV4aWJsZVxuICAvLyAgICAgICAgYXMgcGFzc2luZyBpbiBhIGNvbmZpZ3VyYXRpb24gbWFwIGJlY2F1c2Ugb25seSB0aGUgYGNvbG9yYCBzeXN0ZW0gY2FuIGJlIGNvbmZpZ3VyZWQuXG4gIC8vXG4gIC8vIElmIHRoZSBsZWdhY3kgcGF0dGVybiBpcyB1c2VkLCB3ZSBnZW5lcmF0ZSBhIGNvbnRhaW5lciBvYmplY3Qgb25seSB3aXRoIGEgbGlnaHQtdGhlbWVkXG4gIC8vIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBgY29sb3JgIHRoZW1pbmcgcGFydC5cbiAgQGlmICRhY2NlbnQgIT0gbnVsbCB7XG4gICAgQHJldHVybiBfbWF0LWNyZWF0ZS1iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS10aGVtZShfbWF0LXZhbGlkYXRlLXRoZW1lKChcbiAgICAgIF9pcy1sZWdhY3ktdGhlbWU6IHRydWUsXG4gICAgICBjb2xvcjogX21hdC1jcmVhdGUtbGlnaHQtY29sb3ItY29uZmlnKCRwcmltYXJ5LCAkYWNjZW50LCAkd2FybiksXG4gICAgKSkpO1xuICB9XG4gIC8vIElmIHRoZSBtYXAgcGF0dGVybiBpcyB1c2VkICgxKSwgd2UganVzdCBwYXNzLXRocm91Z2ggdGhlIGNvbmZpZ3VyYXRpb25zIGZvciBpbmRpdmlkdWFsXG4gIC8vIHBhcnRzIG9mIHRoZSB0aGVtaW5nIHN5c3RlbSwgYnV0IHVwZGF0ZSB0aGUgYGNvbG9yYCBjb25maWd1cmF0aW9uIGlmIHNldC4gQXMgZXhwbGFpbmVkXG4gIC8vIGFib3ZlLCB0aGUgY29sb3Igc2hvcnRoYW5kIHdpbGwgYmUgZXhwYW5kZWQgdG8gYW4gYWN0dWFsIGxpZ2h0LXRoZW1lZCBjb2xvciBjb25maWd1cmF0aW9uLlxuICAkcmVzdWx0OiAkcHJpbWFyeTtcbiAgQGlmIG1hcF9nZXQoJHByaW1hcnksIGNvbG9yKSB7XG4gICAgJGNvbG9yLXNldHRpbmdzOiBtYXBfZ2V0KCRwcmltYXJ5LCBjb2xvcik7XG4gICAgJHByaW1hcnk6IG1hcF9nZXQoJGNvbG9yLXNldHRpbmdzLCBwcmltYXJ5KTtcbiAgICAkYWNjZW50OiBtYXBfZ2V0KCRjb2xvci1zZXR0aW5ncywgYWNjZW50KTtcbiAgICAkd2FybjogbWFwX2dldCgkY29sb3Itc2V0dGluZ3MsIHdhcm4pO1xuICAgICRyZXN1bHQ6IG1hcF9tZXJnZSgkcmVzdWx0LCAoY29sb3I6IF9tYXQtY3JlYXRlLWxpZ2h0LWNvbG9yLWNvbmZpZygkcHJpbWFyeSwgJGFjY2VudCwgJHdhcm4pKSk7XG4gIH1cbiAgQHJldHVybiBfbWF0LWNyZWF0ZS1iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS10aGVtZShfbWF0LXZhbGlkYXRlLXRoZW1lKCRyZXN1bHQpKTtcbn1cblxuLy8gQ3JlYXRlcyBhIGNvbnRhaW5lciBvYmplY3QgZm9yIGEgZGFyayB0aGVtZSB0byBiZSBnaXZlbiB0byBpbmRpdmlkdWFsIGNvbXBvbmVudCB0aGVtZSBtaXhpbnMuXG4vLyBUT0RPOiBSZW1vdmUgbGVnYWN5IEFQSSBhbmQgcmVuYW1lIGAkcHJpbWFyeWAgdG8gYCRjb25maWdgLiBDdXJyZW50bHkgaXQgY2Fubm90IGJlIHJlbmFtZWRcbi8vIGFzIGl0IHdvdWxkIGJyZWFrIGV4aXN0aW5nIGFwcHMgdGhhdCBzZXQgdGhlIHBhcmFtZXRlciBieSBuYW1lLlxuQGZ1bmN0aW9uIG1hdC1kYXJrLXRoZW1lKCRwcmltYXJ5LCAkYWNjZW50OiBudWxsLCAkd2FybjogbWF0LXBhbGV0dGUoJG1hdC1yZWQpKSB7XG4gIC8vIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGNvbnRhaW5lciBvYmplY3QgZm9yIHRoZSBpbmRpdmlkdWFsIGNvbXBvbmVudCB0aGVtZSBtaXhpbnMuIENvbnN1bWVyc1xuICAvLyBjYW4gY29uc3RydWN0IHN1Y2ggYW4gb2JqZWN0IGJ5IGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgb3IgYnkgYnVpbGRpbmcgdGhlIG9iamVjdCBtYW51YWxseS5cbiAgLy8gVGhlcmUgYXJlIHR3byBwb3NzaWJsZSB3YXlzIHRvIGludm9rZSB0aGlzIGZ1bmN0aW9uIGluIG9yZGVyIHRvIGNyZWF0ZSBzdWNoIGFuIG9iamVjdDpcbiAgLy9cbiAgLy8gICAgKDEpIFBhc3NpbmcgaW4gYSBtYXAgdGhhdCBob2xkcyBvcHRpb25hbCBjb25maWd1cmF0aW9ucyBmb3IgaW5kaXZpZHVhbCBwYXJ0cyBvZiB0aGVcbiAgLy8gICAgICAgIHRoZW1pbmcgc3lzdGVtLiBGb3IgYGNvbG9yYCBjb25maWd1cmF0aW9ucywgdGhlIGZ1bmN0aW9uIG9ubHkgZXhwZWN0cyB0aGUgcGFsZXR0ZXNcbiAgLy8gICAgICAgIGZvciBgcHJpbWFyeWAgYW5kIGBhY2NlbnRgIChhbmQgb3B0aW9uYWxseSBgd2FybmApLiBUaGUgZnVuY3Rpb24gd2lsbCBleHBhbmQgdGhlXG4gIC8vICAgICAgICBzaG9ydGhhbmQgaW50byBhbiBhY3R1YWwgY29uZmlndXJhdGlvbiB0aGF0IGNhbiBiZSBjb25zdW1lZCBpbiBgLWNvbG9yYCBtaXhpbnMuXG4gIC8vICAgICgyKSBMZWdhY3kgcGF0dGVybjogUGFzc2luZyBpbiB0aGUgcGFsZXR0ZXMgYXMgcGFyYW1ldGVycy4gVGhpcyBpcyBub3QgYXMgZmxleGlibGVcbiAgLy8gICAgICAgIGFzIHBhc3NpbmcgaW4gYSBjb25maWd1cmF0aW9uIG1hcCBiZWNhdXNlIG9ubHkgdGhlIGBjb2xvcmAgc3lzdGVtIGNhbiBiZSBjb25maWd1cmVkLlxuICAvL1xuICAvLyBJZiB0aGUgbGVnYWN5IHBhdHRlcm4gaXMgdXNlZCwgd2UgZ2VuZXJhdGUgYSBjb250YWluZXIgb2JqZWN0IG9ubHkgd2l0aCBhIGRhcmstdGhlbWVkXG4gIC8vIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBgY29sb3JgIHRoZW1pbmcgcGFydC5cbiAgQGlmICRhY2NlbnQgIT0gbnVsbCB7XG4gICAgQHJldHVybiBfbWF0LWNyZWF0ZS1iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS10aGVtZShfbWF0LXZhbGlkYXRlLXRoZW1lKChcbiAgICAgIF9pcy1sZWdhY3ktdGhlbWU6IHRydWUsXG4gICAgICBjb2xvcjogX21hdC1jcmVhdGUtZGFyay1jb2xvci1jb25maWcoJHByaW1hcnksICRhY2NlbnQsICR3YXJuKSxcbiAgICApKSk7XG4gIH1cbiAgLy8gSWYgdGhlIG1hcCBwYXR0ZXJuIGlzIHVzZWQgKDEpLCB3ZSBqdXN0IHBhc3MtdGhyb3VnaCB0aGUgY29uZmlndXJhdGlvbnMgZm9yIGluZGl2aWR1YWxcbiAgLy8gcGFydHMgb2YgdGhlIHRoZW1pbmcgc3lzdGVtLCBidXQgdXBkYXRlIHRoZSBgY29sb3JgIGNvbmZpZ3VyYXRpb24gaWYgc2V0LiBBcyBleHBsYWluZWRcbiAgLy8gYWJvdmUsIHRoZSBjb2xvciBzaG9ydGhhbmQgd2lsbCBiZSBleHBhbmRlZCB0byBhbiBhY3R1YWwgZGFyay10aGVtZWQgY29sb3IgY29uZmlndXJhdGlvbi5cbiAgJHJlc3VsdDogJHByaW1hcnk7XG4gIEBpZiBtYXBfZ2V0KCRwcmltYXJ5LCBjb2xvcikge1xuICAgICRjb2xvci1zZXR0aW5nczogbWFwX2dldCgkcHJpbWFyeSwgY29sb3IpO1xuICAgICRwcmltYXJ5OiBtYXBfZ2V0KCRjb2xvci1zZXR0aW5ncywgcHJpbWFyeSk7XG4gICAgJGFjY2VudDogbWFwX2dldCgkY29sb3Itc2V0dGluZ3MsIGFjY2VudCk7XG4gICAgJHdhcm46IG1hcF9nZXQoJGNvbG9yLXNldHRpbmdzLCB3YXJuKTtcbiAgICAkcmVzdWx0OiBtYXBfbWVyZ2UoJHJlc3VsdCwgKGNvbG9yOiBfbWF0LWNyZWF0ZS1kYXJrLWNvbG9yLWNvbmZpZygkcHJpbWFyeSwgJGFjY2VudCwgJHdhcm4pKSk7XG4gIH1cbiAgQHJldHVybiBfbWF0LWNyZWF0ZS1iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS10aGVtZShfbWF0LXZhbGlkYXRlLXRoZW1lKCRyZXN1bHQpKTtcbn1cblxuLy8vIEdldHMgdGhlIGNvbG9yIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgZ2l2ZW4gdGhlbWUgb3IgY29uZmlndXJhdGlvbi5cbkBmdW5jdGlvbiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUsICRkZWZhdWx0OiBudWxsKSB7XG4gIC8vIElmIGEgY29uZmlndXJhdGlvbiBoYXMgYmVlbiBwYXNzZWQsIHJldHVybiB0aGUgY29uZmlnIGRpcmVjdGx5LlxuICBAaWYgbm90IF9tYXQtaXMtdGhlbWUtb2JqZWN0KCR0aGVtZSkge1xuICAgIEByZXR1cm4gJHRoZW1lO1xuICB9XG4gIC8vIElmIHRoZSB0aGVtZSBoYXMgYmVlbiBjb25zdHJ1Y3RlZCB0aHJvdWdoIHRoZSBsZWdhY3kgdGhlbWluZyBBUEksIHdlIHVzZSB0aGUgdGhlbWUgb2JqZWN0XG4gIC8vIGFzIGNvbG9yIGNvbmZpZ3VyYXRpb24gaW5zdGVhZCBvZiB0aGUgZGVkaWNhdGVkIGBjb2xvcmAgcHJvcGVydHkuIFdlIGRvIHRoaXMgYmVjYXVzZSBmb3JcbiAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIGNvcGllZCB0aGUgY29sb3IgY29uZmlndXJhdGlvbiBmcm9tIGAkdGhlbWUuY29sb3JgIHRvIGAkdGhlbWVgLlxuICAvLyBIZW5jZSBkZXZlbG9wZXJzIGNvdWxkIGN1c3RvbWl6ZSB0aGUgY29sb3JzIGF0IHRvcC1sZXZlbCBhbmQgd2FudCB0byByZXNwZWN0IHRoZXNlIGNoYW5nZXNcbiAgLy8gVE9ETzogUmVtb3ZlIHdoZW4gbGVnYWN5IHRoZW1pbmcgQVBJIGlzIHJlbW92ZWQuXG4gIEBpZiBfbWF0LWlzLWxlZ2FjeS1jb25zdHJ1Y3RlZC10aGVtZSgkdGhlbWUpIHtcbiAgICBAcmV0dXJuICR0aGVtZTtcbiAgfVxuICBAaWYgbWFwX2hhc19rZXkoJHRoZW1lLCBjb2xvcikge1xuICAgIEByZXR1cm4gbWFwX2dldCgkdGhlbWUsIGNvbG9yKTtcbiAgfVxuICBAcmV0dXJuICRkZWZhdWx0O1xufVxuXG4vLy8gR2V0cyB0aGUgZGVuc2l0eSBjb25maWd1cmF0aW9uIGZyb20gdGhlIGdpdmVuIHRoZW1lIG9yIGNvbmZpZ3VyYXRpb24uXG5AZnVuY3Rpb24gbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUtb3ItY29uZmlnLCAkZGVmYXVsdDogMCkge1xuICAvLyBJZiBhIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gcGFzc2VkLCByZXR1cm4gdGhlIGNvbmZpZyBkaXJlY3RseS5cbiAgQGlmIG5vdCBfbWF0LWlzLXRoZW1lLW9iamVjdCgkdGhlbWUtb3ItY29uZmlnKSB7XG4gICAgQHJldHVybiAkdGhlbWUtb3ItY29uZmlnO1xuICB9XG4gIC8vIEluIGNhc2UgYSB0aGVtZSBoYXMgYmVlbiBwYXNzZWQsIGV4dHJhY3QgdGhlIGNvbmZpZ3VyYXRpb24gaWYgcHJlc2VudCxcbiAgLy8gb3IgZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGRlbnNpdHkgY29uZmlnLlxuICBAaWYgbWFwX2hhc19rZXkoJHRoZW1lLW9yLWNvbmZpZywgZGVuc2l0eSkge1xuICAgIEByZXR1cm4gbWFwX2dldCgkdGhlbWUtb3ItY29uZmlnLCBkZW5zaXR5KTtcbiAgfVxuICBAcmV0dXJuICRkZWZhdWx0O1xufVxuXG4vLy8gR2V0cyB0aGUgdHlwb2dyYXBoeSBjb25maWd1cmF0aW9uIGZyb20gdGhlIGdpdmVuIHRoZW1lIG9yIGNvbmZpZ3VyYXRpb24uXG4vLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB0eXBvZ3JhcGh5IGlzIG5vdCBpbmNsdWRlZCBieSBkZWZhdWx0LlxuQGZ1bmN0aW9uIG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lLW9yLWNvbmZpZywgJGRlZmF1bHQ6IG51bGwpIHtcbiAgLy8gSWYgYSBjb25maWd1cmF0aW9uIGhhcyBiZWVuIHBhc3NlZCwgcmV0dXJuIHRoZSBjb25maWcgZGlyZWN0bHkuXG4gIEBpZiBub3QgX21hdC1pcy10aGVtZS1vYmplY3QoJHRoZW1lLW9yLWNvbmZpZykge1xuICAgIEByZXR1cm4gJHRoZW1lLW9yLWNvbmZpZztcbiAgfVxuICAvLyBJbiBjYXNlIGEgdGhlbWUgaGFzIGJlZW4gcGFzc2VkLCBleHRyYWN0IHRoZSBjb25maWd1cmF0aW9uIGlmIHByZXNlbnQsXG4gIC8vIG9yIGZhbGwgYmFjayB0byB0aGUgZGVmYXVsdCB0eXBvZ3JhcGh5IGNvbmZpZy5cbiAgQGlmIChtYXBfaGFzX2tleSgkdGhlbWUtb3ItY29uZmlnLCB0eXBvZ3JhcGh5KSkge1xuICAgIEByZXR1cm4gbWFwX2dldCgkdGhlbWUtb3ItY29uZmlnLCB0eXBvZ3JhcGh5KTtcbiAgfVxuICBAcmV0dXJuICRkZWZhdWx0O1xufVxuXG4vLyBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgcmVzb2x2ZXMgdG8gYSB0aGVtZSBvYmplY3QuIFRoZW1lIG9iamVjdHMgYXJlIGFsd2F5c1xuLy8gb2YgdHlwZSBgbWFwYCBhbmQgY2FuIG9wdGlvbmFsbHkgb25seSBzcGVjaWZ5IGBjb2xvcmAsIGBkZW5zaXR5YCBvciBgdHlwb2dyYXBoeWAuXG5AZnVuY3Rpb24gX21hdC1pcy10aGVtZS1vYmplY3QoJHZhbHVlKSB7XG4gIEByZXR1cm4gdHlwZS1vZigkdmFsdWUpID09ICdtYXAnIGFuZCAoXG4gICAgbWFwX2hhc19rZXkoJHZhbHVlLCBjb2xvcikgb3JcbiAgICBtYXBfaGFzX2tleSgkdmFsdWUsIGRlbnNpdHkpIG9yXG4gICAgbWFwX2hhc19rZXkoJHZhbHVlLCB0eXBvZ3JhcGh5KSBvclxuICAgIGxlbmd0aCgkdmFsdWUpID09IDBcbiAgKTtcbn1cblxuLy8gQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiB2YWx1ZSBjb3JyZXNwb25kcyB0byBhIGxlZ2FjeSBjb25zdHJ1Y3RlZCB0aGVtZS5cbkBmdW5jdGlvbiBfbWF0LWlzLWxlZ2FjeS1jb25zdHJ1Y3RlZC10aGVtZSgkdmFsdWUpIHtcbiAgQHJldHVybiB0eXBlLW9mKCR2YWx1ZSkgPT0gJ21hcCcgYW5kIG1hcF9nZXQoJHZhbHVlLCAnX2lzLWxlZ2FjeS10aGVtZScpO1xufVxuXG4vLyBHZXRzIHRoZSB0aGVtZSBmcm9tIHRoZSBnaXZlbiB2YWx1ZSB0aGF0IGlzIGVpdGhlciBhbHJlYWR5IGEgdGhlbWUsIG9yIGEgY29sb3IgY29uZmlndXJhdGlvbi5cbi8vIFRoaXMgaGFuZGxlcyB0aGUgbGVnYWN5IGNhc2Ugd2hlcmUgZGV2ZWxvcGVycyBwYXNzIGEgY29sb3IgY29uZmlndXJhdGlvbiBkaXJlY3RseSB0byB0aGVcbi8vIHRoZW1lIG1peGluLiBCZWZvcmUgd2UgaW50cm9kdWNlZCB0aGUgbmV3IHBhdHRlcm4gZm9yIGNvbnN0cnVjdGluZyBhIHRoZW1lLCBkZXZlbG9wZXJzIHBhc3NlZFxuLy8gdGhlIGNvbG9yIGNvbmZpZ3VyYXRpb24gZGlyZWN0bHkgdG8gdGhlIHRoZW1lIG1peGlucy4gVGhpcyBjYW4gYmUgc3RpbGwgdGhlIGNhc2UgaWYgZGV2ZWxvcGVyc1xuLy8gY29uc3RydWN0IGEgdGhlbWUgbWFudWFsbHkgYW5kIHBhc3MgaXQgdG8gYSB0aGVtZS4gV2Ugc3VwcG9ydCB0aGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbi8vIFRPRE8oZGV2dmVyc2lvbik6IHJlbW92ZSB0aGlzIGluIHRoZSBmdXR1cmUuIENvbnN0cnVjdGluZyB0aGVtZXMgbWFudWFsbHkgaXMgcmFyZSxcbi8vIGFuZCB0aGUgY29kZSBjYW4gYmUgZWFzaWx5IHVwZGF0ZWQgdG8gdGhlIG5ldyBBUEkuXG5AZnVuY3Rpb24gX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgQGlmIF9tYXQtaXMtdGhlbWUtb2JqZWN0KCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgICBAcmV0dXJuICR0aGVtZS1vci1jb2xvci1jb25maWc7XG4gIH1cbiAgQHJldHVybiBfbWF0LWNyZWF0ZS1iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS10aGVtZSgoXG4gICAgX2lzLWxlZ2FjeS10aGVtZTogdHJ1ZSxcbiAgICBjb2xvcjogJHRoZW1lLW9yLWNvbG9yLWNvbmZpZ1xuICApKTtcbn1cblxuXG5cbi8vIFdoZXRoZXIgZHVwbGljYXRpb24gd2FybmluZ3Mgc2hvdWxkIGJlIGRpc2FibGVkLiBXYXJuaW5ncyBlbmFibGVkIGJ5IGRlZmF1bHQuXG4kbWF0LXRoZW1lLWlnbm9yZS1kdXBsaWNhdGlvbi13YXJuaW5nczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIFdhcm5pbmcgdGhhdCB3aWxsIGJlIHByaW50ZWQgaWYgZHVwbGljYXRlZCBzdHlsZXMgYXJlIGdlbmVyYXRlZCBieSBhIHRoZW1lLlxuJF9tYXQtdGhlbWUtZHVwbGljYXRlLXdhcm5pbmc6ICdSZWFkIG1vcmUgYWJvdXQgaG93IHN0eWxlIGR1cGxpY2F0aW9uIGNhbiBiZSBhdm9pZGVkIGluIGEgJyArXG4gICdkZWRpY2F0ZWQgZ3VpZGUuIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvYmxvYi9tYXN0ZXIvZ3VpZGVzL2R1cGxpY2F0ZS10aGVtaW5nLXN0eWxlcy5tZCc7XG5cbi8vIFRoZXNlIHZhcmlhYmxlIGFyZSBub3QgaW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBleHRlcm5hbGx5LiBUaGV5IHVzZSBgIWRlZmF1bHRgIHRvXG4vLyBhdm9pZCBiZWluZyByZXNldCBldmVyeSB0aW1lIHRoaXMgZmlsZSBpcyBpbXBvcnRlZC5cbiRfbWF0LXRoZW1lLWVtaXR0ZWQtY29sb3I6ICgpICFkZWZhdWx0O1xuJF9tYXQtdGhlbWUtZW1pdHRlZC10eXBvZ3JhcGh5OiAoKSAhZGVmYXVsdDtcbiRfbWF0LXRoZW1lLWVtaXR0ZWQtZGVuc2l0eTogKCkgIWRlZmF1bHQ7XG5cbi8vIENoZWNrcyBpZiBjb25maWd1cmF0aW9ucyB0aGF0IGhhdmUgYmVlbiBkZWNsYXJlZCBpbiB0aGUgZ2l2ZW4gdGhlbWUgaGF2ZSBiZWVuIGdlbmVyYXRlZFxuLy8gYmVmb3JlLiBJZiBzbywgd2FybmluZ3Mgd2lsbCBiZSByZXBvcnRlZC4gVGhpcyBzaG91bGQgbm90aWZ5IGRldmVsb3BlcnMgaW4gY2FzZSBkdXBsaWNhdGVcbi8vIHN0eWxlcyBhcmUgYWNjaWRlbnRhbGx5IGdlbmVyYXRlZCBkdWUgdG8gd3JvbmcgdXNhZ2Ugb2YgdGhlIGFsbC10aGVtZSBtaXhpbnMuXG4vL1xuLy8gQWRkaXRpb25hbGx5LCB0aGlzIG1peGluIGNvbnRyb2xzIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgZGVuc2l0eSBjb25maWd1cmF0aW9uLiBCeVxuLy8gZGVmYXVsdCwgZGVuc2l0eSBzdHlsZXMgYXJlIGdlbmVyYXRlZCBhdCBzY2FsZSB6ZXJvLiBJZiB0aGUgc2FtZSBkZW5zaXR5IHN0eWxlcyB3b3VsZCBiZVxuLy8gZ2VuZXJhdGVkIGEgc2Vjb25kIHRpbWUgdGhvdWdoLCB0aGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGNoYW5nZSB0byBhdm9pZCBkdXBsaWNhdGUgc3R5bGVzLlxuLy9cbi8vIFRoZSBtaXhpbiBrZWVwcyB0cmFjayBvZiBhbGwgY29uZmlndXJhdGlvbnMgaW4gYSBsaXN0IHRoYXQgaXMgc2NvcGVkIHRvIHRoZSBzcGVjaWZpZWRcbi8vIGlkLiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGEgZ2l2ZW4gdGhlbWUgY2FuIGJlIHBhc3NlZCB0byBtdWx0aXBsZSBkaXNqb2ludCB0aGVtZSBtaXhpbnNcbi8vIChlLmcuIGBhbmd1bGFyLW1hdGVyaWFsLXRoZW1lYCBhbmQgYGFuZ3VsYXItbWF0ZXJpYWwtbWRjLXRoZW1lYCkgd2l0aG91dCBjYXVzaW5nIGFueVxuLy8gc3R5bGUgZHVwbGljYXRpb24uXG5AbWl4aW4gX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZS1vci1jb2xvci1jb25maWcsICRpZCkge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgJGNvbG9yLWNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgJGRlbnNpdHktY29uZmlnOiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICR0eXBvZ3JhcGh5LWNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuICAvLyBMaXN0cyBvZiBwcmV2aW91cyBgY29sb3JgLCBgZGVuc2l0eWAgYW5kIGB0eXBvZ3JhcGh5YCBjb25maWd1cmF0aW9ucy5cbiAgJHByZXZpb3VzLWNvbG9yOiBtYXBfZ2V0KCRfbWF0LXRoZW1lLWVtaXR0ZWQtY29sb3IsICRpZCkgb3IgKCk7XG4gICRwcmV2aW91cy10eXBvZ3JhcGh5OiBtYXBfZ2V0KCRfbWF0LXRoZW1lLWVtaXR0ZWQtdHlwb2dyYXBoeSwgJGlkKSBvciAoKTtcbiAgJHByZXZpb3VzLWRlbnNpdHk6IG1hcF9nZXQoJF9tYXQtdGhlbWUtZW1pdHRlZC1kZW5zaXR5LCAkaWQpIG9yICgpO1xuICAvLyBXaGV0aGVyIGR1cGxpY2F0ZSBsZWdhY3kgZGVuc2l0eSBzdHlsZXMgd291bGQgYmUgZ2VuZXJhdGVkLlxuICAkZHVwbGljYXRlLWxlZ2FjeS1kZW5zaXR5OiBmYWxzZTtcblxuICAvLyBDaGVjayBpZiB0aGUgY29sb3IgY29uZmlndXJhdGlvbiBoYXMgYmVlbiBnZW5lcmF0ZWQgYmVmb3JlLlxuICBAaWYgJGNvbG9yLWNvbmZpZyAhPSBudWxsIHtcbiAgICBAaWYgaW5kZXgoJHByZXZpb3VzLWNvbG9yLCAkY29sb3ItY29uZmlnKSAhPSBudWxsIGFuZFxuICAgICAgICBub3QgJG1hdC10aGVtZS1pZ25vcmUtZHVwbGljYXRpb24td2FybmluZ3Mge1xuICAgICAgQHdhcm4gJ1RoZSBzYW1lIGNvbG9yIHN0eWxlcyBhcmUgZ2VuZXJhdGVkIG11bHRpcGxlIHRpbWVzLiAnICtcbiAgICAgICAgICAkX21hdC10aGVtZS1kdXBsaWNhdGUtd2FybmluZztcbiAgICB9XG4gICAgJHByZXZpb3VzLWNvbG9yOiBhcHBlbmQoJHByZXZpb3VzLWNvbG9yLCAkY29sb3ItY29uZmlnKTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSB0eXBvZ3JhcGh5IGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gZ2VuZXJhdGVkIGJlZm9yZS5cbiAgQGlmICR0eXBvZ3JhcGh5LWNvbmZpZyAhPSBudWxsIHtcbiAgICBAaWYgaW5kZXgoJHByZXZpb3VzLXR5cG9ncmFwaHksICR0eXBvZ3JhcGh5LWNvbmZpZykgIT0gbnVsbCBhbmRcbiAgICAgICAgbm90ICRtYXQtdGhlbWUtaWdub3JlLWR1cGxpY2F0aW9uLXdhcm5pbmdzIHtcbiAgICAgIEB3YXJuICdUaGUgc2FtZSB0eXBvZ3JhcGh5IHN0eWxlcyBhcmUgZ2VuZXJhdGVkIG11bHRpcGxlIHRpbWVzLiAnICtcbiAgICAgICAgICAkX21hdC10aGVtZS1kdXBsaWNhdGUtd2FybmluZztcbiAgICB9XG4gICAgJHByZXZpb3VzLXR5cG9ncmFwaHk6IGFwcGVuZCgkcHJldmlvdXMtdHlwb2dyYXBoeSwgJHR5cG9ncmFwaHktY29uZmlnKTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBkZW5zaXR5IGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gZ2VuZXJhdGVkIGJlZm9yZS5cbiAgQGlmICRkZW5zaXR5LWNvbmZpZyAhPSBudWxsIHtcbiAgICBAaWYgaW5kZXgoJHByZXZpb3VzLWRlbnNpdHksICRkZW5zaXR5LWNvbmZpZykgIT0gbnVsbCB7XG4gICAgICAvLyBPbmx5IHJlcG9ydCBhIHdhcm5pbmcgaWYgZGVuc2l0eSBzdHlsZXMgd291bGQgYmUgZHVwbGljYXRlZCBmb3Igbm9uLWxlZ2FjeSB0aGVtZVxuICAgICAgLy8gZGVmaW5pdGlvbnMuIEZvciBsZWdhY3kgdGhlbWVzLCB3ZSBoYXZlIGNvbXBhdGliaWxpdHkgbG9naWMgdGhhdCBhdm9pZHMgZHVwbGljYXRpb25cbiAgICAgIC8vIG9mIGRlZmF1bHQgZGVuc2l0eSBzdHlsZXMuIFdlIGRvbid0IHdhbnQgdG8gcmVwb3J0IGEgd2FybmluZyBpbiB0aG9zZSBjYXNlcy5cbiAgICAgIEBpZiBfbWF0LWlzLWxlZ2FjeS1jb25zdHJ1Y3RlZC10aGVtZSgkdGhlbWUpIHtcbiAgICAgICAgJGR1cGxpY2F0ZS1sZWdhY3ktZGVuc2l0eTogdHJ1ZTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIGlmIG5vdCAkbWF0LXRoZW1lLWlnbm9yZS1kdXBsaWNhdGlvbi13YXJuaW5ncyB7XG4gICAgICAgIEB3YXJuICdUaGUgc2FtZSBkZW5zaXR5IHN0eWxlcyBhcmUgZ2VuZXJhdGVkIG11bHRpcGxlIHRpbWVzLiAnICtcbiAgICAgICAgICAgJF9tYXQtdGhlbWUtZHVwbGljYXRlLXdhcm5pbmc7XG4gICAgICB9XG4gICAgfVxuICAgICRwcmV2aW91cy1kZW5zaXR5OiBhcHBlbmQoJHByZXZpb3VzLWRlbnNpdHksICRkZW5zaXR5LWNvbmZpZyk7XG4gIH1cblxuICAkX21hdC10aGVtZS1lbWl0dGVkLWNvbG9yOiBtYXBfbWVyZ2UoXG4gICAgICAkX21hdC10aGVtZS1lbWl0dGVkLWNvbG9yLCAoJGlkOiAkcHJldmlvdXMtY29sb3IpKSAhZ2xvYmFsO1xuICAkX21hdC10aGVtZS1lbWl0dGVkLWRlbnNpdHk6IG1hcF9tZXJnZShcbiAgICAgICRfbWF0LXRoZW1lLWVtaXR0ZWQtZGVuc2l0eSwgKCRpZDogJHByZXZpb3VzLWRlbnNpdHkpKSAhZ2xvYmFsO1xuICAkX21hdC10aGVtZS1lbWl0dGVkLXR5cG9ncmFwaHk6IG1hcF9tZXJnZShcbiAgICAgICRfbWF0LXRoZW1lLWVtaXR0ZWQtdHlwb2dyYXBoeSwgKCRpZDogJHByZXZpb3VzLXR5cG9ncmFwaHkpKSAhZ2xvYmFsO1xuXG4gIC8vIE9wdGlvbmFsbHksIGNvbnN1bWVycyBvZiB0aGlzIG1peGluIGNhbiB3cmFwIGNvbnRlbnRzIGluc2lkZSBzbyB0aGF0IG5lc3RlZFxuICAvLyBkdXBsaWNhdGUgc3R5bGUgY2hlY2tzIGRvIG5vdCByZXBvcnQgYW5vdGhlciB3YXJuaW5nLiBlLmcuIGlmIGRldmVsb3BlcnMgaW5jbHVkZVxuICAvLyB0aGUgYGFuZ3VsYXItbWF0ZXJpYWwtdGhlbWVgIG1peGluIHR3aWNlLCBvbmx5IHRoZSB0b3AtbGV2ZWwgZHVwbGljYXRlIHN0eWxlcyBjaGVja1xuICAvLyBzaG91bGQgcmVwb3J0IGEgd2FybmluZy4gTm90IGFsbCBpbmRpdmlkdWFsIGNvbXBvbmVudHMgc2hvdWxkIHJlcG9ydCBhIHdhcm5pbmcgdG9vLlxuICAkb3JpZy1tYXQtdGhlbWUtaWdub3JlLWR1cGxpY2F0aW9uLXdhcm5pbmdzOiAkbWF0LXRoZW1lLWlnbm9yZS1kdXBsaWNhdGlvbi13YXJuaW5ncztcbiAgJG1hdC10aGVtZS1pZ25vcmUtZHVwbGljYXRpb24td2FybmluZ3M6IHRydWUgIWdsb2JhbDtcblxuICAvLyBJZiBkdXBsaWNhdGUgZGVmYXVsdCBkZW5zaXR5IHN0eWxlcyB3b3VsZCBiZSBnZW5lcmF0ZWQgZm9yIGEgbGVnYWN5IGNvbnN0cnVjdGVkIHRoZW1lLFxuICAvLyB3ZSBhZGp1c3QgdGhlIGRlbnNpdHkgZ2VuZXJhdGlvbiBzbyB0aGF0IG5vIGRlbnNpdHkgc3R5bGVzIGFyZSBnZW5lcmF0ZWQgYnkgZGVmYXVsdC5cbiAgLy8gSWYgbm8gZGVmYXVsdCBkZW5zaXR5IHN0eWxlcyBoYXZlIGJlZW4gZ2VuZXJhdGVkIHlldCwgd2UgZW5zdXJlIHRoYXQgdGhlIHN0eWxlc1xuICAvLyBhcmUgZ2VuZXJhdGVkIGF0IHJvb3QuIEZvciBsZWdhY3kgdGhlbWVzIG91ciBnb2FsIGlzIHRvIGdlbmVyYXRlIGRlZmF1bHQgZGVuc2l0eVxuICAvLyBzdHlsZXMgKipvbmNlKiogYW5kIGF0IHJvb3QuIFRoaXMgbWF0Y2hlcyB0aGUgb2xkIGJlaGF2aW9yIHdoZXJlIGRlbnNpdHkgc3R5bGVzIHdlcmVcbiAgLy8gcGFydCBvZiB0aGUgYmFzZSBjb21wb25lbnQgc3R5bGVzICh0aGF0IGRpZCBub3QgdXNlIHZpZXcgZW5jYXBzdWxhdGlvbikuXG4gIC8vIFRPRE86IFJlbW92ZSB0aGlzIGNvbXBhdGliaWxpdHkgbG9naWMgd2hlbiB0aGUgbGVnYWN5IHRoZW1pbmcgQVBJIGlzIHJlbW92ZWQuXG4gICRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtYXQtcm9vdDogX21hdC1pcy1sZWdhY3ktY29uc3RydWN0ZWQtdGhlbWUoJHRoZW1lKSAhZ2xvYmFsO1xuICAkX21hdC1kZW5zaXR5LWdlbmVyYXRlLXN0eWxlczogbm90ICRkdXBsaWNhdGUtbGVnYWN5LWRlbnNpdHkgIWdsb2JhbDtcblxuICBAY29udGVudDtcbiAgJG1hdC10aGVtZS1pZ25vcmUtZHVwbGljYXRpb24td2FybmluZ3M6ICRvcmlnLW1hdC10aGVtZS1pZ25vcmUtZHVwbGljYXRpb24td2FybmluZ3MgIWdsb2JhbDtcblxuICAkX21hdC1kZW5zaXR5LWdlbmVyYXRlLWF0LXJvb3Q6IGZhbHNlICFnbG9iYWw7XG4gICRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtc3R5bGVzOiB0cnVlICFnbG9iYWw7XG59XG5cblxuXG4kbWF0LXJpcHBsZS1jb2xvci1vcGFjaXR5OiAwLjE7XG5cbkBtaXhpbiBtYXQtcmlwcGxlKCkge1xuXG4gIC8vIFRoZSBob3N0IGVsZW1lbnQgb2YgYW4gbWF0LXJpcHBsZSBkaXJlY3RpdmUgc2hvdWxkIGFsd2F5cyBoYXZlIGEgcG9zaXRpb24gb2YgXCJhYnNvbHV0ZVwiIG9yXG4gIC8vIFwicmVsYXRpdmVcIiBzbyB0aGF0IHRoZSByaXBwbGVzIGluc2lkZSBhcmUgY29ycmVjdGx5IHBvc2l0aW9uZWQgcmVsYXRpdmVseSB0byB0aGUgY29udGFpbmVyLlxuICAubWF0LXJpcHBsZSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgIC8vIEJ5IGRlZmF1bHQsIGV2ZXJ5IHJpcHBsZSBjb250YWluZXIgc2hvdWxkIGhhdmUgcG9zaXRpb246IHJlbGF0aXZlIGluIGZhdm9yIG9mIGNyZWF0aW5nIGFuXG4gICAgLy8gZWFzeSBBUEkgZm9yIGRldmVsb3BlcnMgdXNpbmcgdGhlIE1hdFJpcHBsZSBkaXJlY3RpdmUuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgLy8gUHJvbW90ZSBjb250YWluZXJzIHRoYXQgaGF2ZSByaXBwbGVzIHRvIGEgbmV3IGxheWVyLiBXZSB3YW50IHRvIHRhcmdldCBgOm5vdCg6ZW1wdHkpYCxcbiAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHdhbnQgYWxsIHJpcHBsZSBjb250YWluZXJzIHRvIGhhdmUgdGhlaXIgb3duIGxheWVyIHNpbmNlIHRoZXkncmUgdXNlZCBpbiBhXG4gICAgLy8gbG90IG9mIHBsYWNlcyBhbmQgdGhlIGxheWVyIGlzIG9ubHkgcmVsZXZhbnQgd2hpbGUgYW5pbWF0aW5nLiBOb3RlIHRoYXQgaWRlYWxseSB3ZSdkIHVzZVxuICAgIC8vIHRoZSBgY29udGFpbmAgcHJvcGVydHkgaGVyZSAoc2VlICMxMzE3NSksIGJlY2F1c2UgYDplbXB0eWAgY2FuIGJlIGJyb2tlbiBieSBoYXZpbmcgZXh0cmFcbiAgICAvLyB0ZXh0IGluc2lkZSB0aGUgZWxlbWVudCwgYnV0IGl0IGlzbid0IHZlcnkgd2VsbCBzdXBwb3J0ZWQgeWV0LlxuICAgICY6bm90KDplbXB0eSkge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtcmlwcGxlLm1hdC1yaXBwbGUtdW5ib3VuZGVkIHtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgfVxuXG4gIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5LCB0cmFuc2Zvcm0gMG1zIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG5cbiAgICAvLyBJbiBoaWdoIGNvbnRyYXN0IG1vZGUgdGhlIHJpcHBsZSBpcyBvcGFxdWUsIGNhdXNpbmcgaXQgdG8gb2JzdHJ1Y3QgdGhlIGNvbnRlbnQuXG4gICAgQGluY2x1ZGUgY2RrLWhpZ2gtY29udHJhc3QoYWN0aXZlLCBvZmYpIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG59XG5cbi8qIENvbG9ycyBmb3IgdGhlIHJpcHBsZSBlbGVtZW50cy4qL1xuQG1peGluIG1hdC1yaXBwbGUtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvcmVncm91bmQ6IG1hcF9nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRmb3JlZ3JvdW5kLWJhc2U6IG1hcF9nZXQoJGZvcmVncm91bmQsIGJhc2UpO1xuXG4gIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgIC8vIElmIHRoZSByaXBwbGUgY29sb3IgaXMgcmVzb2x2ZXMgdG8gYSBjb2xvciAqdHlwZSosIHdlIGNhbiB1c2UgaXQgZGlyZWN0bHksIG90aGVyd2lzZVxuICAgIC8vIChlLmcuIGl0IHJlc29sdmVzIHRvIGEgQ1NTIHZhcmlhYmxlKSB3ZSBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIGNvbG9yIGFuZCBzZXR0aW5nIGFuIG9wYWNpdHkuXG4gICAgQGlmICh0eXBlLW9mKCRmb3JlZ3JvdW5kLWJhc2UpID09IGNvbG9yKSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCRmb3JlZ3JvdW5kLWJhc2UsICRtYXQtcmlwcGxlLWNvbG9yLW9wYWNpdHkpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZm9yZWdyb3VuZC1iYXNlO1xuICAgICAgb3BhY2l0eTogJG1hdC1yaXBwbGUtY29sb3Itb3BhY2l0eTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1yaXBwbGUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1yaXBwbGUnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcmlwcGxlLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBUaGlzIG1peGluIGVuc3VyZXMgYW4gZWxlbWVudCBzcGFucyB0byBmaWxsIHRoZSBuZWFyZXN0IGFuY2VzdG9yIHdpdGggZGVmaW5lZCBwb3NpdGlvbmluZy5cbkBtaXhpbiBtYXQtZmlsbCB7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xufVxuXG5cbi8vLyBNaXhpbiB0aGF0IHR1cm5zIG9uIHN0cm9uZyBmb2N1cyBpbmRpY2F0b3JzLlxuLy8vXG4vLy8gQGV4YW1wbGVcbi8vLyAgIC5teS1hcHAge1xuLy8vICAgICBAaW5jbHVkZSBtYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMoJGNvbmZpZyk7XG4vLy8gICB9XG5AbWl4aW4gbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzKCRjb25maWc6ICgpKSB7XG4gIC8vIERlZmF1bHQgZm9jdXMgaW5kaWNhdG9yIGNvbmZpZy5cbiAgJGRlZmF1bHQtY29uZmlnOiAoXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZCxcbiAgICBib3JkZXItd2lkdGg6IDNweCxcbiAgICBib3JkZXItcmFkaXVzOiA0cHgsXG4gICk7XG5cbiAgLy8gTWVyZ2UgZGVmYXVsdCBjb25maWcgd2l0aCB1c2VyIGNvbmZpZy5cbiAgJGNvbmZpZzogbWFwLW1lcmdlKCRkZWZhdWx0LWNvbmZpZywgJGNvbmZpZyk7XG4gICRib3JkZXItc3R5bGU6IG1hcC1nZXQoJGNvbmZpZywgYm9yZGVyLXN0eWxlKTtcbiAgJGJvcmRlci13aWR0aDogbWFwLWdldCgkY29uZmlnLCBib3JkZXItd2lkdGgpO1xuICAkYm9yZGVyLXJhZGl1czogbWFwLWdldCgkY29uZmlnLCBib3JkZXItcmFkaXVzKTtcblxuICAvLyBCYXNlIHN0eWxlcyBmb3IgZm9jdXMgaW5kaWNhdG9ycy5cbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3I6OmJlZm9yZSB7XG4gICAgQGluY2x1ZGUgbWF0LWZpbGwoKTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGJvcmRlcjogJGJvcmRlci13aWR0aCAkYm9yZGVyLXN0eWxlIHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xuICB9XG5cbiAgLy8gQnkgZGVmYXVsdCwgYWxsIGZvY3VzIGluZGljYXRvcnMgYXJlIGZsdXNoIHdpdGggdGhlIGJvdW5kaW5nIGJveCBvZiB0aGVpclxuICAvLyBob3N0IGVsZW1lbnQuIEZvciBwYXJ0aWN1bGFyIGVsZW1lbnRzIChsaXN0ZWQgYmVsb3cpLCBkZWZhdWx0IGluc2V0L29mZnNldFxuICAvLyB2YWx1ZXMgYXJlIG5lY2Vzc2FyeSB0byBlbnN1cmUgdGhhdCB0aGUgZm9jdXMgaW5kaWNhdG9yIGlzIHN1ZmZpY2llbnRseVxuICAvLyBjb250cmFzdGl2ZSBhbmQgcmVuZGVycyBhcHByb3ByaWF0ZWx5LlxuXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1mbGF0LWJ1dHRvbjo6YmVmb3JlLFxuICAubWF0LWZvY3VzLWluZGljYXRvci5tYXQtcmFpc2VkLWJ1dHRvbjo6YmVmb3JlLFxuICAubWF0LWZvY3VzLWluZGljYXRvci5tYXQtZmFiOjpiZWZvcmUsXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1taW5pLWZhYjo6YmVmb3JlLFxuICAubWF0LWZvY3VzLWluZGljYXRvci5tYXQtY2hpcDo6YmVmb3JlLFxuICAubWF0LWZvY3VzLWluZGljYXRvci5tYXQtc29ydC1oZWFkZXItY29udGFpbmVyOjpiZWZvcmUge1xuICAgIG1hcmdpbjogLSgkYm9yZGVyLXdpZHRoICsgMnB4KTtcbiAgfVxuXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1zdHJva2VkLWJ1dHRvbjo6YmVmb3JlLFxuICAubWF0LWZvY3VzLWluZGljYXRvci5tYXQtY2FsZW5kYXItYm9keS1jZWxsLWNvbnRlbnQ6OmJlZm9yZSB7XG4gICAgbWFyZ2luOiAtKCRib3JkZXItd2lkdGggKyAzcHgpO1xuICB9XG5cbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3IubWF0LXRhYi1saW5rOjpiZWZvcmUsXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC10YWItbGFiZWw6OmJlZm9yZSB7XG4gICAgbWFyZ2luOiA1cHg7XG4gIH1cblxuICAvLyBSZW5kZXIgdGhlIGZvY3VzIGluZGljYXRvciBvbiBmb2N1cy4gRGVmaW5pbmcgYSBwc2V1ZG8gZWxlbWVudCdzXG4gIC8vIGNvbnRlbnQgd2lsbCBjYXVzZSBpdCB0byByZW5kZXIuXG5cbiAgLy8gQ2hlY2tib3hlcywgcmFkaW9zLCBhbmQgc2xpZGUgdG9nZ2xlcyByZW5kZXIgZm9jdXMgaW5kaWNhdG9ycyB3aGVuIHRoZVxuICAvLyBhc3NvY2lhdGVkIHZpc3VhbGx5LWhpZGRlbiBpbnB1dCBpcyBmb2N1c2VkLlxuICAubWF0LWNoZWNrYm94LWlucHV0OmZvY3VzIH4gLm1hdC1mb2N1cy1pbmRpY2F0b3I6OmJlZm9yZSxcbiAgLm1hdC1yYWRpby1pbnB1dDpmb2N1cyB+IC5tYXQtZm9jdXMtaW5kaWNhdG9yOjpiZWZvcmUsXG4gIC5tYXQtc2xpZGUtdG9nZ2xlLWlucHV0OmZvY3VzIH4gLm1hdC1zbGlkZS10b2dnbGUtdGh1bWItY29udGFpbmVyIC5tYXQtZm9jdXMtaW5kaWNhdG9yOjpiZWZvcmUsXG5cbiAgLy8gRm9yIG9wdGlvbnMsIHJlbmRlciB0aGUgZm9jdXMgaW5kaWNhdG9yIHdoZW4gdGhlIGNsYXNzIC5tYXQtYWN0aXZlXG4gIC8vIGlzIHByZXNlbnQuXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1vcHRpb24ubWF0LWFjdGl2ZTo6YmVmb3JlLFxuXG4gIC8vIEZvciBjYWxlbmRhciBjZWxscywgcmVuZGVyIHRoZSBmb2N1cyBpbmRpY2F0b3Igd2hlbiB0aGUgcGFyZW50IGNlbGwgaXNcbiAgLy8gZm9jdXNlZC5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWNlbGw6Zm9jdXMgLm1hdC1mb2N1cy1pbmRpY2F0b3I6OmJlZm9yZSxcblxuICAvLyBGb3IgYWxsIG90aGVyIGNvbXBvbmVudHMsIHJlbmRlciB0aGUgZm9jdXMgaW5kaWNhdG9yIG9uIGZvY3VzLlxuICAubWF0LWZvY3VzLWluZGljYXRvcjpmb2N1czo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgfVxufVxuXG4vLyBNaXhpbiB0aGF0IGFwcGxpZXMgdGhlIGJvcmRlciBjb2xvciBmb3IgdGhlIGZvY3VzIGluZGljYXRvcnMuXG5AbWl4aW4gX21hdC1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycy1ib3JkZXItY29sb3IoJGNvbG9yKSB7XG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yOjpiZWZvcmUge1xuICAgIGJvcmRlci1jb2xvcjogJGNvbG9yO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgQGluY2x1ZGUgX21hdC1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycy1ib3JkZXItY29sb3IobWF0LWNvbG9yKG1hcF9nZXQoJGNvbmZpZywgcHJpbWFyeSkpKTtcbn1cblxuLy8vIE1peGluIHRoYXQgc2V0cyB0aGUgY29sb3Igb2YgdGhlIGZvY3VzIGluZGljYXRvcnMuXG4vLy9cbi8vLyBAcGFyYW0ge2NvbG9yfG1hcH0gJHRoZW1lLW9yLWNvbG9yXG4vLy8gICBJZiB0aGVtZSwgZm9jdXMgaW5kaWNhdG9ycyBhcmUgc2V0IHRvIHRoZSBwcmltYXJ5IGNvbG9yIG9mIHRoZSB0aGVtZS4gSWZcbi8vLyAgIGNvbG9yLCBmb2N1cyBpbmRpY2F0b3JzIGFyZSBzZXQgdG8gdGhhdCBjb2xvci5cbi8vL1xuLy8vIEBleGFtcGxlXG4vLy8gICAuZGVtby1kYXJrLXRoZW1lIHtcbi8vLyAgICAgQGluY2x1ZGUgbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLXRoZW1lKCRkYXJrLXRoZW1lLW1hcCk7XG4vLy8gICB9XG4vLy9cbi8vLyBAZXhhbXBsZVxuLy8vICAgLmRlbW8tcmVkLXRoZW1lIHtcbi8vLyAgICAgQGluY2x1ZGUgbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLXRoZW1lKCNmMDApO1xuLy8vICAgfVxuLyogc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIG1hdGVyaWFsL3RoZW1lLW1peGluLWFwaSAqL1xuQG1peGluIG1hdC1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycy10aGVtZSgkdGhlbWUtb3ItY29sb3IpIHtcbiAgQGlmIHR5cGUtb2YoJHRoZW1lLW9yLWNvbG9yKSAhPSAnbWFwJyB7XG4gICAgQGluY2x1ZGUgX21hdC1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycy1ib3JkZXItY29sb3IoJHRoZW1lLW9yLWNvbG9yKTtcbiAgfVxuICBAZWxzZSB7XG4gICAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yKTtcbiAgICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzJykge1xuICAgICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgICAgQGluY2x1ZGUgbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLWNvbG9yKCRjb2xvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIE1peGluIHRoYXQgZW5zdXJlcyBmb2N1cyBpbmRpY2F0b3IgaG9zdCBlbGVtZW50cyBhcmUgcG9zaXRpb25lZCBzbyB0aGF0IHRoZSBmb2N1cyBpbmRpY2F0b3Jcbi8vIHBzZXVkbyBlbGVtZW50IHdpdGhpbiBpcyBwb3NpdGlvbmVkIHJlbGF0aXZlIHRvIHRoZSBob3N0LiBQcml2YXRlIG1peGluIGluY2x1ZGVkIHdpdGhpblxuLy8gYG1hdC1jb3JlYC5cbkBtaXhpbiBfbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLXBvc2l0aW9uaW5nKCkge1xuICAubWF0LWZvY3VzLWluZGljYXRvciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG59XG5cblxuXG5cbi8vIFV0aWxpdHkgZm9yIGZldGNoaW5nIGEgbmVzdGVkIHZhbHVlIGZyb20gYSB0eXBvZ3JhcGh5IGNvbmZpZy5cbkBmdW5jdGlvbiBfbWF0LWdldC10eXBlLXZhbHVlKCRjb25maWcsICRsZXZlbCwgJG5hbWUpIHtcbiAgQHJldHVybiBtYXAtZ2V0KG1hcC1nZXQoJGNvbmZpZywgJGxldmVsKSwgJG5hbWUpO1xufVxuXG4vLyBHZXRzIHRoZSBmb250IHNpemUgZm9yIGEgbGV2ZWwgaW5zaWRlIGEgdHlwb2dyYXBoeSBjb25maWcuXG5AZnVuY3Rpb24gbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCAkbGV2ZWwpIHtcbiAgQHJldHVybiBfbWF0LWdldC10eXBlLXZhbHVlKCRjb25maWcsICRsZXZlbCwgZm9udC1zaXplKTtcbn1cblxuLy8gR2V0cyB0aGUgbGluZSBoZWlnaHQgZm9yIGEgbGV2ZWwgaW5zaWRlIGEgdHlwb2dyYXBoeSBjb25maWcuXG5AZnVuY3Rpb24gbWF0LWxpbmUtaGVpZ2h0KCRjb25maWcsICRsZXZlbCkge1xuICBAcmV0dXJuIF9tYXQtZ2V0LXR5cGUtdmFsdWUoJGNvbmZpZywgJGxldmVsLCBsaW5lLWhlaWdodCk7XG59XG5cbi8vIEdldHMgdGhlIGZvbnQgd2VpZ2h0IGZvciBhIGxldmVsIGluc2lkZSBhIHR5cG9ncmFwaHkgY29uZmlnLlxuQGZ1bmN0aW9uIG1hdC1mb250LXdlaWdodCgkY29uZmlnLCAkbGV2ZWwpIHtcbiAgQHJldHVybiBfbWF0LWdldC10eXBlLXZhbHVlKCRjb25maWcsICRsZXZlbCwgZm9udC13ZWlnaHQpO1xufVxuXG4vLyBHZXRzIHRoZSBsZXR0ZXIgc3BhY2luZyBmb3IgYSBsZXZlbCBpbnNpZGUgYSB0eXBvZ3JhcGh5IGNvbmZpZy5cbkBmdW5jdGlvbiBtYXQtbGV0dGVyLXNwYWNpbmcoJGNvbmZpZywgJGxldmVsKSB7XG4gIEByZXR1cm4gX21hdC1nZXQtdHlwZS12YWx1ZSgkY29uZmlnLCAkbGV2ZWwsIGxldHRlci1zcGFjaW5nKTtcbn1cblxuLy8gR2V0cyB0aGUgZm9udC1mYW1pbHkgZnJvbSBhIHR5cG9ncmFwaHkgY29uZmlnIGFuZCByZW1vdmVzIHRoZSBxdW90ZXMgYXJvdW5kIGl0LlxuQGZ1bmN0aW9uIG1hdC1mb250LWZhbWlseSgkY29uZmlnLCAkbGV2ZWw6IG51bGwpIHtcbiAgJGZvbnQtZmFtaWx5OiBtYXAtZ2V0KCRjb25maWcsIGZvbnQtZmFtaWx5KTtcblxuICBAaWYgJGxldmVsICE9IG51bGwge1xuICAgICRmb250LWZhbWlseTogX21hdC1nZXQtdHlwZS12YWx1ZSgkY29uZmlnLCAkbGV2ZWwsIGZvbnQtZmFtaWx5KTtcbiAgfVxuXG4gIC8vIEd1YXJkIGFnYWluc3QgdW5xdW90aW5nIG5vbi1zdHJpbmcgdmFsdWVzLCBiZWNhdXNlIGl0J3MgZGVwcmVjYXRlZC5cbiAgQHJldHVybiBpZih0eXBlLW9mKCRmb250LWZhbWlseSkgPT0gc3RyaW5nLCB1bnF1b3RlKCRmb250LWZhbWlseSksICRmb250LWZhbWlseSk7XG59XG5cbi8vIE91dHB1dHMgdGhlIHNob3J0aGFuZCBgZm9udGAgQ1NTIHByb3BlcnR5LCBiYXNlZCBvbiBhIHNldCBvZiB0eXBvZ3JhcGh5IHZhbHVlcy4gRmFsbHMgYmFjayB0b1xuLy8gdGhlIGluZGl2aWR1YWwgcHJvcGVydGllcyBpZiBhIHZhbHVlIHRoYXQgaXNuJ3QgYWxsb3dlZCBpbiB0aGUgc2hvcnRoYW5kIGlzIHBhc3NlZCBpbi5cbkBtaXhpbiBtYXQtdHlwb2dyYXBoeS1mb250LXNob3J0aGFuZCgkZm9udC1zaXplLCAkZm9udC13ZWlnaHQsICRsaW5lLWhlaWdodCwgJGZvbnQtZmFtaWx5KSB7XG4gIC8vIElmIGFueSBvZiB0aGUgdmFsdWVzIGFyZSBzZXQgdG8gYGluaGVyaXRgLCB3ZSBjYW4ndCB1c2UgdGhlIHNob3J0aGFuZFxuICAvLyBzbyB3ZSBmYWxsIGJhY2sgdG8gcGFzc2luZyBpbiB0aGUgaW5kaXZpZHVhbCBwcm9wZXJ0aWVzLlxuICBAaWYgKCRmb250LXNpemUgPT0gaW5oZXJpdCBvclxuICAgICAgICRmb250LXdlaWdodCA9PSBpbmhlcml0IG9yXG4gICAgICAgJGxpbmUtaGVpZ2h0ID09IGluaGVyaXQgb3JcbiAgICAgICAkZm9udC1mYW1pbHkgPT0gaW5oZXJpdCBvclxuICAgICAgICRmb250LXNpemUgPT0gbnVsbCBvclxuICAgICAgICRmb250LXdlaWdodCA9PSBudWxsIG9yXG4gICAgICAgJGxpbmUtaGVpZ2h0ID09IG51bGwgb3JcbiAgICAgICAkZm9udC1mYW1pbHkgPT0gbnVsbCkge1xuXG4gICAgZm9udC1zaXplOiAkZm9udC1zaXplO1xuICAgIGZvbnQtd2VpZ2h0OiAkZm9udC13ZWlnaHQ7XG4gICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodDtcbiAgICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5O1xuICB9XG4gIEBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UgdXNlIHRoZSBzaG9ydGhhbmQgYGZvbnRgLCBiZWNhdXNlIGl0J3MgdGhlIGxlYXN0IGFtb3VudCBvZiBieXRlcy4gTm90ZVxuICAgIC8vIHRoYXQgd2UgbmVlZCB0byB1c2UgaW50ZXJwb2xhdGlvbiBmb3IgYGZvbnQtc2l6ZS9saW5lLWhlaWdodGAgaW4gb3JkZXIgdG8gcHJldmVudFxuICAgIC8vIFNhc3MgZnJvbSBkaXZpZGluZyB0aGUgdHdvIHZhbHVlcy5cbiAgICBmb250OiAkZm9udC13ZWlnaHQgI3skZm9udC1zaXplfS8jeyRsaW5lLWhlaWdodH0gJGZvbnQtZmFtaWx5O1xuICB9XG59XG5cbi8vIENvbnZlcnRzIGEgdHlwb2dyYXBoeSBsZXZlbCBpbnRvIENTUyBzdHlsZXMuXG5AbWl4aW4gbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsICRsZXZlbCkge1xuICAkZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsICRsZXZlbCk7XG4gICRmb250LXdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsICRsZXZlbCk7XG4gICRsaW5lLWhlaWdodDogbWF0LWxpbmUtaGVpZ2h0KCRjb25maWcsICRsZXZlbCk7XG4gICRmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsICRsZXZlbCk7XG5cbiAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktZm9udC1zaG9ydGhhbmQoJGZvbnQtc2l6ZSwgJGZvbnQtd2VpZ2h0LCAkbGluZS1oZWlnaHQsICRmb250LWZhbWlseSk7XG4gIGxldHRlci1zcGFjaW5nOiBtYXQtbGV0dGVyLXNwYWNpbmcoJGNvbmZpZywgJGxldmVsKTtcbn1cblxuXG5AbWl4aW4gbWF0LW9wdGlvbi1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuXG4gIC5tYXQtb3B0aW9uIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcblxuICAgICY6aG92ZXI6bm90KC5tYXQtb3B0aW9uLWRpc2FibGVkKSxcbiAgICAmOmZvY3VzOm5vdCgubWF0LW9wdGlvbi1kaXNhYmxlZCkge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBob3Zlcik7XG4gICAgfVxuXG4gICAgLy8gSW4gbXVsdGlwbGUgbW9kZSB0aGVyZSBpcyBhIGNoZWNrYm94IHRvIHNob3cgdGhhdCB0aGUgb3B0aW9uIGlzIHNlbGVjdGVkLlxuICAgICYubWF0LXNlbGVjdGVkOm5vdCgubWF0LW9wdGlvbi1tdWx0aXBsZSk6bm90KC5tYXQtb3B0aW9uLWRpc2FibGVkKSB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGhvdmVyKTtcbiAgICB9XG5cbiAgICAmLm1hdC1hY3RpdmUge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBob3Zlcik7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgICB9XG5cbiAgICAmLm1hdC1vcHRpb24tZGlzYWJsZWQge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgaGludC10ZXh0KTtcbiAgICB9XG4gIH1cblxuICAubWF0LXByaW1hcnkgLm1hdC1vcHRpb24ubWF0LXNlbGVjdGVkOm5vdCgubWF0LW9wdGlvbi1kaXNhYmxlZCkge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnksIHRleHQpO1xuICB9XG5cbiAgLm1hdC1hY2NlbnQgLm1hdC1vcHRpb24ubWF0LXNlbGVjdGVkOm5vdCgubWF0LW9wdGlvbi1kaXNhYmxlZCkge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCwgdGV4dCk7XG4gIH1cblxuICAubWF0LXdhcm4gLm1hdC1vcHRpb24ubWF0LXNlbGVjdGVkOm5vdCgubWF0LW9wdGlvbi1kaXNhYmxlZCkge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJHdhcm4sIHRleHQpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtb3B0aW9uLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LW9wdGlvbiB7XG4gICAgZm9udDoge1xuICAgICAgZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIHN1YmhlYWRpbmctMik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LW9wdGlvbi1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtb3B0aW9uLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtb3B0aW9uJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LW9wdGlvbi1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LW9wdGlvbi1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LW9wdGlvbi10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtb3B0Z3JvdXAtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1vcHRncm91cC1sYWJlbCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1vcHRncm91cC1kaXNhYmxlZCAubWF0LW9wdGdyb3VwLWxhYmVsIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBoaW50LXRleHQpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtb3B0Z3JvdXAtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtb3B0Z3JvdXAtbGFiZWwge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCBib2R5LTIpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LW9wdGdyb3VwLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1vcHRncm91cC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LW9wdGdyb3VwJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LW9wdGdyb3VwLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtb3B0Z3JvdXAtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1vcHRncm91cC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuQG1peGluIG1hdC1wc2V1ZG8tY2hlY2tib3gtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGlzLWRhcmstdGhlbWU6IG1hcC1nZXQoJGNvbmZpZywgaXMtZGFyayk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcblxuICAvLyBOT1RFKHRyYXZpc2thdWZtYW4pOiBXaGlsZSB0aGUgc3BlYyBjYWxscyBmb3IgdHJhbnNsdWNlbnQgYmxhY2tzL3doaXRlcyBmb3IgZGlzYWJsZWQgY29sb3JzLFxuICAvLyB0aGlzIGRvZXMgbm90IHdvcmsgd2VsbCB3aXRoIGVsZW1lbnRzIGxheWVyZWQgb24gdG9wIG9mIG9uZSBhbm90aGVyLiBUbyBnZXQgYXJvdW5kIHRoaXMgd2VcbiAgLy8gYmxlbmQgdGhlIGNvbG9ycyB0b2dldGhlciBiYXNlZCBvbiB0aGUgYmFzZSBjb2xvciBhbmQgdGhlIHRoZW1lIGJhY2tncm91bmQuXG4gICR3aGl0ZS0zMHBjdC1vcGFjaXR5LW9uLWRhcms6ICM2ODY4Njg7XG4gICRibGFjay0yNnBjdC1vcGFjaXR5LW9uLWxpZ2h0OiAjYjBiMGIwO1xuICAkZGlzYWJsZWQtY29sb3I6IGlmKCRpcy1kYXJrLXRoZW1lLCAkd2hpdGUtMzBwY3Qtb3BhY2l0eS1vbi1kYXJrLCAkYmxhY2stMjZwY3Qtb3BhY2l0eS1vbi1saWdodCk7XG4gICRjb2xvcmVkLWJveC1zZWxlY3RvcjogJy5tYXQtcHNldWRvLWNoZWNrYm94LWNoZWNrZWQsIC5tYXQtcHNldWRvLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUnO1xuXG4gIC5tYXQtcHNldWRvLWNoZWNrYm94IHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCksIHNlY29uZGFyeS10ZXh0KTtcblxuICAgICY6OmFmdGVyIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGJhY2tncm91bmQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtcHNldWRvLWNoZWNrYm94LWRpc2FibGVkIHtcbiAgICBjb2xvcjogJGRpc2FibGVkLWNvbG9yO1xuICB9XG5cbiAgLm1hdC1wcmltYXJ5IC5tYXQtcHNldWRvLWNoZWNrYm94LWNoZWNrZWQsXG4gIC5tYXQtcHJpbWFyeSAubWF0LXBzZXVkby1jaGVja2JveC1pbmRldGVybWluYXRlIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IobWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KSk7XG4gIH1cblxuICAvLyBEZWZhdWx0IHRvIHRoZSBhY2NlbnQgY29sb3IuIE5vdGUgdGhhdCB0aGUgcHNldWRvIGNoZWNrYm94ZXMgYXJlIG1lYW50IHRvIGluaGVyaXQgdGhlXG4gIC8vIHRoZW1lIGZyb20gdGhlaXIgcGFyZW50LCByYXRoZXIgdGhhbiBpbXBsZW1lbnRpbmcgdGhlaXIgb3duIHRoZW1pbmcsIHdoaWNoIGlzIHdoeSB3ZVxuICAvLyBkb24ndCBhdHRhY2ggdG8gdGhlIGBtYXQtKmAgY2xhc3Nlcy4gQWxzbyBub3RlIHRoYXQgdGhpcyBuZWVkcyB0byBiZSBiZWxvdyBgLm1hdC1wcmltYXJ5YFxuICAvLyBpbiBvcmRlciB0byBhbGxvdyBmb3IgdGhlIGNvbG9yIHRvIGJlIG92ZXJ3cml0dGVuIGlmIHRoZSBjaGVja2JveCBpcyBpbnNpZGUgYSBwYXJlbnQgdGhhdFxuICAvLyBoYXMgYG1hdC1hY2NlbnRgIGFuZCBpcyBwbGFjZWQgaW5zaWRlIGFub3RoZXIgcGFyZW50IHRoYXQgaGFzIGBtYXQtcHJpbWFyeWAuXG4gIC5tYXQtcHNldWRvLWNoZWNrYm94LWNoZWNrZWQsXG4gIC5tYXQtcHNldWRvLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUsXG4gIC5tYXQtYWNjZW50IC5tYXQtcHNldWRvLWNoZWNrYm94LWNoZWNrZWQsXG4gIC5tYXQtYWNjZW50IC5tYXQtcHNldWRvLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUge1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcihtYXAtZ2V0KCRjb25maWcsIGFjY2VudCkpO1xuICB9XG5cbiAgLm1hdC13YXJuIC5tYXQtcHNldWRvLWNoZWNrYm94LWNoZWNrZWQsXG4gIC5tYXQtd2FybiAubWF0LXBzZXVkby1jaGVja2JveC1pbmRldGVybWluYXRlIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IobWFwLWdldCgkY29uZmlnLCB3YXJuKSk7XG4gIH1cblxuICAubWF0LXBzZXVkby1jaGVja2JveC1jaGVja2VkLFxuICAubWF0LXBzZXVkby1jaGVja2JveC1pbmRldGVybWluYXRlIHtcbiAgICAmLm1hdC1wc2V1ZG8tY2hlY2tib3gtZGlzYWJsZWQge1xuICAgICAgYmFja2dyb3VuZDogJGRpc2FibGVkLWNvbG9yO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXBzZXVkby1jaGVja2JveC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LXBzZXVkby1jaGVja2JveC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtcHNldWRvLWNoZWNrYm94LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtcHNldWRvLWNoZWNrYm94Jykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXBzZXVkby1jaGVja2JveC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXBzZXVkby1jaGVja2JveC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXBzZXVkby1jaGVja2JveC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFJlcHJlc2VudHMgYSB0eXBvZ3JhcGh5IGxldmVsIGZyb20gdGhlIE1hdGVyaWFsIGRlc2lnbiBzcGVjLlxuQGZ1bmN0aW9uIG1hdC10eXBvZ3JhcGh5LWxldmVsKFxuICAkZm9udC1zaXplLFxuICAkbGluZS1oZWlnaHQ6ICRmb250LXNpemUsXG4gICRmb250LXdlaWdodDogNDAwLFxuICAkZm9udC1mYW1pbHk6IG51bGwsXG4gICRsZXR0ZXItc3BhY2luZzogbm9ybWFsKSB7XG5cbiAgQHJldHVybiAoXG4gICAgZm9udC1zaXplOiAkZm9udC1zaXplLFxuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQsXG4gICAgZm9udC13ZWlnaHQ6ICRmb250LXdlaWdodCxcbiAgICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5LFxuICAgIGxldHRlci1zcGFjaW5nOiAkbGV0dGVyLXNwYWNpbmdcbiAgKTtcbn1cblxuLy8gUmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgdHlwb2dyYXBoeSBsZXZlbHMuXG4vLyBEZWZhdWx0cyBjb21lIGZyb20gaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL3N0eWxlL3R5cG9ncmFwaHkuaHRtbFxuLy8gTm90ZTogVGhlIHNwZWMgZG9lc24ndCBtZW50aW9uIGxldHRlciBzcGFjaW5nLiBUaGUgdmFsdWVzIGhlcmUgY29tZSBmcm9tXG4vLyBleWViYWxsaW5nIGl0IHVudGlsIGl0IGxvb2tlZCBleGFjdGx5IGxpa2UgdGhlIHNwZWMgZXhhbXBsZXMuXG5AZnVuY3Rpb24gbWF0LXR5cG9ncmFwaHktY29uZmlnKFxuICAkZm9udC1mYW1pbHk6ICAgJ1JvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmJyxcbiAgJGRpc3BsYXktNDogICAgIG1hdC10eXBvZ3JhcGh5LWxldmVsKDExMnB4LCAxMTJweCwgMzAwLCAkbGV0dGVyLXNwYWNpbmc6IC0wLjA1ZW0pLFxuICAkZGlzcGxheS0zOiAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoNTZweCwgNTZweCwgNDAwLCAkbGV0dGVyLXNwYWNpbmc6IC0wLjAyZW0pLFxuICAkZGlzcGxheS0yOiAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoNDVweCwgNDhweCwgNDAwLCAkbGV0dGVyLXNwYWNpbmc6IC0wLjAwNWVtKSxcbiAgJGRpc3BsYXktMTogICAgIG1hdC10eXBvZ3JhcGh5LWxldmVsKDM0cHgsIDQwcHgsIDQwMCksXG4gICRoZWFkbGluZTogICAgICBtYXQtdHlwb2dyYXBoeS1sZXZlbCgyNHB4LCAzMnB4LCA0MDApLFxuICAkdGl0bGU6ICAgICAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoMjBweCwgMzJweCwgNTAwKSxcbiAgJHN1YmhlYWRpbmctMjogIG1hdC10eXBvZ3JhcGh5LWxldmVsKDE2cHgsIDI4cHgsIDQwMCksXG4gICRzdWJoZWFkaW5nLTE6ICBtYXQtdHlwb2dyYXBoeS1sZXZlbCgxNXB4LCAyNHB4LCA0MDApLFxuICAkYm9keS0yOiAgICAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoMTRweCwgMjRweCwgNTAwKSxcbiAgJGJvZHktMTogICAgICAgIG1hdC10eXBvZ3JhcGh5LWxldmVsKDE0cHgsIDIwcHgsIDQwMCksXG4gICRjYXB0aW9uOiAgICAgICBtYXQtdHlwb2dyYXBoeS1sZXZlbCgxMnB4LCAyMHB4LCA0MDApLFxuICAkYnV0dG9uOiAgICAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoMTRweCwgMTRweCwgNTAwKSxcbiAgLy8gTGluZS1oZWlnaHQgbXVzdCBiZSB1bml0LWxlc3MgZnJhY3Rpb24gb2YgdGhlIGZvbnQtc2l6ZS5cbiAgJGlucHV0OiAgICAgICAgIG1hdC10eXBvZ3JhcGh5LWxldmVsKGluaGVyaXQsIDEuMTI1LCA0MDApXG4pIHtcblxuICAvLyBEZWNsYXJlIGFuIGluaXRpYWwgbWFwIHdpdGggYWxsIG9mIHRoZSBsZXZlbHMuXG4gICRjb25maWc6IChcbiAgICBkaXNwbGF5LTQ6ICAgICAgJGRpc3BsYXktNCxcbiAgICBkaXNwbGF5LTM6ICAgICAgJGRpc3BsYXktMyxcbiAgICBkaXNwbGF5LTI6ICAgICAgJGRpc3BsYXktMixcbiAgICBkaXNwbGF5LTE6ICAgICAgJGRpc3BsYXktMSxcbiAgICBoZWFkbGluZTogICAgICAgJGhlYWRsaW5lLFxuICAgIHRpdGxlOiAgICAgICAgICAkdGl0bGUsXG4gICAgc3ViaGVhZGluZy0yOiAgICRzdWJoZWFkaW5nLTIsXG4gICAgc3ViaGVhZGluZy0xOiAgICRzdWJoZWFkaW5nLTEsXG4gICAgYm9keS0yOiAgICAgICAgICRib2R5LTIsXG4gICAgYm9keS0xOiAgICAgICAgICRib2R5LTEsXG4gICAgY2FwdGlvbjogICAgICAgICRjYXB0aW9uLFxuICAgIGJ1dHRvbjogICAgICAgICAkYnV0dG9uLFxuICAgIGlucHV0OiAgICAgICAgICAkaW5wdXQsXG4gICk7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBsZXZlbHMgYW5kIHNldCB0aGUgYGZvbnQtZmFtaWx5YCBvZiB0aGUgb25lcyB0aGF0IGRvbid0IGhhdmUgb25lIHRvIHRoZSBiYXNlLlxuICAvLyBOb3RlIHRoYXQgU2FzcyBjYW4ndCBtb2RpZnkgbWFwcyBpbiBwbGFjZSwgd2hpY2ggbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIG1lcmdlIGFuZCByZS1hc3NpZ24uXG4gIEBlYWNoICRrZXksICRsZXZlbCBpbiAkY29uZmlnIHtcbiAgICBAaWYgbWFwLWdldCgkbGV2ZWwsIGZvbnQtZmFtaWx5KSA9PSBudWxsIHtcbiAgICAgICRuZXctbGV2ZWw6IG1hcC1tZXJnZSgkbGV2ZWwsIChmb250LWZhbWlseTogJGZvbnQtZmFtaWx5KSk7XG4gICAgICAkY29uZmlnOiBtYXAtbWVyZ2UoJGNvbmZpZywgKCRrZXk6ICRuZXctbGV2ZWwpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgdGhlIGJhc2UgZm9udCBmYW1pbHkgdG8gdGhlIGNvbmZpZy5cbiAgQHJldHVybiBtYXAtbWVyZ2UoJGNvbmZpZywgKGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHkpKTtcbn1cblxuLy8gQWRkcyB0aGUgYmFzZSB0eXBvZ3JhcGh5IHN0eWxlcywgYmFzZWQgb24gYSBjb25maWcuXG4vKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF0ZXJpYWwvdGhlbWUtbWl4aW4tYXBpICovXG5AbWl4aW4gbWF0LWJhc2UtdHlwb2dyYXBoeSgkY29uZmlnLCAkc2VsZWN0b3I6ICcubWF0LXR5cG9ncmFwaHknKSB7XG4gIC5tYXQtaDEsIC5tYXQtaGVhZGxpbmUsICN7JHNlbGVjdG9yfSBoMSB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGhlYWRsaW5lKTtcbiAgICBtYXJnaW46IDAgMCAxNnB4O1xuICB9XG5cbiAgLm1hdC1oMiwgLm1hdC10aXRsZSwgI3skc2VsZWN0b3J9IGgyIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgdGl0bGUpO1xuICAgIG1hcmdpbjogMCAwIDE2cHg7XG4gIH1cblxuICAubWF0LWgzLCAubWF0LXN1YmhlYWRpbmctMiwgI3skc2VsZWN0b3J9IGgzIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgc3ViaGVhZGluZy0yKTtcbiAgICBtYXJnaW46IDAgMCAxNnB4O1xuICB9XG5cbiAgLm1hdC1oNCwgLm1hdC1zdWJoZWFkaW5nLTEsICN7JHNlbGVjdG9yfSBoNCB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIHN1YmhlYWRpbmctMSk7XG4gICAgbWFyZ2luOiAwIDAgMTZweDtcbiAgfVxuXG4gIC8vIE5vdGU6IHRoZSBzcGVjIGRvZXNuJ3QgaGF2ZSBhbnl0aGluZyB0aGF0IHdvdWxkIGNvcnJlc3BvbmQgdG8gaDUgYW5kIGg2LCBidXQgd2UgYWRkIHRoZXNlIGZvclxuICAvLyBjb25zaXN0ZW5jeS4gVGhlIGZvbnQgc2l6ZXMgY29tZSBmcm9tIHRoZSBDaHJvbWUgdXNlciBhZ2VudCBzdHlsZXMgd2hpY2ggaGF2ZSBoNSBhdCAwLjgzZW1cbiAgLy8gYW5kIGg2IGF0IDAuNjdlbS5cbiAgLm1hdC1oNSwgI3skc2VsZWN0b3J9IGg1IHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1mb250LXNob3J0aGFuZChcbiAgICAgICAvLyBjYWxjIGlzIHVzZWQgaGVyZSB0byBzdXBwb3J0IGNzcyB2YXJpYWJsZXNcbiAgICAgIGNhbGMoI3ttYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSl9ICogMC44MyksXG4gICAgICBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0xKSxcbiAgICAgIG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBib2R5LTEpLFxuICAgICAgbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIGJvZHktMSlcbiAgICApO1xuXG4gICAgbWFyZ2luOiAwIDAgMTJweDtcbiAgfVxuXG4gIC5tYXQtaDYsICN7JHNlbGVjdG9yfSBoNiB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktZm9udC1zaG9ydGhhbmQoXG4gICAgICAgLy8gY2FsYyBpcyB1c2VkIGhlcmUgdG8gc3VwcG9ydCBjc3MgdmFyaWFibGVzXG4gICAgICBjYWxjKCN7bWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTEpfSAqIDAuNjcpLFxuICAgICAgbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMSksXG4gICAgICBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgYm9keS0xKSxcbiAgICAgIG1hdC1mb250LWZhbWlseSgkY29uZmlnLCBib2R5LTEpXG4gICAgKTtcblxuICAgIG1hcmdpbjogMCAwIDEycHg7XG4gIH1cblxuICAubWF0LWJvZHktc3Ryb25nLCAubWF0LWJvZHktMiB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGJvZHktMik7XG4gIH1cblxuICAubWF0LWJvZHksIC5tYXQtYm9keS0xLCAjeyRzZWxlY3Rvcn0ge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCBib2R5LTEpO1xuXG4gICAgcCB7XG4gICAgICBtYXJnaW46IDAgMCAxMnB4O1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtc21hbGwsIC5tYXQtY2FwdGlvbiB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGNhcHRpb24pO1xuICB9XG5cbiAgLm1hdC1kaXNwbGF5LTQsICN7JHNlbGVjdG9yfSAubWF0LWRpc3BsYXktNCB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGRpc3BsYXktNCk7XG4gICAgbWFyZ2luOiAwIDAgNTZweDtcbiAgfVxuXG4gIC5tYXQtZGlzcGxheS0zLCAjeyRzZWxlY3Rvcn0gLm1hdC1kaXNwbGF5LTMge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCBkaXNwbGF5LTMpO1xuICAgIG1hcmdpbjogMCAwIDY0cHg7XG4gIH1cblxuICAubWF0LWRpc3BsYXktMiwgI3skc2VsZWN0b3J9IC5tYXQtZGlzcGxheS0yIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgZGlzcGxheS0yKTtcbiAgICBtYXJnaW46IDAgMCA2NHB4O1xuICB9XG5cbiAgLm1hdC1kaXNwbGF5LTEsICN7JHNlbGVjdG9yfSAubWF0LWRpc3BsYXktMSB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGRpc3BsYXktMSk7XG4gICAgbWFyZ2luOiAwIDAgNjRweDtcbiAgfVxufVxuXG5cblxuXG5cbkBtaXhpbiBtYXQtYXV0b2NvbXBsZXRlLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcblxuICAubWF0LWF1dG9jb21wbGV0ZS1wYW5lbCB7XG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oNCwgJGNvbmZpZyk7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBjYXJkKTtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcblxuICAgIC8vIFNlbGVjdGVkIG9wdGlvbnMgaW4gYXV0b2NvbXBsZXRlcyBzaG91bGQgbm90IGJlIGdyYXksIGJ1dCB3ZVxuICAgIC8vIG9ubHkgd2FudCB0byBvdmVycmlkZSB0aGUgYmFja2dyb3VuZCBmb3Igc2VsZWN0ZWQgb3B0aW9ucyBpZlxuICAgIC8vIHRoZXkgYXJlICpub3QqIGluIGhvdmVyIG9yIGZvY3VzIHN0YXRlLiBUaGlzIGNoYW5nZSBoYXMgdG8gYmVcbiAgICAvLyBtYWRlIGhlcmUgYmVjYXVzZSBiYXNlIG9wdGlvbiBzdHlsZXMgYXJlIHNoYXJlZCBiZXR3ZWVuIHRoZVxuICAgIC8vIGF1dG9jb21wbGV0ZSBhbmQgdGhlIHNlbGVjdC5cbiAgICAubWF0LW9wdGlvbi5tYXQtc2VsZWN0ZWQ6bm90KC5tYXQtYWN0aXZlKTpub3QoOmhvdmVyKSB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuXG4gICAgICAmOm5vdCgubWF0LW9wdGlvbi1kaXNhYmxlZCkge1xuICAgICAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1hdXRvY29tcGxldGUtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gX21hdC1hdXRvY29tcGxldGUtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWF1dG9jb21wbGV0ZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWF1dG9jb21wbGV0ZScpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1hdXRvY29tcGxldGUtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1hdXRvY29tcGxldGUtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1hdXRvY29tcGxldGUtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgY29udGFpbnMgYWxsIG9mIHRoZSBzdHlsZXMgZm9yIHRoZSBiYWRnZVxuLy8gcmF0aGVyIHRoYW4ganVzdCB0aGUgY29sb3IvdGhlbWUgYmVjYXVzZSBvZlxuLy8gbm8gc3R5bGUgc2hlZXQgc3VwcG9ydCBmb3IgZGlyZWN0aXZlcy5cblxuXG5cblxuXG5cbiRtYXQtYmFkZ2UtZm9udC1zaXplOiAxMnB4O1xuJG1hdC1iYWRnZS1mb250LXdlaWdodDogNjAwO1xuJG1hdC1iYWRnZS1kZWZhdWx0LXNpemU6IDIycHggIWRlZmF1bHQ7XG4kbWF0LWJhZGdlLXNtYWxsLXNpemU6ICRtYXQtYmFkZ2UtZGVmYXVsdC1zaXplIC0gNjtcbiRtYXQtYmFkZ2UtbGFyZ2Utc2l6ZTogJG1hdC1iYWRnZS1kZWZhdWx0LXNpemUgKyA2O1xuXG4vLyBNaXhpbiBmb3IgYnVpbGRpbmcgb2Zmc2V0IGdpdmVuIGRpZmZlcmVudCBzaXplc1xuQG1peGluIF9tYXQtYmFkZ2Utc2l6ZSgkc2l6ZSkge1xuICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgIHdpZHRoOiAkc2l6ZTtcbiAgICBoZWlnaHQ6ICRzaXplO1xuICAgIGxpbmUtaGVpZ2h0OiAkc2l6ZTtcbiAgfVxuXG4gICYubWF0LWJhZGdlLWFib3ZlIHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgdG9wOiAtJHNpemUgLyAyO1xuICAgIH1cbiAgfVxuXG4gICYubWF0LWJhZGdlLWJlbG93IHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgYm90dG9tOiAtJHNpemUgLyAyO1xuICAgIH1cbiAgfVxuXG4gICYubWF0LWJhZGdlLWJlZm9yZSB7XG4gICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgIGxlZnQ6IC0kc2l6ZTtcbiAgICB9XG4gIH1cblxuICBbZGlyPSdydGwnXSAmLm1hdC1iYWRnZS1iZWZvcmUge1xuICAgIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgICBsZWZ0OiBhdXRvO1xuICAgICAgcmlnaHQ6IC0kc2l6ZTtcbiAgICB9XG4gIH1cblxuICAmLm1hdC1iYWRnZS1hZnRlciB7XG4gICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgIHJpZ2h0OiAtJHNpemU7XG4gICAgfVxuICB9XG5cbiAgW2Rpcj0ncnRsJ10gJi5tYXQtYmFkZ2UtYWZ0ZXIge1xuICAgIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgICByaWdodDogYXV0bztcbiAgICAgIGxlZnQ6IC0kc2l6ZTtcbiAgICB9XG4gIH1cblxuICAmLm1hdC1iYWRnZS1vdmVybGFwIHtcbiAgICAmLm1hdC1iYWRnZS1iZWZvcmUge1xuICAgICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgICAgbGVmdDogLSRzaXplIC8gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBbZGlyPSdydGwnXSAmLm1hdC1iYWRnZS1iZWZvcmUge1xuICAgICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgICAgbGVmdDogYXV0bztcbiAgICAgICAgcmlnaHQ6IC0kc2l6ZSAvIDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJi5tYXQtYmFkZ2UtYWZ0ZXIge1xuICAgICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgICAgcmlnaHQ6IC0kc2l6ZSAvIDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgW2Rpcj0ncnRsJ10gJi5tYXQtYmFkZ2UtYWZ0ZXIge1xuICAgICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgICAgcmlnaHQ6IGF1dG87XG4gICAgICAgIGxlZnQ6IC0kc2l6ZSAvIDI7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtYmFkZ2UtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnksIGRlZmF1bHQtY29udHJhc3QpO1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkcHJpbWFyeSk7XG5cbiAgICBAaW5jbHVkZSBjZGstaGlnaC1jb250cmFzdChhY3RpdmUsIG9mZikge1xuICAgICAgb3V0bGluZTogc29saWQgMXB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICB9XG4gIH1cblxuICAubWF0LWJhZGdlLWFjY2VudCB7XG4gICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYWNjZW50KTtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCwgZGVmYXVsdC1jb250cmFzdCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1iYWRnZS13YXJuIHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkd2FybiwgZGVmYXVsdC1jb250cmFzdCk7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJHdhcm4pO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYmFkZ2Uge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuXG4gIC5tYXQtYmFkZ2UtaGlkZGVuIHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cblxuICAubWF0LWJhZGdlLWRpc2FibGVkIHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgJGFwcC1iYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsICdiYWNrZ3JvdW5kJyk7XG4gICAgICAkYmFkZ2UtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtYnV0dG9uKTtcblxuICAgICAgLy8gVGhlIGRpc2FibGVkIGNvbG9yIHVzdWFsbHkgaGFzIHNvbWUga2luZCBvZiBvcGFjaXR5LCBidXQgYmVjYXVzZSB0aGUgYmFkZ2UgaXMgb3ZlcmxheWVkXG4gICAgICAvLyBvbiB0b3Agb2Ygc29tZXRoaW5nIGVsc2UsIGl0IHdvbid0IGxvb2sgZ29vZCBpZiBpdCdzIG9wYXF1ZS4gSWYgaXQgaXMgYSBjb2xvciAqdHlwZSosXG4gICAgICAvLyB3ZSBjb252ZXJ0IGl0IGludG8gYSBzb2xpZCBjb2xvciBieSB0YWtpbmcgdGhlIG9wYWNpdHkgZnJvbSB0aGUgcmdiYSB2YWx1ZSBhbmQgdXNpbmdcbiAgICAgIC8vIHRoZSB2YWx1ZSB0byBkZXRlcm1pbmUgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGJhY2tncm91bmQgdG8gcHV0IGludG8gZm9yZWdyb3VuZCB3aGVuXG4gICAgICAvLyBtaXhpbmcgdGhlIGNvbG9ycyB0b2dldGhlci5cbiAgICAgIEBpZiAodHlwZS1vZigkYmFkZ2UtY29sb3IpID09IGNvbG9yIGFuZCB0eXBlLW9mKCRhcHAtYmFja2dyb3VuZCkgPT0gY29sb3IpIHtcbiAgICAgICAgJGJhZGdlLW9wYWNpdHk6IG9wYWNpdHkoJGJhZGdlLWNvbG9yKTtcbiAgICAgICAgYmFja2dyb3VuZDogbWl4KCRhcHAtYmFja2dyb3VuZCwgcmdiYSgkYmFkZ2UtY29sb3IsIDEpLCAoMSAtICRiYWRnZS1vcGFjaXR5KSAqIDEwMCUpO1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBiYWNrZ3JvdW5kOiAkYmFkZ2UtY29sb3I7XG4gICAgICB9XG5cbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAyMDBtcyBlYXNlLWluLW91dDtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuNik7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG5cbiAgLm5nLWFuaW1hdGUtZGlzYWJsZWQgLm1hdC1iYWRnZS1jb250ZW50LFxuICAubWF0LWJhZGdlLWNvbnRlbnQuX21hdC1hbmltYXRpb24tbm9vcGFibGUge1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG4gIH1cblxuICAvLyBUaGUgYWN0aXZlIGNsYXNzIGlzIGFkZGVkIGFmdGVyIHRoZSBlbGVtZW50IGlzIGFkZGVkXG4gIC8vIHNvIGl0IGNhbiBhbmltYXRlIHNjYWxlIHRvIGRlZmF1bHRcbiAgLm1hdC1iYWRnZS1jb250ZW50Lm1hdC1iYWRnZS1hY3RpdmUge1xuICAgIC8vIFNjYWxlIHRvIGBub25lYCBpbnN0ZWFkIG9mIGAxYCB0byBhdm9pZCBibHVycnkgdGV4dCBpbiBzb21lIGJyb3dzZXJzLlxuICAgIHRyYW5zZm9ybTogbm9uZTtcbiAgfVxuXG4gIC5tYXQtYmFkZ2Utc21hbGwge1xuICAgIEBpbmNsdWRlIF9tYXQtYmFkZ2Utc2l6ZSgkbWF0LWJhZGdlLXNtYWxsLXNpemUpO1xuICB9XG4gIC5tYXQtYmFkZ2UtbWVkaXVtIHtcbiAgICBAaW5jbHVkZSBfbWF0LWJhZGdlLXNpemUoJG1hdC1iYWRnZS1kZWZhdWx0LXNpemUpO1xuICB9XG4gIC5tYXQtYmFkZ2UtbGFyZ2Uge1xuICAgIEBpbmNsdWRlIF9tYXQtYmFkZ2Utc2l6ZSgkbWF0LWJhZGdlLWxhcmdlLXNpemUpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtYmFkZ2UtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgZm9udC13ZWlnaHQ6ICRtYXQtYmFkZ2UtZm9udC13ZWlnaHQ7XG4gICAgZm9udC1zaXplOiAkbWF0LWJhZGdlLWZvbnQtc2l6ZTtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1iYWRnZS1zbWFsbCAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgIC8vIFNldCB0aGUgZm9udCBzaXplIHRvIDc1JSBvZiB0aGUgb3JpZ2luYWwuXG4gICAgZm9udC1zaXplOiAkbWF0LWJhZGdlLWZvbnQtc2l6ZSAqIDAuNzU7XG4gIH1cblxuICAubWF0LWJhZGdlLWxhcmdlIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgZm9udC1zaXplOiAkbWF0LWJhZGdlLWZvbnQtc2l6ZSAqIDI7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtYmFkZ2UtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWJhZGdlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtYmFkZ2UnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtYmFkZ2UtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1iYWRnZS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWJhZGdlLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LWJvdHRvbS1zaGVldC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1ib3R0b20tc2hlZXQtY29udGFpbmVyIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbigxNiwgJGNvbmZpZyk7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBkaWFsb2cpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtYm90dG9tLXNoZWV0LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LWJvdHRvbS1zaGVldC1jb250YWluZXIge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCBib2R5LTEpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LWJvdHRvbS1zaGVldC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtYm90dG9tLXNoZWV0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtYm90dG9tLXNoZWV0Jykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWJvdHRvbS1zaGVldC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWJvdHRvbS1zaGVldC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWJvdHRvbS1zaGVldC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cbiRfbWF0LWJ1dHRvbi1yaXBwbGUtb3BhY2l0eTogMC4xO1xuXG4vLyBBcHBsaWVzIGEgZm9jdXMgc3R5bGUgdG8gYW4gbWF0LWJ1dHRvbiBlbGVtZW50IGZvciBlYWNoIG9mIHRoZSBzdXBwb3J0ZWQgcGFsZXR0ZXMuXG5AbWl4aW4gX21hdC1idXR0b24tZm9jdXMtb3ZlcmxheS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcblxuICAmLm1hdC1wcmltYXJ5IC5tYXQtYnV0dG9uLWZvY3VzLW92ZXJsYXkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSk7XG4gIH1cblxuICAmLm1hdC1hY2NlbnQgLm1hdC1idXR0b24tZm9jdXMtb3ZlcmxheSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRhY2NlbnQpO1xuICB9XG5cbiAgJi5tYXQtd2FybiAubWF0LWJ1dHRvbi1mb2N1cy1vdmVybGF5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHdhcm4pO1xuICB9XG5cbiAgJi5tYXQtYnV0dG9uLWRpc2FibGVkIC5tYXQtYnV0dG9uLWZvY3VzLW92ZXJsYXkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG59XG5cbi8vIEFwcGxpZXMgdGhlIGJhY2tncm91bmQgY29sb3IgZm9yIGEgcmlwcGxlLiBJZiB0aGUgdmFsdWUgcHJvdmlkZWQgaXMgbm90IGEgU2FzcyBjb2xvcixcbi8vIHdlIGFzc3VtZSB0aGF0IHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBDU1MgdmFyaWFibGUuIFNpbmNlIHdlIGNhbid0IHBlcmZvcm0gYWxwaGEtYmxlbmRpbmdcbi8vIG9uIGEgQ1NTIHZhcmlhYmxlLCB3ZSBpbnN0ZWFkIGFkZCB0aGUgb3BhY2l0eSBkaXJlY3RseSB0byB0aGUgcmlwcGxlIGVsZW1lbnQuXG5AbWl4aW4gX21hdC1idXR0b24tcmlwcGxlLWJhY2tncm91bmQoJHBhbGV0dGUsICRodWUsICRvcGFjaXR5KSB7XG4gICRiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUsICRodWUsICRvcGFjaXR5KTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtY29sb3I7XG4gIEBpZiAodHlwZS1vZigkYmFja2dyb3VuZC1jb2xvcikgIT0gY29sb3IpIHtcbiAgICBvcGFjaXR5OiAkb3BhY2l0eTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1idXR0b24tcmlwcGxlLWNvbG9yKCR0aGVtZSwgJGh1ZSwgJG9wYWNpdHk6ICRfbWF0LWJ1dHRvbi1yaXBwbGUtb3BhY2l0eSkge1xuICAkcHJpbWFyeTogbWFwLWdldCgkdGhlbWUsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCR0aGVtZSwgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJHRoZW1lLCB3YXJuKTtcblxuICAmLm1hdC1wcmltYXJ5IC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLXJpcHBsZS1iYWNrZ3JvdW5kKCRwcmltYXJ5LCAkaHVlLCAkb3BhY2l0eSk7XG4gIH1cblxuICAmLm1hdC1hY2NlbnQgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgQGluY2x1ZGUgX21hdC1idXR0b24tcmlwcGxlLWJhY2tncm91bmQoJGFjY2VudCwgJGh1ZSwgJG9wYWNpdHkpO1xuICB9XG5cbiAgJi5tYXQtd2FybiAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICBAaW5jbHVkZSBfbWF0LWJ1dHRvbi1yaXBwbGUtYmFja2dyb3VuZCgkd2FybiwgJGh1ZSwgJG9wYWNpdHkpO1xuICB9XG59XG5cbi8vIEFwcGxpZXMgYSBwcm9wZXJ0eSB0byBhbiBtYXQtYnV0dG9uIGVsZW1lbnQgZm9yIGVhY2ggb2YgdGhlIHN1cHBvcnRlZCBwYWxldHRlcy5cbkBtaXhpbiBfbWF0LWJ1dHRvbi10aGVtZS1wcm9wZXJ0eSgkdGhlbWUsICRwcm9wZXJ0eSwgJGh1ZSkge1xuICAkcHJpbWFyeTogbWFwLWdldCgkdGhlbWUsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCR0aGVtZSwgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJHRoZW1lLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJHRoZW1lLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJHRoZW1lLCBmb3JlZ3JvdW5kKTtcblxuICAmLm1hdC1wcmltYXJ5IHtcbiAgICAjeyRwcm9wZXJ0eX06IG1hdC1jb2xvcigkcHJpbWFyeSwgJGh1ZSk7XG4gIH1cbiAgJi5tYXQtYWNjZW50IHtcbiAgICAjeyRwcm9wZXJ0eX06IG1hdC1jb2xvcigkYWNjZW50LCAkaHVlKTtcbiAgfVxuICAmLm1hdC13YXJuIHtcbiAgICAjeyRwcm9wZXJ0eX06IG1hdC1jb2xvcigkd2FybiwgJGh1ZSk7XG4gIH1cblxuICAmLm1hdC1wcmltYXJ5LCAmLm1hdC1hY2NlbnQsICYubWF0LXdhcm4sICYubWF0LWJ1dHRvbi1kaXNhYmxlZCB7XG4gICAgJi5tYXQtYnV0dG9uLWRpc2FibGVkIHtcbiAgICAgICRwYWxldHRlOiBpZigkcHJvcGVydHkgPT0gJ2NvbG9yJywgJGZvcmVncm91bmQsICRiYWNrZ3JvdW5kKTtcbiAgICAgICN7JHByb3BlcnR5fTogbWF0LWNvbG9yKCRwYWxldHRlLCBkaXNhYmxlZC1idXR0b24pO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LWJ1dHRvbi1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtYnV0dG9uLCAubWF0LWljb24tYnV0dG9uLCAubWF0LXN0cm9rZWQtYnV0dG9uIHtcbiAgICAvLyBCdXR0b25zIHdpdGhvdXQgYSBiYWNrZ3JvdW5kIGNvbG9yIHNob3VsZCBpbmhlcml0IHRoZSBmb250IGNvbG9yLiBUaGlzIGlzIG5lY2Vzc2FyeSB0b1xuICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBidXR0b24gaXMgcmVhZGFibGUgb24gY3VzdG9tIGJhY2tncm91bmQgY29sb3JzLiBJdCdzIHdyb25nIHRvIGFsd2F5cyBhc3N1bWVcbiAgICAvLyB0aGF0IHRob3NlIGJ1dHRvbnMgYXJlIGFsd2F5cyBwbGFjZWQgaW5zaWRlIG9mIGNvbnRhaW5lcnMgd2l0aCB0aGUgZGVmYXVsdCBiYWNrZ3JvdW5kXG4gICAgLy8gY29sb3Igb2YgdGhlIHRoZW1lIChlLmcuIHRoZW1lZCB0b29sYmFycykuXG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cbiAgICBAaW5jbHVkZSBfbWF0LWJ1dHRvbi10aGVtZS1wcm9wZXJ0eSgkY29uZmlnLCAnY29sb3InLCB0ZXh0KTtcbiAgICBAaW5jbHVkZSBfbWF0LWJ1dHRvbi1mb2N1cy1vdmVybGF5LWNvbG9yKCRjb25maWcpO1xuXG4gICAgLy8gU2V0dXAgdGhlIHJpcHBsZSBjb2xvciB0byBiZSBiYXNlZCBvbiB0aGUgdGV4dCBjb2xvci4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHJpcHBsZXNcbiAgICAvLyBhcmUgbWF0Y2hpbmcgd2l0aCB0aGUgY3VycmVudCB0aGVtZSBwYWxldHRlIGFuZCBhcmUgaW4gY29udHJhc3QgdG8gdGhlIGJhY2tncm91bmQgY29sb3JcbiAgICAvLyAoZS5nIGluIHRoZW1lZCB0b29sYmFycykuXG4gICAgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgICBvcGFjaXR5OiAkX21hdC1idXR0b24tcmlwcGxlLW9wYWNpdHk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1idXR0b24tZm9jdXMtb3ZlcmxheSB7XG4gICAgYmFja2dyb3VuZDogbWFwX2dldCgkZm9yZWdyb3VuZCwgYmFzZSk7XG4gIH1cblxuICAvLyBOb3RlOiB0aGlzIG5lZWRzIGEgYml0IGV4dHJhIHNwZWNpZmljaXR5LCBiZWNhdXNlIHdlJ3JlIG5vdCBndWFyYW50ZWVkIHRoZSBpbmNsdXNpb25cbiAgLy8gb3JkZXIgb2YgdGhlIHRoZW1lIHN0eWxlcyBhbmQgdGhlIGJ1dHRvbiByZXNldCBtYXkgZW5kIHVwIHJlc2V0dGluZyB0aGlzIGFzIHdlbGwuXG4gIC5tYXQtc3Ryb2tlZC1idXR0b246bm90KC5tYXQtYnV0dG9uLWRpc2FibGVkKSB7XG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuICB9XG5cbiAgLm1hdC1mbGF0LWJ1dHRvbiwgLm1hdC1yYWlzZWQtYnV0dG9uLCAubWF0LWZhYiwgLm1hdC1taW5pLWZhYiB7XG4gICAgLy8gRGVmYXVsdCBmb250IGFuZCBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gbm90IHVzaW5nIGFueSBjb2xvciBwYWxldHRlLlxuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgcmFpc2VkLWJ1dHRvbik7XG5cbiAgICBAaW5jbHVkZSBfbWF0LWJ1dHRvbi10aGVtZS1wcm9wZXJ0eSgkY29uZmlnLCAnY29sb3InLCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgICBAaW5jbHVkZSBfbWF0LWJ1dHRvbi10aGVtZS1wcm9wZXJ0eSgkY29uZmlnLCAnYmFja2dyb3VuZC1jb2xvcicsIGRlZmF1bHQpO1xuICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLXJpcHBsZS1jb2xvcigkY29uZmlnLCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgfVxuXG4gIC5tYXQtc3Ryb2tlZC1idXR0b24sIC5tYXQtZmxhdC1idXR0b24ge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDAsICRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbigyLCAkY29uZmlnKTtcblxuICAgICY6bm90KC5tYXQtYnV0dG9uLWRpc2FibGVkKTphY3RpdmUge1xuICAgICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oOCwgJGNvbmZpZyk7XG4gICAgfVxuXG4gICAgJi5tYXQtYnV0dG9uLWRpc2FibGVkIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDAsICRjb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZmFiLCAubWF0LW1pbmktZmFiIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbig2LCAkY29uZmlnKTtcblxuICAgICY6bm90KC5tYXQtYnV0dG9uLWRpc2FibGVkKTphY3RpdmUge1xuICAgICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oMTIsICRjb25maWcpO1xuICAgIH1cblxuICAgICYubWF0LWJ1dHRvbi1kaXNhYmxlZCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbigwLCAkY29uZmlnKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1idXR0b24tdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtYnV0dG9uLCAubWF0LXJhaXNlZC1idXR0b24sIC5tYXQtaWNvbi1idXR0b24sIC5tYXQtc3Ryb2tlZC1idXR0b24sXG4gIC5tYXQtZmxhdC1idXR0b24sIC5tYXQtZmFiLCAubWF0LW1pbmktZmFiIHtcbiAgICBmb250OiB7XG4gICAgICBmYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnLCBidXR0b24pO1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBidXR0b24pO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYnV0dG9uKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtYnV0dG9uLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1idXR0b24tdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1idXR0b24nKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtYnV0dG9uLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtYnV0dG9uLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG4vLyBUYWtlbiBmcm9tIG1hdC1kZW5zaXR5IHdpdGggc21hbGwgbW9kaWZpY2F0aW9ucyB0byBub3QgcmVseSBvbiB0aGUgbmV3IFNhc3MgbW9kdWxlXG4vLyBzeXN0ZW0sIGFuZCB0byBzdXBwb3J0IGFyYml0cmFyeSBwcm9wZXJ0aWVzIGluIGEgZGVuc2l0eSBjb25maWd1cmF0aW9uLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9tYXN0ZXIvcGFja2FnZXMvbWRjLWRlbnNpdHlcblxuJF9tYXQtZGVuc2l0eS1pbnRlcnZhbDogNHB4ICFkZWZhdWx0O1xuJF9tYXQtZGVuc2l0eS1taW5pbXVtLXNjYWxlOiBtaW5pbXVtICFkZWZhdWx0O1xuJF9tYXQtZGVuc2l0eS1tYXhpbXVtLXNjYWxlOiBtYXhpbXVtICFkZWZhdWx0O1xuJF9tYXQtZGVuc2l0eS1zdXBwb3J0ZWQtc2NhbGVzOiAoZGVmYXVsdCwgbWluaW11bSwgbWF4aW11bSkgIWRlZmF1bHQ7XG4kX21hdC1kZW5zaXR5LWRlZmF1bHQtc2NhbGU6IDAgIWRlZmF1bHQ7XG5cbi8vIFdoZXRoZXIgZGVuc2l0eSBzaG91bGQgYmUgZ2VuZXJhdGVkIGF0IHJvb3QuIFRoaXMgd2lsbCBiZSB0ZW1wb3JhcmlseSBzZXQgdG8gYHRydWVgXG4vLyB3aGVuZXZlciBkZW5zaXR5IHN0eWxlcyBmb3IgbGVnYWN5IHRoZW1lcyBhcmUgZ2VuZXJhdGVkLlxuJF9tYXQtZGVuc2l0eS1nZW5lcmF0ZS1hdC1yb290OiBmYWxzZTtcbi8vIFdoZXRoZXIgZGVuc2l0eSBzdHlsZXMgc2hvdWxkIGJlIGdlbmVyYXRlZC4gVGhpcyB3aWxsIGJlIHRlbXBvcmFyaWx5IHNldCB0byBgZmFsc2VgIGlmXG4vLyBkdXBsaWNhdGUgZGVuc2l0eSBzdHlsZXMgZm9yIGEgbGVnYWN5IHRoZW1lIHdvdWxkIGJlIGdlbmVyYXRlZC4gRm9yIGxlZ2FjeSB0aGVtZXMsXG4vLyB3ZSBhbHdheXMgZ2VuZXJhdGUgdGhlIGRlZmF1bHQgZGVuc2l0eSAqKm9ubHkgb25jZSoqIGF0IHJvb3QuXG4kX21hdC1kZW5zaXR5LWdlbmVyYXRlLXN0eWxlczogdHJ1ZTtcblxuLy8gTWl4aW4gdGhhdCBjYW4gYmUgdXNlZCB0byB3cmFwIGRlbnNpdHkgc3R5bGVzIG9mIGdpdmVuIGNvbXBvbmVudHMuIFRoZSBtaXhpbiB3aWxsXG4vLyBtb3ZlIHRoZSBkZW5zaXR5IHN0eWxlcyB0byByb290IGlmIHRoZSBgJF9tYXQtZGVuc2l0eS1nZW5lcmF0ZS1hdC1yb290YCBnbG9iYWwgdmFyaWFibGVcbi8vIGlzIHNldC4gSWYgYCRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtc3R5bGVzYCBpcyBzZXQgdG8gYGZhbHNlYCwgZ2VuZXJhdGlvbiBvZiBkZW5zaXR5XG4vLyBzdHlsZXMgd3JhcHBlZCBpbiB0aGlzIG1peGluIGlzIHNraXBwZWQuIFRoaXMgbWl4aW4gZXhpc3RzIHRvIGltcHJvdmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8vIG9mIHRoZSBuZXcgdGhlbWluZyBBUEkgd2hlcmUgZGVuc2l0eSBzdHlsZXMgYXJlIGluY2x1ZGVkIGFzIHBhcnQgb2YgdGhlbWVzLiBQcmV2aW91c2x5LFxuLy8gZGVuc2l0eSBzdHlsZXMgb2YgY29tcG9uZW50cyB3ZXJlIHBhcnQgb2YgdGhlaXIgYmFzZSBzdHlsZXMuIFdpdGggdGhlIG5ldyBBUEksIHRoZXkgYXJlXG4vLyBwYXJ0IG9mIHRoZSB0aGVtaW5nIHN5c3RlbS4gVGhlIGA8Li4+LXRoZW1lYCBtaXhpbnMgZ2VuZXJhdGUgZGVuc2l0eSBieSBkZWZhdWx0IHVubGVzc1xuLy8gdGhlIGRlbnNpdHkgY29uZmlndXJhdGlvbiBpcyBleHBsaWNpdGx5IHNwZWNpZmllZCBhcyBwZXIgbmV3IEFQSS4gVGhpcyBtZWFucywgdGhhdCBwcm9qZWN0c1xuLy8gdXNpbmcgYDwuLj4tdGhlbWVgIG1peGlucyBmb3Igc2VwYXJhdGUgdGhlbWVzIChsaWtlIGAuZGFyay10aGVtZWApIHdpbGwgY2F1c2UgZHVwbGljYXRlXG4vLyBkZW5zaXR5IHN0eWxlcy4gVGhpcyBpcyBicmVha2luZyBhcyBpdCBpbmNyZWFzZXMgc3BlY2lmaWNpdHkgb2YgZGVuc2l0eSBzdHlsZXMuIFRoaXMgbWl4aW5cbi8vIHByb3ZpZGVzIGFuIEFQSSB0byBjb250cm9sIGdlbmVyYXRpb24gb2YgZGVuc2l0eSBzdHlsZXMgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZXkgYXJlIG9ubHlcbi8vIGNyZWF0ZWQgKm9uY2UqIGFuZCBhdCByb290LlxuQG1peGluIF9tYXQtZGVuc2l0eS1sZWdhY3ktY29tcGF0aWJpbGl0eSgpIHtcbiAgQGlmICRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtc3R5bGVzIGFuZCAkX21hdC1kZW5zaXR5LWdlbmVyYXRlLWF0LXJvb3Qge1xuICAgIEBhdC1yb290IHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkX21hdC1kZW5zaXR5LWdlbmVyYXRlLXN0eWxlcyB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQGZ1bmN0aW9uIF9tYXQtZGVuc2l0eS1wcm9wLXZhbHVlKCRkZW5zaXR5LWNvbmZpZywgJGRlbnNpdHktc2NhbGUsICRwcm9wZXJ0eS1uYW1lKSB7XG4gIEBpZiAodHlwZS1vZigkZGVuc2l0eS1zY2FsZSkgPT0gJ3N0cmluZycgYW5kXG4gICAgICBpbmRleCgkbGlzdDogJF9tYXQtZGVuc2l0eS1zdXBwb3J0ZWQtc2NhbGVzLCAkdmFsdWU6ICRkZW5zaXR5LXNjYWxlKSA9PSBudWxsKSB7XG4gICAgQGVycm9yICdtYXQtZGVuc2l0eTogU3VwcG9ydGVkIGRlbnNpdHkgc2NhbGVzICN7JF9tYXQtZGVuc2l0eS1zdXBwb3J0ZWQtc2NhbGVzfSwgJyAgK1xuICAgICAgJ2J1dCByZWNlaXZlZCAjeyRkZW5zaXR5LXNjYWxlfS4nO1xuICB9XG5cbiAgJHZhbHVlOiBudWxsO1xuICAkcHJvcGVydHktc2NhbGUtbWFwOiBtYXBfZ2V0KCRkZW5zaXR5LWNvbmZpZywgJHByb3BlcnR5LW5hbWUpO1xuXG4gIEBpZiBtYXBfaGFzX2tleSgkcHJvcGVydHktc2NhbGUtbWFwLCAkZGVuc2l0eS1zY2FsZSkge1xuICAgICR2YWx1ZTogbWFwX2dldCgkcHJvcGVydHktc2NhbGUtbWFwLCAkZGVuc2l0eS1zY2FsZSk7XG4gIH1cbiAgQGVsc2Uge1xuICAgICR2YWx1ZTogbWFwX2dldCgkcHJvcGVydHktc2NhbGUtbWFwLCBkZWZhdWx0KSArICRkZW5zaXR5LXNjYWxlICogJF9tYXQtZGVuc2l0eS1pbnRlcnZhbDtcbiAgfVxuXG4gICRtaW4tdmFsdWU6IG1hcF9nZXQoJHByb3BlcnR5LXNjYWxlLW1hcCwgJF9tYXQtZGVuc2l0eS1taW5pbXVtLXNjYWxlKTtcbiAgJG1heC12YWx1ZTogbWFwX2dldCgkcHJvcGVydHktc2NhbGUtbWFwLCAkX21hdC1kZW5zaXR5LW1heGltdW0tc2NhbGUpO1xuXG4gIEBpZiAoJHZhbHVlIDwgJG1pbi12YWx1ZSBvciAkdmFsdWUgPiAkbWF4LXZhbHVlKSB7XG4gICAgQGVycm9yICdtYXQtZGVuc2l0eTogI3skcHJvcGVydHktbmFtZX0gbXVzdCBiZSBiZXR3ZWVuICN7JG1pbi12YWx1ZX0gYW5kICcgK1xuICAgICAgJyN7JG1heC12YWx1ZX0gKGluY2x1c2l2ZSksIGJ1dCByZWNlaXZlZCAjeyR2YWx1ZX0uJztcbiAgfVxuXG4gIEByZXR1cm4gJHZhbHVlO1xufVxuXG4kbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtaGVpZ2h0OiA0OHB4ICFkZWZhdWx0O1xuLy8gTWluaW11bSBoZWlnaHQgZm9yIGhpZ2hlc3QgZGVuc2l0eSBjYW4gdmFyeSBiYXNlZCBvbiB0aGUgY29udGVudCB0aGF0IGRldmVsb3BlcnNcbi8vIHByb2plY3QgaW50byBidXR0b24tdG9nZ2xlJ3MuIFdlIHVzZSBhIG1pbmltdW0gb2YgYDI0cHhgIHRob3VnaCBiZWNhdXNlIGNvbW1vbmx5XG4vLyBpY29ucyBvciB0ZXh0IGFyZSBkaXNwbGF5ZWQuIEljb25zIGJ5IGRlZmF1bHQgaGF2ZSBhIHNpemUgb2YgYDI0cHhgLlxuJG1hdC1idXR0b24tdG9nZ2xlLXN0YW5kYXJkLW1pbmltdW0taGVpZ2h0OiAyNHB4ICFkZWZhdWx0O1xuJG1hdC1idXR0b24tdG9nZ2xlLXN0YW5kYXJkLW1heGltdW0taGVpZ2h0OiAkbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtaGVpZ2h0ICFkZWZhdWx0O1xuXG4kbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtZGVuc2l0eS1jb25maWc6IChcbiAgaGVpZ2h0OiAoXG4gICAgZGVmYXVsdDogJG1hdC1idXR0b24tdG9nZ2xlLXN0YW5kYXJkLWhlaWdodCxcbiAgICBtYXhpbXVtOiAkbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1hdC1idXR0b24tdG9nZ2xlLXN0YW5kYXJkLW1pbmltdW0taGVpZ2h0LFxuICApXG4pICFkZWZhdWx0O1xuXG5cbkBtaXhpbiBtYXQtYnV0dG9uLXRvZ2dsZS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRkaXZpZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1zdGFuZGFsb25lLFxuICAubWF0LWJ1dHRvbi10b2dnbGUtZ3JvdXAge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKDIsICRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1idXR0b24tdG9nZ2xlLXN0YW5kYWxvbmUubWF0LWJ1dHRvbi10b2dnbGUtYXBwZWFyYW5jZS1zdGFuZGFyZCxcbiAgLm1hdC1idXR0b24tdG9nZ2xlLWdyb3VwLWFwcGVhcmFuY2Utc3RhbmRhcmQge1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gIH1cblxuICAubWF0LWJ1dHRvbi10b2dnbGUge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGhpbnQtdGV4dCk7XG5cbiAgICAubWF0LWJ1dHRvbi10b2dnbGUtZm9jdXMtb3ZlcmxheSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGZvY3VzZWQtYnV0dG9uKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWJ1dHRvbi10b2dnbGUtYXBwZWFyYW5jZS1zdGFuZGFyZCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBjYXJkKTtcblxuICAgIC5tYXQtYnV0dG9uLXRvZ2dsZS1mb2N1cy1vdmVybGF5IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgZm9jdXNlZC1idXR0b24sIDEpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1ncm91cC1hcHBlYXJhbmNlLXN0YW5kYXJkIC5tYXQtYnV0dG9uLXRvZ2dsZSArIC5tYXQtYnV0dG9uLXRvZ2dsZSB7XG4gICAgYm9yZGVyLWxlZnQ6IHNvbGlkIDFweCAkZGl2aWRlci1jb2xvcjtcbiAgfVxuXG4gIFtkaXI9J3J0bCddIC5tYXQtYnV0dG9uLXRvZ2dsZS1ncm91cC1hcHBlYXJhbmNlLXN0YW5kYXJkIC5tYXQtYnV0dG9uLXRvZ2dsZSArIC5tYXQtYnV0dG9uLXRvZ2dsZSB7XG4gICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgYm9yZGVyLXJpZ2h0OiBzb2xpZCAxcHggJGRpdmlkZXItY29sb3I7XG4gIH1cblxuICAubWF0LWJ1dHRvbi10b2dnbGUtZ3JvdXAtYXBwZWFyYW5jZS1zdGFuZGFyZC5tYXQtYnV0dG9uLXRvZ2dsZS12ZXJ0aWNhbCB7XG4gICAgLm1hdC1idXR0b24tdG9nZ2xlICsgLm1hdC1idXR0b24tdG9nZ2xlIHtcbiAgICAgIGJvcmRlci1sZWZ0OiBub25lO1xuICAgICAgYm9yZGVyLXJpZ2h0OiBub25lO1xuICAgICAgYm9yZGVyLXRvcDogc29saWQgMXB4ICRkaXZpZGVyLWNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1jaGVja2VkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIHNlbGVjdGVkLWJ1dHRvbik7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuXG4gICAgJi5tYXQtYnV0dG9uLXRvZ2dsZS1hcHBlYXJhbmNlLXN0YW5kYXJkIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1kaXNhYmxlZCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtYnV0dG9uKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGRpc2FibGVkLWJ1dHRvbi10b2dnbGUpO1xuXG4gICAgJi5tYXQtYnV0dG9uLXRvZ2dsZS1hcHBlYXJhbmNlLXN0YW5kYXJkIHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCk7XG4gICAgfVxuXG4gICAgJi5tYXQtYnV0dG9uLXRvZ2dsZS1jaGVja2VkIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgc2VsZWN0ZWQtZGlzYWJsZWQtYnV0dG9uKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhbG9uZS5tYXQtYnV0dG9uLXRvZ2dsZS1hcHBlYXJhbmNlLXN0YW5kYXJkLFxuICAubWF0LWJ1dHRvbi10b2dnbGUtZ3JvdXAtYXBwZWFyYW5jZS1zdGFuZGFyZCB7XG4gICAgYm9yZGVyOiBzb2xpZCAxcHggJGRpdmlkZXItY29sb3I7XG4gIH1cbn1cblxuQG1peGluIG1hdC1idXR0b24tdG9nZ2xlLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LWJ1dHRvbi10b2dnbGUge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtYnV0dG9uLXRvZ2dsZS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGRlbnNpdHktc2NhbGU6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRzdGFuZGFyZC1oZWlnaHQ6IF9tYXQtZGVuc2l0eS1wcm9wLXZhbHVlKFxuICAgICAgJG1hdC1idXR0b24tdG9nZ2xlLXN0YW5kYXJkLWRlbnNpdHktY29uZmlnLCAkZGVuc2l0eS1zY2FsZSwgaGVpZ2h0KTtcblxuICBAaW5jbHVkZSBfbWF0LWRlbnNpdHktbGVnYWN5LWNvbXBhdGliaWxpdHkoKSB7XG4gICAgLm1hdC1idXR0b24tdG9nZ2xlLWFwcGVhcmFuY2Utc3RhbmRhcmQgLm1hdC1idXR0b24tdG9nZ2xlLWxhYmVsLWNvbnRlbnQge1xuICAgICAgbGluZS1oZWlnaHQ6ICRzdGFuZGFyZC1oZWlnaHQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtYnV0dG9uLXRvZ2dsZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWJ1dHRvbi10b2dnbGUnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtYnV0dG9uLXRvZ2dsZS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWJ1dHRvbi10b2dnbGUtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1idXR0b24tdG9nZ2xlLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtY2FyZC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1jYXJkIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbigxLCAkY29uZmlnKTtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuXG4gICAgLy8gTmVlZHMgZXh0cmEgc3BlY2lmaWNpdHkgdG8gYmUgYWJsZSB0byBvdmVycmlkZSB0aGUgZWxldmF0aW9uIHNlbGVjdG9ycy5cbiAgICAmLm1hdC1jYXJkLWZsYXQge1xuICAgICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oMCwgJGNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1jYXJkLXN1YnRpdGxlIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1jYXJkLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LWNhcmQge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LWNhcmQtdGl0bGUge1xuICAgIGZvbnQ6IHtcbiAgICAgIHNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgaGVhZGxpbmUpO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgdGl0bGUpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtY2FyZC1oZWFkZXIgLm1hdC1jYXJkLXRpdGxlIHtcbiAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgdGl0bGUpO1xuICB9XG5cbiAgLm1hdC1jYXJkLXN1YnRpdGxlLFxuICAubWF0LWNhcmQtY29udGVudCB7XG4gICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSk7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtY2FyZC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtY2FyZC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWNhcmQnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtY2FyZC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWNhcmQtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1jYXJkLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuQG1peGluIG1hdC1jaGVja2JveC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuXG4gIC8vIFRoZSBjb2xvciBvZiB0aGUgY2hlY2tib3gncyBjaGVja21hcmsgLyBtaXhlZG1hcmsuXG4gICRjaGVja2JveC1tYXJrLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGJhY2tncm91bmQpO1xuXG4gIC8vIE5PVEUodHJhdmlza2F1Zm1hbik6IFdoaWxlIHRoZSBzcGVjIGNhbGxzIGZvciB0cmFuc2x1Y2VudCBibGFja3Mvd2hpdGVzIGZvciBkaXNhYmxlZCBjb2xvcnMsXG4gIC8vIHRoaXMgZG9lcyBub3Qgd29yayB3ZWxsIHdpdGggZWxlbWVudHMgbGF5ZXJlZCBvbiB0b3Agb2Ygb25lIGFub3RoZXIuIFRvIGdldCBhcm91bmQgdGhpcyB3ZVxuICAvLyBibGVuZCB0aGUgY29sb3JzIHRvZ2V0aGVyIGJhc2VkIG9uIHRoZSBiYXNlIGNvbG9yIGFuZCB0aGUgdGhlbWUgYmFja2dyb3VuZC5cbiAgJHdoaXRlLTMwcGN0LW9wYWNpdHktb24tZGFyazogIzY4Njg2ODtcbiAgJGJsYWNrLTI2cGN0LW9wYWNpdHktb24tbGlnaHQ6ICNiMGIwYjA7XG4gICRkaXNhYmxlZC1jb2xvcjogaWYoJGlzLWRhcmstdGhlbWUsICR3aGl0ZS0zMHBjdC1vcGFjaXR5LW9uLWRhcmssICRibGFjay0yNnBjdC1vcGFjaXR5LW9uLWxpZ2h0KTtcblxuICAubWF0LWNoZWNrYm94LWZyYW1lIHtcbiAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1jaGVja2JveC1jaGVja21hcmsge1xuICAgIGZpbGw6ICRjaGVja2JveC1tYXJrLWNvbG9yO1xuICB9XG5cbiAgLm1hdC1jaGVja2JveC1jaGVja21hcmstcGF0aCB7XG4gICAgLy8gIWltcG9ydGFudCBpcyBuZWVkZWQgaGVyZSBiZWNhdXNlIGEgc3Ryb2tlIG11c3QgYmUgc2V0IGFzIGFuXG4gICAgLy8gYXR0cmlidXRlIG9uIHRoZSBTVkcgaW4gb3JkZXIgZm9yIGxpbmUgYW5pbWF0aW9uIHRvIHdvcmsgcHJvcGVybHkuXG4gICAgc3Ryb2tlOiAkY2hlY2tib3gtbWFyay1jb2xvciAhaW1wb3J0YW50O1xuICB9XG5cbiAgLm1hdC1jaGVja2JveC1taXhlZG1hcmsge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRjaGVja2JveC1tYXJrLWNvbG9yO1xuICB9XG5cbiAgLm1hdC1jaGVja2JveC1pbmRldGVybWluYXRlLCAubWF0LWNoZWNrYm94LWNoZWNrZWQge1xuICAgICYubWF0LXByaW1hcnkgLm1hdC1jaGVja2JveC1iYWNrZ3JvdW5kIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSk7XG4gICAgfVxuXG4gICAgJi5tYXQtYWNjZW50IC5tYXQtY2hlY2tib3gtYmFja2dyb3VuZCB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCk7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiAubWF0LWNoZWNrYm94LWJhY2tncm91bmQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCR3YXJuKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWNoZWNrYm94LWRpc2FibGVkIHtcbiAgICAmLm1hdC1jaGVja2JveC1jaGVja2VkLFxuICAgICYubWF0LWNoZWNrYm94LWluZGV0ZXJtaW5hdGUge1xuICAgICAgLm1hdC1jaGVja2JveC1iYWNrZ3JvdW5kIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGRpc2FibGVkLWNvbG9yO1xuICAgICAgfVxuICAgIH1cblxuICAgICY6bm90KC5tYXQtY2hlY2tib3gtY2hlY2tlZCkge1xuICAgICAgLm1hdC1jaGVja2JveC1mcmFtZSB7XG4gICAgICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWNvbG9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tYXQtY2hlY2tib3gtbGFiZWwge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN3aXRjaCB0aGlzIHRvIGEgc29saWQgY29sb3Igc2luY2Ugd2UncmUgdXNpbmcgYG9wYWNpdHlgXG4gIC8vIHRvIGNvbnRyb2wgaG93IG9wYXF1ZSB0aGUgcmlwcGxlIHNob3VsZCBiZS5cbiAgLm1hdC1jaGVja2JveCAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXBfZ2V0KG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCksIGJhc2UpO1xuICB9XG5cbiAgLm1hdC1jaGVja2JveC1jaGVja2VkOm5vdCgubWF0LWNoZWNrYm94LWRpc2FibGVkKSxcbiAgLm1hdC1jaGVja2JveDphY3RpdmU6bm90KC5tYXQtY2hlY2tib3gtZGlzYWJsZWQpIHtcbiAgICAmLm1hdC1wcmltYXJ5IC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRwcmltYXJ5KTtcbiAgICB9XG5cbiAgICAmLm1hdC1hY2NlbnQgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGFjY2VudCk7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkd2Fybik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtY2hlY2tib3gtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtY2hlY2tib3gge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cblxuICAvLyBUT0RPKGthcmEpOiBSZW1vdmUgdGhpcyBzdHlsZSB3aGVuIGZpeGluZyB2ZXJ0aWNhbCBiYXNlbGluZVxuICAubWF0LWNoZWNrYm94LWxheW91dCAubWF0LWNoZWNrYm94LWxhYmVsIHtcbiAgICBsaW5lLWhlaWdodDogbWF0LWxpbmUtaGVpZ2h0KCRjb25maWcsIGJvZHktMik7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtY2hlY2tib3gtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWNoZWNrYm94LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtY2hlY2tib3gnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtY2hlY2tib3gtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1jaGVja2JveC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWNoZWNrYm94LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG4kbWF0LWNoaXAtcmVtb3ZlLWZvbnQtc2l6ZTogMThweDtcblxuQG1peGluIF9tYXQtY2hpcC1lbGVtZW50LWNvbG9yKCRmb3JlZ3JvdW5kLCAkYmFja2dyb3VuZCkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZDtcbiAgY29sb3I6ICRmb3JlZ3JvdW5kO1xuXG4gIC5tYXQtY2hpcC1yZW1vdmUge1xuICAgIGNvbG9yOiAkZm9yZWdyb3VuZDtcbiAgICBvcGFjaXR5OiAwLjQ7XG4gIH1cbn1cblxuXG4vLyBBcHBsaWVzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIGZvciBhIHJpcHBsZSBlbGVtZW50LlxuLy8gSWYgdGhlIGNvbG9yIHZhbHVlIHByb3ZpZGVkIGlzIG5vdCBhIFNhc3MgY29sb3IsXG4vLyB3ZSBhc3N1bWUgdGhhdCB3ZSd2ZSBiZWVuIGdpdmVuIGEgQ1NTIHZhcmlhYmxlLlxuLy8gU2luY2Ugd2UgY2FuJ3QgcGVyZm9ybSBhbHBoYS1ibGVuZGluZyBvbiBhIENTUyB2YXJpYWJsZSxcbi8vIHdlIGluc3RlYWQgYWRkIHRoZSBvcGFjaXR5IGRpcmVjdGx5IHRvIHRoZSByaXBwbGUgZWxlbWVudC5cbkBtaXhpbiBfbWF0LWNoaXBzLXJpcHBsZS1iYWNrZ3JvdW5kKCRwYWxldHRlLCAkZGVmYXVsdC1jb250cmFzdCwgJG9wYWNpdHkpIHtcbiAgJGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSwgJGRlZmF1bHQtY29udHJhc3QsICRvcGFjaXR5KTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtY29sb3I7XG4gIEBpZiAodHlwZS1vZigkYmFja2dyb3VuZC1jb2xvcikgIT0gY29sb3IpIHtcbiAgICBvcGFjaXR5OiAkb3BhY2l0eTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1jaGlwLXRoZW1lLWNvbG9yKCRwYWxldHRlKSB7XG4gIEBpbmNsdWRlIF9tYXQtY2hpcC1lbGVtZW50LWNvbG9yKG1hdC1jb2xvcigkcGFsZXR0ZSwgZGVmYXVsdC1jb250cmFzdCksIG1hdC1jb2xvcigkcGFsZXR0ZSkpO1xuXG4gIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgIEBpbmNsdWRlIF9tYXQtY2hpcHMtcmlwcGxlLWJhY2tncm91bmQoJHBhbGV0dGUsIGRlZmF1bHQtY29udHJhc3QsIDAuMSk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1jaGlwcy1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAkdW5zZWxlY3RlZC1iYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIHVuc2VsZWN0ZWQtY2hpcCk7XG4gICR1bnNlbGVjdGVkLWZvcmVncm91bmQ6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG5cbiAgLm1hdC1jaGlwLm1hdC1zdGFuZGFyZC1jaGlwIHtcbiAgICBAaW5jbHVkZSBfbWF0LWNoaXAtZWxlbWVudC1jb2xvcigkdW5zZWxlY3RlZC1mb3JlZ3JvdW5kLCAkdW5zZWxlY3RlZC1iYWNrZ3JvdW5kKTtcblxuICAgICY6bm90KC5tYXQtY2hpcC1kaXNhYmxlZCkge1xuICAgICAgJjphY3RpdmUge1xuICAgICAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbigzLCAkY29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgLm1hdC1jaGlwLXJlbW92ZTpob3ZlciB7XG4gICAgICAgIG9wYWNpdHk6IDAuNTQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJi5tYXQtY2hpcC1kaXNhYmxlZCB7XG4gICAgICBvcGFjaXR5OiAwLjQ7XG4gICAgfVxuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgYmFja2dyb3VuZDogbWFwX2dldCgkZm9yZWdyb3VuZCwgYmFzZSk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1jaGlwLm1hdC1zdGFuZGFyZC1jaGlwLm1hdC1jaGlwLXNlbGVjdGVkIHtcbiAgICAmLm1hdC1wcmltYXJ5IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtY2hpcC10aGVtZS1jb2xvcigkcHJpbWFyeSk7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWNoaXAtdGhlbWUtY29sb3IoJHdhcm4pO1xuICAgIH1cblxuICAgICYubWF0LWFjY2VudCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWNoaXAtdGhlbWUtY29sb3IoJGFjY2VudCk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtY2hpcHMtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtY2hpcCB7XG4gICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMik7XG4gICAgZm9udC13ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBib2R5LTIpO1xuXG4gICAgLm1hdC1jaGlwLXRyYWlsaW5nLWljb24ubWF0LWljb24sXG4gICAgLm1hdC1jaGlwLXJlbW92ZS5tYXQtaWNvbiB7XG4gICAgICBmb250LXNpemU6ICRtYXQtY2hpcC1yZW1vdmUtZm9udC1zaXplO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1jaGlwcy1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtY2hpcHMtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1jaGlwcycpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1jaGlwcy1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWNoaXBzLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtY2hpcHMtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtZGl2aWRlci1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LWRpdmlkZXIge1xuICAgIGJvcmRlci10b3AtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlcik7XG4gIH1cblxuICAubWF0LWRpdmlkZXItdmVydGljYWwge1xuICAgIGJvcmRlci1yaWdodC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWRpdmlkZXItdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gX21hdC1kaXZpZGVyLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1kaXZpZGVyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZGl2aWRlcicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1kaXZpZGVyLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZGl2aWRlci1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWRpdmlkZXItdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LXRhYmxlLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LXRhYmxlIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsICdjYXJkJyk7XG4gIH1cblxuICAubWF0LXRhYmxlIHRoZWFkLCAubWF0LXRhYmxlIHRib2R5LCAubWF0LXRhYmxlIHRmb290LFxuICBtYXQtaGVhZGVyLXJvdywgbWF0LXJvdywgbWF0LWZvb3Rlci1yb3csXG4gIFttYXQtaGVhZGVyLXJvd10sIFttYXQtcm93XSwgW21hdC1mb290ZXItcm93XSxcbiAgLm1hdC10YWJsZS1zdGlja3kge1xuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gIH1cblxuICBtYXQtcm93LCBtYXQtaGVhZGVyLXJvdywgbWF0LWZvb3Rlci1yb3csXG4gIHRoLm1hdC1oZWFkZXItY2VsbCwgdGQubWF0LWNlbGwsIHRkLm1hdC1mb290ZXItY2VsbCB7XG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcbiAgfVxuXG4gIC5tYXQtaGVhZGVyLWNlbGwge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtY2VsbCwgLm1hdC1mb290ZXItY2VsbCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC10YWJsZS10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC10YWJsZSB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgfVxuXG4gIC5tYXQtaGVhZGVyLWNlbGwge1xuICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBjYXB0aW9uKTtcbiAgICBmb250LXdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMik7XG4gIH1cblxuICAubWF0LWNlbGwsIC5tYXQtZm9vdGVyLWNlbGwge1xuICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTEpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXRhYmxlLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC10YWJsZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXRhYmxlJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRhYmxlLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdGFibGUtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC10YWJsZS10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG4kbWF0LWRhdGVwaWNrZXItc2VsZWN0ZWQtdG9kYXktYm94LXNoYWRvdy13aWR0aDogMXB4O1xuJG1hdC1kYXRlcGlja2VyLXNlbGVjdGVkLWZhZGUtYW1vdW50OiAwLjY7XG4kbWF0LWRhdGVwaWNrZXItcmFuZ2UtZmFkZS1hbW91bnQ6IDAuMjtcbiRtYXQtZGF0ZXBpY2tlci10b2RheS1mYWRlLWFtb3VudDogMC4yO1xuJG1hdC1jYWxlbmRhci1ib2R5LWZvbnQtc2l6ZTogMTNweCAhZGVmYXVsdDtcbiRtYXQtY2FsZW5kYXItd2Vla2RheS10YWJsZS1mb250LXNpemU6IDExcHggIWRlZmF1bHQ7XG5cbkBtaXhpbiBfbWF0LWRhdGVwaWNrZXItY29sb3IoJHBhbGV0dGUpIHtcbiAgQGluY2x1ZGUgbWF0LWRhdGUtcmFuZ2UtY29sb3JzKFxuICAgIG1hdC1jb2xvcigkcGFsZXR0ZSwgZGVmYXVsdCwgJG1hdC1kYXRlcGlja2VyLXJhbmdlLWZhZGUtYW1vdW50KSk7XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LXNlbGVjdGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUsIGRlZmF1bHQtY29udHJhc3QpO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWRpc2FibGVkID4gLm1hdC1jYWxlbmRhci1ib2R5LXNlbGVjdGVkIHtcbiAgICAkYmFja2dyb3VuZDogbWF0LWNvbG9yKCRwYWxldHRlKTtcblxuICAgIEBpZiAodHlwZS1vZigkYmFja2dyb3VuZCkgPT0gY29sb3IpIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGZhZGUtb3V0KCRiYWNrZ3JvdW5kLCAkbWF0LWRhdGVwaWNrZXItc2VsZWN0ZWQtZmFkZS1hbW91bnQpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAvLyBJZiB3ZSBjb3VsZG4ndCByZXNvbHZlIHRvIGJhY2tncm91bmQgdG8gYSBjb2xvciAoZS5nLiBpdCdzIGEgQ1NTIHZhcmlhYmxlKSxcbiAgICAgIC8vIGZhbGwgYmFjayB0byBmYWRpbmcgdGhlIGNvbnRlbnQgb3V0IHZpYSBgb3BhY2l0eWAuXG4gICAgICBvcGFjaXR5OiAkbWF0LWRhdGVwaWNrZXItdG9kYXktZmFkZS1hbW91bnQ7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LXRvZGF5Lm1hdC1jYWxlbmRhci1ib2R5LXNlbGVjdGVkIHtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAkbWF0LWRhdGVwaWNrZXItc2VsZWN0ZWQtdG9kYXktYm94LXNoYWRvdy13aWR0aFxuICAgICAgICAgICAgICAgIG1hdC1jb2xvcigkcGFsZXR0ZSwgZGVmYXVsdC1jb250cmFzdCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1kYXRlcGlja2VyLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcblxuICAubWF0LWNhbGVuZGFyLWFycm93IHtcbiAgICBib3JkZXItdG9wLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGljb24pO1xuICB9XG5cbiAgLy8gVGhlIHByZXYvbmV4dCBidXR0b25zIG5lZWQgYSBiaXQgbW9yZSBzcGVjaWZpY2l0eSB0b1xuICAvLyBhdm9pZCBiZWluZyBvdmVyd3JpdHRlbiBieSB0aGUgLm1hdC1pY29uLWJ1dHRvbi5cbiAgLm1hdC1kYXRlcGlja2VyLXRvZ2dsZSxcbiAgLm1hdC1kYXRlcGlja2VyLWNvbnRlbnQgLm1hdC1jYWxlbmRhci1uZXh0LWJ1dHRvbixcbiAgLm1hdC1kYXRlcGlja2VyLWNvbnRlbnQgLm1hdC1jYWxlbmRhci1wcmV2aW91cy1idXR0b24ge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGljb24pO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci10YWJsZS1oZWFkZXIge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGhpbnQtdGV4dCk7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLXRhYmxlLWhlYWRlci1kaXZpZGVyOjphZnRlciB7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1sYWJlbCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWNlbGwtY29udGVudCxcbiAgLm1hdC1kYXRlLXJhbmdlLWlucHV0LXNlcGFyYXRvciB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1kaXNhYmxlZCA+IC5tYXQtY2FsZW5kYXItYm9keS1jZWxsLWNvbnRlbnQ6bm90KC5tYXQtY2FsZW5kYXItYm9keS1zZWxlY3RlZCksXG4gIC5tYXQtZm9ybS1maWVsZC1kaXNhYmxlZCAubWF0LWRhdGUtcmFuZ2UtaW5wdXQtc2VwYXJhdG9yIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXNhYmxlZC10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1jZWxsOm5vdCgubWF0LWNhbGVuZGFyLWJvZHktZGlzYWJsZWQpOmhvdmVyLFxuICAuY2RrLWtleWJvYXJkLWZvY3VzZWQgLm1hdC1jYWxlbmRhci1ib2R5LWFjdGl2ZSxcbiAgLmNkay1wcm9ncmFtLWZvY3VzZWQgLm1hdC1jYWxlbmRhci1ib2R5LWFjdGl2ZSB7XG4gICAgJiA+IC5tYXQtY2FsZW5kYXItYm9keS1jZWxsLWNvbnRlbnQ6bm90KC5tYXQtY2FsZW5kYXItYm9keS1zZWxlY3RlZCkge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBob3Zlcik7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWluLXByZXZpZXcge1xuICAgICRkaXZpZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuXG4gICAgQGlmIHR5cGUtb2YoJGRpdmlkZXItY29sb3IpID09IGNvbG9yIHtcbiAgICAgIC8vIFRoZSBkaXZpZGVyIGNvbG9yIGlzIHNldCB1bmRlciB0aGUgYXNzdW1wdGlvbiB0aGF0IGl0J2xsIGJlIHVzZWRcbiAgICAgIC8vIGZvciBhIHNvbGlkIGJvcmRlciwgYnV0IGJlY2F1c2Ugd2UncmUgdXNpbmcgYSBkYXNoZWQgYm9yZGVyIGZvciB0aGVcbiAgICAgIC8vIHByZXZpZXcgcmFuZ2UsIHdlIG5lZWQgdG8gYnVtcCBpdHMgb3BhY2l0eSB0byBlbnN1cmUgdGhhdCBpdCdzIHZpc2libGUuXG4gICAgICBjb2xvcjogcmdiYSgkZGl2aWRlci1jb2xvciwgbWluKG9wYWNpdHkoJGRpdmlkZXItY29sb3IpICogMiwgMSkpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBjb2xvcjogJGRpdmlkZXItY29sb3I7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LXRvZGF5Om5vdCgubWF0LWNhbGVuZGFyLWJvZHktc2VsZWN0ZWQpIHtcbiAgICAvLyBOb3RlOiB0aG91Z2ggaXQncyBub3QgdGV4dCwgdGhlIGJvcmRlciBpcyBhIGhpbnQgYWJvdXQgdGhlIGZhY3QgdGhhdCB0aGlzIGlzIHRvZGF5J3MgZGF0ZSxcbiAgICAvLyBzbyB3ZSB1c2UgdGhlIGhpbnQgY29sb3IuXG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGhpbnQtdGV4dCk7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktZGlzYWJsZWQgPiAubWF0LWNhbGVuZGFyLWJvZHktdG9kYXk6bm90KC5tYXQtY2FsZW5kYXItYm9keS1zZWxlY3RlZCkge1xuICAgICRjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBoaW50LXRleHQpO1xuXG4gICAgQGlmICh0eXBlLW9mKCRjb2xvcikgPT0gY29sb3IpIHtcbiAgICAgIGJvcmRlci1jb2xvcjogZmFkZS1vdXQoJGNvbG9yLCAkbWF0LWRhdGVwaWNrZXItdG9kYXktZmFkZS1hbW91bnQpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgY29sb3IgZGlkbid0IHJlc29sdmUgdG8gYSBjb2xvciB2YWx1ZSwgYnV0IHNvbWV0aGluZyBsaWtlIGEgQ1NTIHZhcmlhYmxlLCB3ZSBjYW4ndFxuICAgICAgLy8gZmFkZSBpdCBvdXQgc28gd2UgZmFsbCBiYWNrIHRvIHJlZHVjaW5nIHRoZSBlbGVtZW50IG9wYWNpdHkuIE5vdGUgdGhhdCB3ZSBkb24ndCB1c2UgdGhlXG4gICAgICAvLyAkbWF0LWRhdGVwaWNrZXItdG9kYXktZmFkZS1hbW91bnQsIGJlY2F1c2UgaGludCB0ZXh0IHVzdWFsbHkgaGFzIHNvbWUgb3BhY2l0eSBhcHBsaWVkXG4gICAgICAvLyB0byBpdCBhbHJlYWR5IGFuZCB3ZSBkb24ndCB3YW50IHRoZW0gdG8gc3RhY2sgb24gdG9wIG9mIGVhY2ggb3RoZXIuXG4gICAgICBvcGFjaXR5OiAwLjU7XG4gICAgfVxuICB9XG5cbiAgQGluY2x1ZGUgX21hdC1kYXRlcGlja2VyLWNvbG9yKG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSkpO1xuXG4gIC5tYXQtZGF0ZXBpY2tlci1jb250ZW50IHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbig0LCAkY29uZmlnKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuXG4gICAgJi5tYXQtYWNjZW50IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZGF0ZXBpY2tlci1jb2xvcihtYXAtZ2V0KCRjb25maWcsIGFjY2VudCkpO1xuICAgIH1cblxuICAgICYubWF0LXdhcm4ge1xuICAgICAgQGluY2x1ZGUgX21hdC1kYXRlcGlja2VyLWNvbG9yKG1hcC1nZXQoJGNvbmZpZywgd2FybikpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZGF0ZXBpY2tlci1jb250ZW50LXRvdWNoIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbigwLCAkY29uZmlnKTtcbiAgfVxuXG4gIC5tYXQtZGF0ZXBpY2tlci10b2dnbGUtYWN0aXZlIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSksIHRleHQpO1xuXG4gICAgJi5tYXQtYWNjZW50IHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IobWFwLWdldCgkY29uZmlnLCBhY2NlbnQpLCB0ZXh0KTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IobWFwLWdldCgkY29uZmlnLCB3YXJuKSwgdGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1kYXRlLXJhbmdlLWlucHV0LWlubmVyW2Rpc2FibGVkXSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1kYXRlcGlja2VyLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LWNhbGVuZGFyIHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5IHtcbiAgICBmb250LXNpemU6ICRtYXQtY2FsZW5kYXItYm9keS1mb250LXNpemU7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktbGFiZWwsXG4gIC5tYXQtY2FsZW5kYXItcGVyaW9kLWJ1dHRvbiB7XG4gICAgZm9udDoge1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBidXR0b24pO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYnV0dG9uKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLXRhYmxlLWhlYWRlciB0aCB7XG4gICAgZm9udDoge1xuICAgICAgc2l6ZTogJG1hdC1jYWxlbmRhci13ZWVrZGF5LXRhYmxlLWZvbnQtc2l6ZTtcbiAgICAgIHdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtZGF0ZS1yYW5nZS1jb2xvcnMoXG4gICRyYW5nZS1jb2xvcixcbiAgJGNvbXBhcmlzb24tY29sb3I6IHJnYmEoI2Y5YWIwMCwgJG1hdC1kYXRlcGlja2VyLXJhbmdlLWZhZGUtYW1vdW50KSxcbiAgJG92ZXJsYXAtY29sb3I6ICNhOGRhYjUsXG4gICRvdmVybGFwLXNlbGVjdGVkLWNvbG9yOiBkYXJrZW4oJG92ZXJsYXAtY29sb3IsIDMwJSkpIHtcblxuICAubWF0LWNhbGVuZGFyLWJvZHktaW4tcmFuZ2U6OmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZDogJHJhbmdlLWNvbG9yO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWluLWNvbXBhcmlzb24tcmFuZ2U6OmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZDogJGNvbXBhcmlzb24tY29sb3I7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktY29tcGFyaXNvbi1icmlkZ2Utc3RhcnQ6OmJlZm9yZSxcbiAgW2Rpcj0ncnRsJ10gLm1hdC1jYWxlbmRhci1ib2R5LWNvbXBhcmlzb24tYnJpZGdlLWVuZDo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICRyYW5nZS1jb2xvciA1MCUsICRjb21wYXJpc29uLWNvbG9yIDUwJSk7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktY29tcGFyaXNvbi1icmlkZ2UtZW5kOjpiZWZvcmUsXG4gIFtkaXI9J3J0bCddIC5tYXQtY2FsZW5kYXItYm9keS1jb21wYXJpc29uLWJyaWRnZS1zdGFydDo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gbGVmdCwgJHJhbmdlLWNvbG9yIDUwJSwgJGNvbXBhcmlzb24tY29sb3IgNTAlKTtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1pbi1jb21wYXJpc29uLXJhbmdlLm1hdC1jYWxlbmRhci1ib2R5LWluLXJhbmdlOjphZnRlciB7XG4gICAgYmFja2dyb3VuZDogJG92ZXJsYXAtY29sb3I7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktaW4tY29tcGFyaXNvbi1yYW5nZSA+IC5tYXQtY2FsZW5kYXItYm9keS1zZWxlY3RlZCB7XG4gICAgYmFja2dyb3VuZDogJG92ZXJsYXAtc2VsZWN0ZWQtY29sb3I7XG5cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1kYXRlcGlja2VyLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1kYXRlcGlja2VyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZGF0ZXBpY2tlcicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1kYXRlcGlja2VyLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZGF0ZXBpY2tlci1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWRhdGVwaWNrZXItdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cblxuQG1peGluIG1hdC1kaWFsb2ctY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtZGlhbG9nLWNvbnRhaW5lciB7XG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1lbGV2YXRpb24oMjQsICRjb25maWcpO1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgZGlhbG9nKTtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWRpYWxvZy10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1kaWFsb2ctdGl0bGUge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCB0aXRsZSk7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtZGlhbG9nLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1kaWFsb2ctdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1kaWFsb2cnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZGlhbG9nLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZGlhbG9nLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZGlhbG9nLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG4vLyBEZWZhdWx0IG1pbmltdW0gYW5kIG1heGltdW0gaGVpZ2h0IGZvciBjb2xsYXBzZWQgcGFuZWwgaGVhZGVycy5cbiRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1jb2xsYXBzZWQtaGVpZ2h0OiA0OHB4ICFkZWZhdWx0O1xuJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWNvbGxhcHNlZC1taW5pbXVtLWhlaWdodDogMzZweCAhZGVmYXVsdDtcbiRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1jb2xsYXBzZWQtbWF4aW11bS1oZWlnaHQ6XG4gICAgJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWNvbGxhcHNlZC1oZWlnaHQgIWRlZmF1bHQ7XG5cbi8vIERlZmF1bHQgbWluaW11bSBhbmQgbWF4aW11bSBoZWlnaHQgZm9yIGV4cGFuZGVkIHBhbmVsIGhlYWRlcnMuXG4kbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZXhwYW5kZWQtaGVpZ2h0OiA2NHB4ICFkZWZhdWx0O1xuJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWV4cGFuZGVkLW1pbmltdW0taGVpZ2h0OiA0OHB4ICFkZWZhdWx0O1xuJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWV4cGFuZGVkLW1heGltdW0taGVpZ2h0OlxuICAgICRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1leHBhbmRlZC1oZWlnaHQgIWRlZmF1bHQ7XG5cbi8vIERlbnNpdHkgY29uZmlndXJhdGlvbiBmb3IgdGhlIGV4cGFuc2lvbiBwYW5lbC4gQ2FwdHVyZXMgdGhlXG4vLyBoZWlnaHQgZm9yIGJvdGggZXhwYW5kZWQgYW5kIGNvbGxhcHNlZCBwYW5lbCBoZWFkZXJzLlxuJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWRlbnNpdHktY29uZmlnOiAoXG4gIGNvbGxhcHNlZC1oZWlnaHQ6IChcbiAgICBkZWZhdWx0OiAkbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItY29sbGFwc2VkLWhlaWdodCxcbiAgICBtYXhpbXVtOiAkbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItY29sbGFwc2VkLW1heGltdW0taGVpZ2h0LFxuICAgIG1pbmltdW06ICRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1jb2xsYXBzZWQtbWluaW11bS1oZWlnaHQsXG4gICksXG4gIGV4cGFuZGVkLWhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1leHBhbmRlZC1oZWlnaHQsXG4gICAgbWF4aW11bTogJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWV4cGFuZGVkLW1heGltdW0taGVpZ2h0LFxuICAgIG1pbmltdW06ICRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1leHBhbmRlZC1taW5pbXVtLWhlaWdodCxcbiAgKVxuKSAhZGVmYXVsdDtcblxuLy8gTm90ZTogS2VlcCB0aGlzIGluIHN5bmMgd2l0aCB0aGUgYW5pbWF0aW9uIHRpbWluZyBmb3IgdGhlIHRvZ2dsZSBpbmRpY2F0b3Jcbi8vIGFuZCBib2R5IGV4cGFuc2lvbi4gVGhlc2UgYXJlIGFuaW1hdGVkIHVzaW5nIEFuZ3VsYXIgYW5pbWF0aW9ucy5cbiRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci10cmFuc2l0aW9uOiAyMjVtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xuXG5cbkBtaXhpbiBtYXQtZXhwYW5zaW9uLXBhbmVsLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LWV4cGFuc2lvbi1wYW5lbCB7XG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oMiwgJGNvbmZpZyk7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBjYXJkKTtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxuXG4gIC5tYXQtYWN0aW9uLXJvdyB7XG4gICAgYm9yZGVyLXRvcC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcbiAgfVxuXG4gIC5tYXQtZXhwYW5zaW9uLXBhbmVsIHtcbiAgICAmIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci5jZGsta2V5Ym9hcmQtZm9jdXNlZCxcbiAgICAmIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci5jZGstcHJvZ3JhbS1mb2N1c2VkLFxuICAgICY6bm90KC5tYXQtZXhwYW5kZWQpIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcjpob3ZlciB7XG4gICAgICAmOm5vdChbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddKSB7XG4gICAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgaG92ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIERpc2FibGUgdGhlIGhvdmVyIG9uIHRvdWNoIGRldmljZXMgc2luY2UgaXQgY2FuIGFwcGVhciBsaWtlIGl0IGlzIHN0dWNrLiBXZSBjYW4ndCB1c2VcbiAgLy8gYEBtZWRpYSAoaG92ZXIpYCBhYm92ZSwgYmVjYXVzZSB0aGUgZGVza3RvcCBzdXBwb3J0IGJyb3dzZXIgc3VwcG9ydCBpc24ndCBncmVhdC5cbiAgQG1lZGlhIChob3Zlcjogbm9uZSkge1xuICAgIC5tYXQtZXhwYW5zaW9uLXBhbmVsOm5vdCgubWF0LWV4cGFuZGVkKTpub3QoW2FyaWEtZGlzYWJsZWQ9J3RydWUnXSlcbiAgICAgIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci10aXRsZSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gIH1cblxuICAubWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZGVzY3JpcHRpb24sXG4gIC5tYXQtZXhwYW5zaW9uLWluZGljYXRvcjo6YWZ0ZXIge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlclthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLWJ1dHRvbik7XG5cbiAgICAubWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItdGl0bGUsXG4gICAgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWRlc2NyaXB0aW9uIHtcbiAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LWV4cGFuc2lvbi1wYW5lbC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyIHtcbiAgICBmb250OiB7XG4gICAgICBmYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnLCBzdWJoZWFkaW5nLTEpO1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBzdWJoZWFkaW5nLTEpO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgc3ViaGVhZGluZy0xKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50IHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgYm9keS0xKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1leHBhbnNpb24tcGFuZWwtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRkZW5zaXR5LXNjYWxlOiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZXhwYW5kZWQtaGVpZ2h0OiBfbWF0LWRlbnNpdHktcHJvcC12YWx1ZShcbiAgICAgICAgJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWRlbnNpdHktY29uZmlnLCAkZGVuc2l0eS1zY2FsZSwgZXhwYW5kZWQtaGVpZ2h0KTtcbiAgJGNvbGxhcHNlZC1oZWlnaHQ6IF9tYXQtZGVuc2l0eS1wcm9wLXZhbHVlKFxuICAgICAgJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWRlbnNpdHktY29uZmlnLCAkZGVuc2l0eS1zY2FsZSwgY29sbGFwc2VkLWhlaWdodCk7XG5cbiAgQGluY2x1ZGUgX21hdC1kZW5zaXR5LWxlZ2FjeS1jb21wYXRpYmlsaXR5KCkge1xuICAgIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciB7XG4gICAgICBoZWlnaHQ6ICRjb2xsYXBzZWQtaGVpZ2h0O1xuXG4gICAgICAmLm1hdC1leHBhbmRlZCB7XG4gICAgICAgIGhlaWdodDogJGV4cGFuZGVkLWhlaWdodDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1leHBhbnNpb24tcGFuZWwtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1leHBhbnNpb24tcGFuZWwnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZXhwYW5zaW9uLXBhbmVsLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZXhwYW5zaW9uLXBhbmVsLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZXhwYW5zaW9uLXBhbmVsLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cbi8vIFRoaXMgbWl4aW4gd2lsbCBlbnN1cmUgdGhhdCBsaW5lcyB0aGF0IG92ZXJmbG93IHRoZSBjb250YWluZXIgd2lsbCBoaWRlIHRoZSBvdmVyZmxvdyBhbmRcbi8vIHRydW5jYXRlIG5lYXRseSB3aXRoIGFuIGVsbGlwc2lzLlxuQG1peGluIG1hdC10cnVuY2F0ZS1saW5lKCkge1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cblxuLy8gTWl4aW4gdG8gcHJvdmlkZSBhbGwgbWF0LWxpbmUgc3R5bGVzLCBjaGFuZ2luZyBzZWNvbmRhcnkgZm9udCBzaXplIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGxpc3Rcbi8vIGlzIGluIGRlbnNlIG1vZGUuXG5AbWl4aW4gbWF0LWxpbmUtYmFzZSgkc2Vjb25kYXJ5LWZvbnQtc2l6ZSkge1xuICAubWF0LWxpbmUge1xuICAgIEBpbmNsdWRlIG1hdC10cnVuY2F0ZS1saW5lKCk7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAgIC8vIGFsbCBsaW5lcyBidXQgdGhlIHRvcCBsaW5lIHNob3VsZCBoYXZlIHNtYWxsZXIgdGV4dFxuICAgICY6bnRoLWNoaWxkKG4rMikge1xuICAgICAgZm9udC1zaXplOiAkc2Vjb25kYXJ5LWZvbnQtc2l6ZTtcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBtaXhpbiBub3JtYWxpemVzIGRlZmF1bHQgZWxlbWVudCBzdHlsZXMsIGUuZy4gZm9udCB3ZWlnaHQgZm9yIGhlYWRpbmcgdGV4dC5cbkBtaXhpbiBtYXQtbm9ybWFsaXplLXRleHQoKSB7XG4gICYgPiAqIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgfVxufVxuXG4vLyBUaGlzIG1peGluIHByb3ZpZGVzIGJhc2Ugc3R5bGVzIGZvciB0aGUgd3JhcHBlciBhcm91bmQgbWF0LWxpbmUgZWxlbWVudHMgaW4gYSBsaXN0LlxuQG1peGluIG1hdC1saW5lLXdyYXBwZXItYmFzZSgpIHtcbiAgQGluY2x1ZGUgbWF0LW5vcm1hbGl6ZS10ZXh0KCk7XG5cbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleDogYXV0bztcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAvLyBNdXN0IHJlbW92ZSB3cmFwcGVyIHdoZW4gbGluZXMgYXJlIGVtcHR5IG9yIGl0IHRha2VzIHVwIGhvcml6b250YWxcbiAgLy8gc3BhY2UgYW5kIHB1c2hlcyBvdGhlciBlbGVtZW50cyB0byB0aGUgcmlnaHQuXG4gICY6ZW1wdHkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbn1cblxuXG5cbi8vIEluY2x1ZGUgdGhpcyBlbXB0eSBtaXhpbiBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgb3RoZXIgY29tcG9uZW50cy5cbkBtaXhpbiBtYXQtZ3JpZC1saXN0LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtZ3JpZC1saXN0LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LWdyaWQtdGlsZS1oZWFkZXIsXG4gIC5tYXQtZ3JpZC10aWxlLWZvb3RlciB7XG4gICAgQGluY2x1ZGUgbWF0LWxpbmUtYmFzZShtYXQtZm9udC1zaXplKCRjb25maWcsIGNhcHRpb24pKTtcbiAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0xKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1ncmlkLWxpc3QtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWdyaWQtbGlzdC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWdyaWQtbGlzdCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1ncmlkLWxpc3QtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1ncmlkLWxpc3QtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1ncmlkLWxpc3QtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cbkBtaXhpbiBtYXQtaWNvbi1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtaWNvbiB7XG4gICAgJi5tYXQtcHJpbWFyeSB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCB0ZXh0KTtcbiAgICB9XG5cbiAgICAmLm1hdC1hY2NlbnQge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkYWNjZW50LCB0ZXh0KTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHdhcm4sIHRleHQpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LWljb24tdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gX21hdC1pY29uLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1pY29uLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtaWNvbicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1pY29uLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtaWNvbi1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWljb24tdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbi8vIFJlbmRlcnMgYSBncmFkaWVudCBmb3Igc2hvd2luZyB0aGUgZGFzaGVkIGxpbmUgd2hlbiB0aGUgaW5wdXQgaXMgZGlzYWJsZWQuXG4vLyBVbmxpa2UgdXNpbmcgYSBib3JkZXIsIGEgZ3JhZGllbnQgYWxsb3dzIHVzIHRvIGFkanVzdCB0aGUgc3BhY2luZyBvZiB0aGUgZG90dGVkIGxpbmVcbi8vIHRvIG1hdGNoIHRoZSBNYXRlcmlhbCBEZXNpZ24gc3BlYy5cbkBtaXhpbiBtYXQtY29udHJvbC1kaXNhYmxlZC11bmRlcmxpbmUoJGNvbG9yKSB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgJGNvbG9yIDAlLCAkY29sb3IgMzMlLCB0cmFuc3BhcmVudCAwJSk7XG4gIGJhY2tncm91bmQtc2l6ZTogNHB4IDEwMCU7XG4gIGJhY2tncm91bmQtcmVwZWF0OiByZXBlYXQteDtcbn1cblxuLy8gRmlndXJlcyBvdXQgdGhlIGNvbG9yIG9mIHRoZSBwbGFjZWhvbGRlciBmb3IgYSBmb3JtIGNvbnRyb2wuXG4vLyBVc2VkIHByaW1hcmlseSB0byBwcmV2ZW50IHRoZSB2YXJpb3VzIGZvcm0gY29udHJvbHMgZnJvbVxuLy8gYmVjb21pbmcgb3V0IG9mIHN5bmMgc2luY2UgdGhlc2UgY29sb3JzIGFyZW4ndCBpbiBhIHBhbGV0dGUuXG5AZnVuY3Rpb24gX21hdC1jb250cm9sLXBsYWNlaG9sZGVyLWNvbG9yKCRjb25maWcpIHtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRpcy1kYXJrLXRoZW1lOiBtYXAtZ2V0KCRjb25maWcsIGlzLWRhcmspO1xuICBAcmV0dXJuIG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjUsIDAuNDIpKTtcbn1cblxuXG4vKiBzdHlsZWxpbnQtZGlzYWJsZSBtYXRlcmlhbC9uby1wcmVmaXhlcyAqL1xuQG1peGluIHVzZXItc2VsZWN0KCR2YWx1ZSkge1xuICAtd2Via2l0LXVzZXItc2VsZWN0OiAkdmFsdWU7XG4gIC1tb3otdXNlci1zZWxlY3Q6ICR2YWx1ZTtcbiAgLW1zLXVzZXItc2VsZWN0OiAkdmFsdWU7XG4gIHVzZXItc2VsZWN0OiAkdmFsdWU7XG59XG5cbkBtaXhpbiBpbnB1dC1wbGFjZWhvbGRlciB7XG4gICY6OnBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxuXG4gICY6Oi1tb3otcGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG5cbiAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cblxuICAmOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQG1peGluIGN1cnNvci1ncmFiIHtcbiAgY3Vyc29yOiAtd2Via2l0LWdyYWI7XG4gIGN1cnNvcjogZ3JhYjtcbn1cblxuQG1peGluIGN1cnNvci1ncmFiYmluZyB7XG4gIGN1cnNvcjogLXdlYmtpdC1ncmFiYmluZztcbiAgY3Vyc29yOiBncmFiYmluZztcbn1cblxuQG1peGluIGJhY2tmYWNlLXZpc2liaWxpdHkoJHZhbHVlKSB7XG4gIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogJHZhbHVlO1xuICBiYWNrZmFjZS12aXNpYmlsaXR5OiAkdmFsdWU7XG59XG4vKiBzdHlsZWxpbnQtZW5hYmxlICovXG5cblxuXG5AbWl4aW4gbWF0LWlucHV0LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LWZvcm0tZmllbGQtdHlwZS1tYXQtbmF0aXZlLXNlbGVjdCAubWF0LWZvcm0tZmllbGQtaW5maXg6OmFmdGVyIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG4gIH1cblxuICAubWF0LWlucHV0LWVsZW1lbnQ6ZGlzYWJsZWQsXG4gIC5tYXQtZm9ybS1maWVsZC10eXBlLW1hdC1uYXRpdmUtc2VsZWN0Lm1hdC1mb3JtLWZpZWxkLWRpc2FibGVkIC5tYXQtZm9ybS1maWVsZC1pbmZpeDo6YWZ0ZXIge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuICB9XG5cbiAgLm1hdC1pbnB1dC1lbGVtZW50IHtcbiAgICBjYXJldC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCB0ZXh0KTtcblxuICAgIEBpbmNsdWRlIGlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICAgIGNvbG9yOiBfbWF0LWNvbnRyb2wtcGxhY2Vob2xkZXItY29sb3IoJGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLy8gT24gZGFyayB0aGVtZXMgd2Ugc2V0IHRoZSBuYXRpdmUgYHNlbGVjdGAgY29sb3IgdG8gc29tZSBzaGFkZSBvZiB3aGl0ZSxcbiAgICAvLyBob3dldmVyIHRoZSBjb2xvciBwcm9wYWdhdGVzIHRvIGFsbCBvZiB0aGUgYG9wdGlvbmAgZWxlbWVudHMsIHdoaWNoIGFyZVxuICAgIC8vIGFsd2F5cyBvbiBhIHdoaXRlIGJhY2tncm91bmQgaW5zaWRlIHRoZSBkcm9wZG93biwgY2F1c2luZyB0aGVtIHRvIGJsZW5kIGluLlxuICAgIC8vIFNpbmNlIHdlIGNhbid0IGNoYW5nZSBiYWNrZ3JvdW5kIG9mIHRoZSBkcm9wZG93biwgd2UgbmVlZCB0byBleHBsaWNpdGx5XG4gICAgLy8gcmVzZXQgdGhlIGNvbG9yIG9mIHRoZSBvcHRpb25zIHRvIHNvbWV0aGluZyBkYXJrLlxuICAgIEBpZiAobWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKSkge1xuICAgICAgb3B0aW9uIHtcbiAgICAgICAgY29sb3I6ICRkYXJrLXByaW1hcnktdGV4dDtcbiAgICAgIH1cblxuICAgICAgb3B0aW9uOmRpc2FibGVkIHtcbiAgICAgICAgY29sb3I6ICRkYXJrLWRpc2FibGVkLXRleHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLm1hdC1hY2NlbnQgLm1hdC1pbnB1dC1lbGVtZW50IHtcbiAgICBjYXJldC1jb2xvcjogbWF0LWNvbG9yKCRhY2NlbnQsIHRleHQpO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLm1hdC13YXJuIC5tYXQtaW5wdXQtZWxlbWVudCxcbiAgLm1hdC1mb3JtLWZpZWxkLWludmFsaWQgLm1hdC1pbnB1dC1lbGVtZW50IHtcbiAgICBjYXJldC1jb2xvcjogbWF0LWNvbG9yKCR3YXJuLCB0ZXh0KTtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC10eXBlLW1hdC1uYXRpdmUtc2VsZWN0Lm1hdC1mb3JtLWZpZWxkLWludmFsaWQgLm1hdC1mb3JtLWZpZWxkLWluZml4OjphZnRlciB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkd2FybiwgdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1pbnB1dC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLy8gVGhlIHVuaXQtbGVzcyBsaW5lLWhlaWdodCBmcm9tIHRoZSBmb250IGNvbmZpZy5cbiAgJGxpbmUtaGVpZ2h0OiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgaW5wdXQpO1xuXG4gIC8vIFRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgdG9wIG9mIHRoZSBsaW5lIGFuZCB0aGUgdG9wIG9mIHRoZSBhY3R1YWwgdGV4dFxuICAvLyAoYXMgYSBmcmFjdGlvbiBvZiB0aGUgZm9udC1zaXplKS5cbiAgJGxpbmUtc3BhY2luZzogKCRsaW5lLWhlaWdodCAtIDEpIC8gMjtcblxuICAvLyA8aW5wdXQ+IGVsZW1lbnRzIHNlZW0gdG8gaGF2ZSB0aGVpciBoZWlnaHQgc2V0IHNsaWdodGx5IHRvbyBsYXJnZSBvbiBTYWZhcmkgY2F1c2luZyB0aGUgdGV4dCB0b1xuICAvLyBiZSBtaXNhbGlnbmVkIHcuci50LiB0aGUgcGxhY2Vob2xkZXIuIEFkZGluZyB0aGlzIG1hcmdpbiBjb3JyZWN0cyBpdC5cbiAgaW5wdXQubWF0LWlucHV0LWVsZW1lbnQge1xuICAgIG1hcmdpbi10b3A6IC0kbGluZS1zcGFjaW5nICogMWVtO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LWlucHV0LWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1pbnB1dC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWlucHV0Jykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWlucHV0LWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtaW5wdXQtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1pbnB1dC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LWxpc3QtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtbGlzdC1iYXNlIHtcbiAgICAubWF0LWxpc3QtaXRlbSB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgICB9XG5cbiAgICAubWF0LWxpc3Qtb3B0aW9uIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICAgIH1cblxuICAgIC5tYXQtc3ViaGVhZGVyIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgICB9XG4gIH1cblxuICAubWF0LWxpc3QtaXRlbS1kaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBkaXNhYmxlZC1saXN0LW9wdGlvbik7XG4gIH1cblxuICAubWF0LWxpc3Qtb3B0aW9uLFxuICAubWF0LW5hdi1saXN0IC5tYXQtbGlzdC1pdGVtLFxuICAubWF0LWFjdGlvbi1saXN0IC5tYXQtbGlzdC1pdGVtIHtcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgJ2hvdmVyJyk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1saXN0LXNpbmdsZS1zZWxlY3RlZC1vcHRpb24ge1xuICAgICYsICY6aG92ZXIsICY6Zm9jdXMge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBob3ZlciwgMC4xMik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtbGlzdC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG5cbiAgLm1hdC1saXN0LWl0ZW0ge1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHk7XG4gIH1cblxuICAubWF0LWxpc3Qtb3B0aW9uIHtcbiAgICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5O1xuICB9XG5cbiAgLy8gRGVmYXVsdCBsaXN0XG4gIC5tYXQtbGlzdC1iYXNlIHtcbiAgICAubWF0LWxpc3QtaXRlbSB7XG4gICAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgc3ViaGVhZGluZy0yKTtcbiAgICAgIEBpbmNsdWRlIG1hdC1saW5lLWJhc2UobWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTEpKTtcbiAgICB9XG5cbiAgICAubWF0LWxpc3Qtb3B0aW9uIHtcbiAgICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBzdWJoZWFkaW5nLTIpO1xuICAgICAgQGluY2x1ZGUgbWF0LWxpbmUtYmFzZShtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSkpO1xuICAgIH1cblxuICAgIC5tYXQtc3ViaGVhZGVyIHtcbiAgICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZywgYm9keS0yKTtcbiAgICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTIpO1xuICAgICAgZm9udC13ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBib2R5LTIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIERlbnNlIGxpc3RcbiAgLm1hdC1saXN0LWJhc2VbZGVuc2VdIHtcbiAgICAubWF0LWxpc3QtaXRlbSB7XG4gICAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgY2FwdGlvbik7XG4gICAgICBAaW5jbHVkZSBtYXQtbGluZS1iYXNlKG1hdC1mb250LXNpemUoJGNvbmZpZywgY2FwdGlvbikpO1xuICAgIH1cblxuICAgIC5tYXQtbGlzdC1vcHRpb24ge1xuICAgICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGNhcHRpb24pO1xuICAgICAgQGluY2x1ZGUgbWF0LWxpbmUtYmFzZShtYXQtZm9udC1zaXplKCRjb25maWcsIGNhcHRpb24pKTtcbiAgICB9XG5cbiAgICAubWF0LXN1YmhlYWRlciB7XG4gICAgICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5O1xuICAgICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGNhcHRpb24pO1xuICAgICAgZm9udC13ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBib2R5LTIpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1saXN0LWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1saXN0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtbGlzdCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1saXN0LWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtbGlzdC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWxpc3QtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cblxuQG1peGluIG1hdC1tZW51LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LW1lbnUtcGFuZWwge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDQsICRjb25maWcpO1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgJ2NhcmQnKTtcbiAgfVxuXG4gIC5tYXQtbWVudS1pdGVtIHtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCAndGV4dCcpO1xuXG4gICAgJltkaXNhYmxlZF0ge1xuICAgICAgJiwgJjo6YWZ0ZXIge1xuICAgICAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCAnZGlzYWJsZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubWF0LW1lbnUtaXRlbSAubWF0LWljb24tbm8tY29sb3IsXG4gIC5tYXQtbWVudS1pdGVtLXN1Ym1lbnUtdHJpZ2dlcjo6YWZ0ZXIge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsICdpY29uJyk7XG4gIH1cblxuICAubWF0LW1lbnUtaXRlbTpob3ZlcixcbiAgLm1hdC1tZW51LWl0ZW0uY2RrLXByb2dyYW0tZm9jdXNlZCxcbiAgLm1hdC1tZW51LWl0ZW0uY2RrLWtleWJvYXJkLWZvY3VzZWQsXG4gIC5tYXQtbWVudS1pdGVtLWhpZ2hsaWdodGVkIHtcbiAgICAmOm5vdChbZGlzYWJsZWRdKSB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsICdob3ZlcicpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LW1lbnUtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtbWVudS1pdGVtIHtcbiAgICBmb250OiB7XG4gICAgICBmYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnLCBib2R5LTEpO1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTEpO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0xKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtbWVudS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtbWVudS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LW1lbnUnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtbWVudS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LW1lbnUtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1tZW51LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG4kbWF0LXBhZ2luYXRvci1oZWlnaHQ6IDU2cHggIWRlZmF1bHQ7XG4vLyBNaW5pbXVtIGhlaWdodCBmb3IgcGFnaW5hdG9yJ3MgaW4gdGhlIGhpZ2hlc3QgZGVuc2l0eSBpcyBkZXRlcm1pbmVkIGJhc2VkIG9uIGhvd1xuLy8gbXVjaCB0aGUgcGFnaW5hdG9yIGNhbiBzaHJpbmsgdW50aWwgdGhlIGNvbnRlbnQgZXhjZWVkcyAoaS5lLiBuYXZpZ2F0aW9uIGJ1dHRvbnMpLlxuJG1hdC1wYWdpbmF0b3ItbWluaW11bS1oZWlnaHQ6IDQwcHggIWRlZmF1bHQ7XG4kbWF0LXBhZ2luYXRvci1tYXhpbXVtLWhlaWdodDogJG1hdC1wYWdpbmF0b3ItaGVpZ2h0ICFkZWZhdWx0O1xuXG4kbWF0LXBhZ2luYXRvci1kZW5zaXR5LWNvbmZpZzogKFxuICBoZWlnaHQ6IChcbiAgICBkZWZhdWx0OiAkbWF0LXBhZ2luYXRvci1oZWlnaHQsXG4gICAgbWF4aW11bTogJG1hdC1wYWdpbmF0b3ItbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1hdC1wYWdpbmF0b3ItbWluaW11bS1oZWlnaHQsXG4gIClcbikgIWRlZmF1bHQ7XG5cblxuQG1peGluIG1hdC1wYWdpbmF0b3ItY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuXG4gIC5tYXQtcGFnaW5hdG9yIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsICdjYXJkJyk7XG4gIH1cblxuICAubWF0LXBhZ2luYXRvcixcbiAgLm1hdC1wYWdpbmF0b3ItcGFnZS1zaXplIC5tYXQtc2VsZWN0LXRyaWdnZXIge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtcGFnaW5hdG9yLWRlY3JlbWVudCxcbiAgLm1hdC1wYWdpbmF0b3ItaW5jcmVtZW50IHtcbiAgICBib3JkZXItdG9wOiAycHggc29saWQgbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCAnaWNvbicpO1xuICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkIG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgJ2ljb24nKTtcbiAgfVxuXG4gIC5tYXQtcGFnaW5hdG9yLWZpcnN0LFxuICAubWF0LXBhZ2luYXRvci1sYXN0IHtcbiAgICBib3JkZXItdG9wOiAycHggc29saWQgbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCAnaWNvbicpO1xuICB9XG5cbiAgLm1hdC1pY29uLWJ1dHRvbltkaXNhYmxlZF0ge1xuICAgIC5tYXQtcGFnaW5hdG9yLWRlY3JlbWVudCxcbiAgICAubWF0LXBhZ2luYXRvci1pbmNyZW1lbnQsXG4gICAgLm1hdC1wYWdpbmF0b3ItZmlyc3QsXG4gICAgLm1hdC1wYWdpbmF0b3ItbGFzdCB7XG4gICAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgJ2Rpc2FibGVkJyk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtcGFnaW5hdG9yLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LXBhZ2luYXRvcixcbiAgLm1hdC1wYWdpbmF0b3ItcGFnZS1zaXplIC5tYXQtc2VsZWN0LXRyaWdnZXIge1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIGNhcHRpb24pO1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBjYXB0aW9uKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtcGFnaW5hdG9yLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkZGVuc2l0eS1zY2FsZTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGhlaWdodDogX21hdC1kZW5zaXR5LXByb3AtdmFsdWUoJG1hdC1wYWdpbmF0b3ItZGVuc2l0eS1jb25maWcsICRkZW5zaXR5LXNjYWxlLCBoZWlnaHQpO1xuXG4gIEBpbmNsdWRlIF9tYXQtZGVuc2l0eS1sZWdhY3ktY29tcGF0aWJpbGl0eSgpIHtcbiAgICAubWF0LXBhZ2luYXRvci1jb250YWluZXIge1xuICAgICAgbWluLWhlaWdodDogJGhlaWdodDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1wYWdpbmF0b3ItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1wYWdpbmF0b3InKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcGFnaW5hdG9yLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtcGFnaW5hdG9yLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcGFnaW5hdG9yLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cbkBtaXhpbiBtYXQtcHJvZ3Jlc3MtYmFyLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuXG4gIC5tYXQtcHJvZ3Jlc3MtYmFyLWJhY2tncm91bmQge1xuICAgIGZpbGw6IG1hdC1jb2xvcigkcHJpbWFyeSwgbGlnaHRlcik7XG4gIH1cblxuICAubWF0LXByb2dyZXNzLWJhci1idWZmZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSwgbGlnaHRlcik7XG4gIH1cblxuICAubWF0LXByb2dyZXNzLWJhci1maWxsOjphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5KTtcbiAgfVxuXG4gIC5tYXQtcHJvZ3Jlc3MtYmFyLm1hdC1hY2NlbnQge1xuICAgIC5tYXQtcHJvZ3Jlc3MtYmFyLWJhY2tncm91bmQge1xuICAgICAgZmlsbDogbWF0LWNvbG9yKCRhY2NlbnQsIGxpZ2h0ZXIpO1xuICAgIH1cblxuICAgIC5tYXQtcHJvZ3Jlc3MtYmFyLWJ1ZmZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCwgbGlnaHRlcik7XG4gICAgfVxuXG4gICAgLm1hdC1wcm9ncmVzcy1iYXItZmlsbDo6YWZ0ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRhY2NlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtcHJvZ3Jlc3MtYmFyLm1hdC13YXJuIHtcbiAgICAubWF0LXByb2dyZXNzLWJhci1iYWNrZ3JvdW5kIHtcbiAgICAgIGZpbGw6IG1hdC1jb2xvcigkd2FybiwgbGlnaHRlcik7XG4gICAgfVxuXG4gICAgLm1hdC1wcm9ncmVzcy1iYXItYnVmZmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkd2FybiwgbGlnaHRlcik7XG4gICAgfVxuXG4gICAgLm1hdC1wcm9ncmVzcy1iYXItZmlsbDo6YWZ0ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCR3YXJuKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1wcm9ncmVzcy1iYXItdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gX21hdC1wcm9ncmVzcy1iYXItZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXByb2dyZXNzLWJhci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXByb2dyZXNzLWJhcicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1wcm9ncmVzcy1iYXItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1wcm9ncmVzcy1iYXItZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1wcm9ncmVzcy1iYXItdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LXByb2dyZXNzLXNwaW5uZXItY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG5cbiAgLm1hdC1wcm9ncmVzcy1zcGlubmVyLCAubWF0LXNwaW5uZXIge1xuICAgIGNpcmNsZSB7XG4gICAgICBzdHJva2U6IG1hdC1jb2xvcigkcHJpbWFyeSk7XG4gICAgfVxuXG4gICAgJi5tYXQtYWNjZW50IGNpcmNsZSB7XG4gICAgICBzdHJva2U6IG1hdC1jb2xvcigkYWNjZW50KTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIGNpcmNsZSB7XG4gICAgICBzdHJva2U6IG1hdC1jb2xvcigkd2Fybik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lci10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LXByb2dyZXNzLXNwaW5uZXItZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXByb2dyZXNzLXNwaW5uZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1wcm9ncmVzcy1zcGlubmVyJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXByb2dyZXNzLXNwaW5uZXItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1wcm9ncmVzcy1zcGlubmVyLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lci10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cbkBtaXhpbiBfbWF0LXJhZGlvLWNvbG9yKCRwYWxldHRlKSB7XG4gICYubWF0LXJhZGlvLWNoZWNrZWQgLm1hdC1yYWRpby1vdXRlci1jaXJjbGUge1xuICAgIGJvcmRlci1jb2xvcjogbWF0LWNvbG9yKCRwYWxldHRlKTtcbiAgfVxuXG4gIC5tYXQtcmFkaW8taW5uZXItY2lyY2xlLFxuICAubWF0LXJhZGlvLXJpcHBsZSAubWF0LXJpcHBsZS1lbGVtZW50Om5vdCgubWF0LXJhZGlvLXBlcnNpc3RlbnQtcmlwcGxlKSxcbiAgJi5tYXQtcmFkaW8tY2hlY2tlZCAubWF0LXJhZGlvLXBlcnNpc3RlbnQtcmlwcGxlLFxuICAmOmFjdGl2ZSAubWF0LXJhZGlvLXBlcnNpc3RlbnQtcmlwcGxlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtcmFkaW8tY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LXJhZGlvLW91dGVyLWNpcmNsZSB7XG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtcmFkaW8tYnV0dG9uIHtcbiAgICAmLm1hdC1wcmltYXJ5IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtcmFkaW8tY29sb3IoJHByaW1hcnkpO1xuICAgIH1cblxuICAgICYubWF0LWFjY2VudCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXJhZGlvLWNvbG9yKCRhY2NlbnQpO1xuICAgIH1cblxuICAgICYubWF0LXdhcm4ge1xuICAgICAgQGluY2x1ZGUgX21hdC1yYWRpby1jb2xvcigkd2Fybik7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBuZWVkcyBleHRyYSBzcGVjaWZpY2l0eSwgYmVjYXVzZSB0aGUgY2xhc3NlcyBhYm92ZSBhcmUgY29tYmluZWRcbiAgICAvLyAoZS5nLiBgLm1hdC1yYWRpby1idXR0b24ubWF0LWFjY2VudGApIHdoaWNoIGluY3JlYXNlcyB0aGVpciBzcGVjaWZpY2l0eSBhIGxvdC5cbiAgICAvLyBUT0RPOiBjb25zaWRlciBtYWtpbmcgdGhlIHNlbGVjdG9ycyBpbnRvIGRlc2NlbmRhbnRzIChgLm1hdC1wcmltYXJ5IC5tYXQtcmFkaW8tYnV0dG9uYCkuXG4gICAgJi5tYXQtcmFkaW8tZGlzYWJsZWQge1xuICAgICAgJi5tYXQtcmFkaW8tY2hlY2tlZCAubWF0LXJhZGlvLW91dGVyLWNpcmNsZSxcbiAgICAgIC5tYXQtcmFkaW8tb3V0ZXItY2lyY2xlIHtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkKTtcbiAgICAgIH1cblxuICAgICAgLm1hdC1yYWRpby1yaXBwbGUgLm1hdC1yaXBwbGUtZWxlbWVudCxcbiAgICAgIC5tYXQtcmFkaW8taW5uZXItY2lyY2xlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXNhYmxlZCk7XG4gICAgICB9XG5cbiAgICAgIC5tYXQtcmFkaW8tbGFiZWwtY29udGVudCB7XG4gICAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTd2l0Y2ggdGhpcyB0byBhIHNvbGlkIGNvbG9yIHNpbmNlIHdlJ3JlIHVzaW5nIGBvcGFjaXR5YFxuICAgIC8vIHRvIGNvbnRyb2wgaG93IG9wYXF1ZSB0aGUgcmlwcGxlIHNob3VsZCBiZS5cbiAgICAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hcF9nZXQoJGZvcmVncm91bmQsIGJhc2UpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXJhZGlvLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LXJhZGlvLWJ1dHRvbiB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1yYWRpby1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtcmFkaW8tdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1yYWRpbycpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1yYWRpby1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXJhZGlvLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcmFkaW8tdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LXNlbGVjdC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuXG4gIC5tYXQtc2VsZWN0LXZhbHVlIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxuXG4gIC5tYXQtc2VsZWN0LXBsYWNlaG9sZGVyIHtcbiAgICBjb2xvcjogX21hdC1jb250cm9sLXBsYWNlaG9sZGVyLWNvbG9yKCRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1zZWxlY3QtZGlzYWJsZWQgLm1hdC1zZWxlY3QtdmFsdWUge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuICB9XG5cbiAgLm1hdC1zZWxlY3QtYXJyb3cge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtc2VsZWN0LXBhbmVsIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDQsICRjb25maWcpO1xuXG4gICAgLm1hdC1vcHRpb24ubWF0LXNlbGVjdGVkOm5vdCgubWF0LW9wdGlvbi1tdWx0aXBsZSkge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBob3ZlciwgMC4xMik7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkIHtcbiAgICAmLm1hdC1mb2N1c2VkIHtcbiAgICAgICYubWF0LXByaW1hcnkgLm1hdC1zZWxlY3QtYXJyb3cge1xuICAgICAgICBjb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCB0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgJi5tYXQtYWNjZW50IC5tYXQtc2VsZWN0LWFycm93IHtcbiAgICAgICAgY29sb3I6IG1hdC1jb2xvcigkYWNjZW50LCB0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgJi5tYXQtd2FybiAubWF0LXNlbGVjdC1hcnJvdyB7XG4gICAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHdhcm4sIHRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tYXQtc2VsZWN0Lm1hdC1zZWxlY3QtaW52YWxpZCAubWF0LXNlbGVjdC1hcnJvdyB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCR3YXJuLCB0ZXh0KTtcbiAgICB9XG5cbiAgICAubWF0LXNlbGVjdC5tYXQtc2VsZWN0LWRpc2FibGVkIC5tYXQtc2VsZWN0LWFycm93IHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXNlbGVjdC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLy8gVGhlIHVuaXQtbGVzcyBsaW5lLWhlaWdodCBmcm9tIHRoZSBmb250IGNvbmZpZy5cbiAgJGxpbmUtaGVpZ2h0OiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgaW5wdXQpO1xuXG4gIC5tYXQtc2VsZWN0IHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1zZWxlY3QtdHJpZ2dlciB7XG4gICAgaGVpZ2h0OiAkbGluZS1oZWlnaHQgKiAxZW07XG4gIH1cbn1cblxuQG1peGluIF9tYXQtc2VsZWN0LWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1zZWxlY3QtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1zZWxlY3QnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2VsZWN0LWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtc2VsZWN0LWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2VsZWN0LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuQG1peGluIG1hdC1zaWRlbmF2LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgJGRyYXdlci1iYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGRpYWxvZyk7XG4gICRkcmF3ZXItY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I6ICBtYXQtY29sb3IoJGJhY2tncm91bmQsIGJhY2tncm91bmQpO1xuICAkZHJhd2VyLXB1c2gtYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBkaWFsb2cpO1xuICAkZHJhd2VyLXNpZGUtYm9yZGVyOiBzb2xpZCAxcHggbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcblxuICAubWF0LWRyYXdlci1jb250YWluZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRkcmF3ZXItY29udGFpbmVyLWJhY2tncm91bmQtY29sb3I7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gIH1cblxuICAubWF0LWRyYXdlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGRyYXdlci1iYWNrZ3JvdW5kLWNvbG9yO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuXG4gICAgJi5tYXQtZHJhd2VyLXB1c2gge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGRyYXdlci1wdXNoLWJhY2tncm91bmQtY29sb3I7XG4gICAgfVxuXG4gICAgJjpub3QoLm1hdC1kcmF3ZXItc2lkZSkge1xuICAgICAgLy8gVGhlIGVsZXZhdGlvbiBvZiB6LTE2IGlzIG5vdGVkIGluIHRoZSBkZXNpZ24gc3BlY2lmaWNhdGlvbnMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vY29tcG9uZW50cy9uYXZpZ2F0aW9uLWRyYXdlci5odG1sXG4gICAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbigxNiwgJGNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1kcmF3ZXItc2lkZSB7XG4gICAgYm9yZGVyLXJpZ2h0OiAkZHJhd2VyLXNpZGUtYm9yZGVyO1xuXG4gICAgJi5tYXQtZHJhd2VyLWVuZCB7XG4gICAgICBib3JkZXItbGVmdDogJGRyYXdlci1zaWRlLWJvcmRlcjtcbiAgICAgIGJvcmRlci1yaWdodDogbm9uZTtcbiAgICB9XG4gIH1cblxuICBbZGlyPSdydGwnXSAubWF0LWRyYXdlci1zaWRlIHtcbiAgICBib3JkZXItbGVmdDogJGRyYXdlci1zaWRlLWJvcmRlcjtcbiAgICBib3JkZXItcmlnaHQ6IG5vbmU7XG5cbiAgICAmLm1hdC1kcmF3ZXItZW5kIHtcbiAgICAgIGJvcmRlci1sZWZ0OiBub25lO1xuICAgICAgYm9yZGVyLXJpZ2h0OiAkZHJhd2VyLXNpZGUtYm9yZGVyO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZHJhd2VyLWJhY2tkcm9wLm1hdC1kcmF3ZXItc2hvd24ge1xuICAgICRvcGFjaXR5OiAwLjY7XG4gICAgJGJhY2tkcm9wLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQsICRvcGFjaXR5KTtcblxuICAgIEBpZiAodHlwZS1vZigkYmFja2Ryb3AtY29sb3IpID09IGNvbG9yKSB7XG4gICAgICAvLyBXZSB1c2UgaW52ZXJ0KCkgaGVyZSB0byBoYXZlIHRoZSBkYXJrZW4gdGhlIGJhY2tncm91bmQgY29sb3IgZXhwZWN0ZWQgdG8gYmUgdXNlZC4gSWYgdGhlXG4gICAgICAvLyBiYWNrZ3JvdW5kIGlzIGxpZ2h0LCB3ZSB1c2UgYSBkYXJrIGJhY2tkcm9wLiBJZiB0aGUgYmFja2dyb3VuZCBpcyBkYXJrLFxuICAgICAgLy8gd2UgdXNlIGEgbGlnaHQgYmFja2Ryb3AuXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbnZlcnQoJGJhY2tkcm9wLWNvbG9yKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgLy8gSWYgd2UgY291bGRuJ3QgcmVzb2x2ZSB0aGUgYmFja2Ryb3AgY29sb3IgdG8gYSBjb2xvciB2YWx1ZSwgZmFsbCBiYWNrIHRvIHVzaW5nXG4gICAgICAvLyBgb3BhY2l0eWAgdG8gbWFrZSBpdCBvcGFxdWUgc2luY2UgaXRzIGVuZCB2YWx1ZSBjb3VsZCBiZSBhIHNvbGlkIGNvbG9yLlxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tkcm9wLWNvbG9yO1xuICAgICAgb3BhY2l0eTogJG9wYWNpdHk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtc2lkZW5hdi10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LXNpZGVuYXYtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXNpZGVuYXYtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1zaWRlbmF2Jykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXNpZGVuYXYtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1zaWRlbmF2LWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2lkZW5hdi10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuQG1peGluIF9tYXQtc2xpZGUtdG9nZ2xlLWNoZWNrZWQoJHBhbGV0dGUsICR0aHVtYi1jaGVja2VkLWh1ZSkge1xuICAmLm1hdC1jaGVja2VkIHtcbiAgICAubWF0LXNsaWRlLXRvZ2dsZS10aHVtYiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUsICR0aHVtYi1jaGVja2VkLWh1ZSk7XG4gICAgfVxuXG4gICAgLm1hdC1zbGlkZS10b2dnbGUtYmFyIHtcbiAgICAgIC8vIE9wYWNpdHkgaXMgZGV0ZXJtaW5lZCBmcm9tIHRoZSBzcGVjcyBmb3IgdGhlIHNlbGVjdGlvbiBjb250cm9scy5cbiAgICAgIC8vIFNlZTogaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vY29tcG9uZW50cy9zZWxlY3Rpb24tY29udHJvbHMuaHRtbCNzcGVjc1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwYWxldHRlLCAkdGh1bWItY2hlY2tlZC1odWUsIDAuNTQpO1xuICAgIH1cblxuICAgIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgICAgLy8gU2V0IG5vIG9wYWNpdHkgZm9yIHRoZSByaXBwbGVzIGJlY2F1c2UgdGhlIHJpcHBsZSBvcGFjaXR5IHdpbGwgYmUgYWRqdXN0ZWQgZHluYW1pY2FsbHlcbiAgICAgIC8vIGJhc2VkIG9uIHRoZSB0eXBlIG9mIGludGVyYWN0aW9uIHdpdGggdGhlIHNsaWRlLXRvZ2dsZSAoZS5nLiBmb3IgaG92ZXIsIGZvY3VzKVxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwYWxldHRlLCAkdGh1bWItY2hlY2tlZC1odWUpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXNsaWRlLXRvZ2dsZS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkaXMtZGFyazogbWFwX2dldCgkY29uZmlnLCBpcy1kYXJrKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAvLyBDb2xvciBodWVzIGFyZSBiYXNlZCBvbiB0aGUgc3BlY3Mgd2hpY2ggYnJpZWZseSBzaG93IHRoZSBodWVzIHRoYXQgYXJlIGFwcGxpZWQgdG8gYSBzd2l0Y2guXG4gIC8vIFRoZSAyMDE4IHNwZWNzIG5vIGxvbmdlciBkZXNjcmliZSBob3cgZGFyayBzd2l0Y2hlcyBzaG91bGQgbG9vayBsaWtlLiBEdWUgdG8gdGhlIGxhY2sgb2ZcbiAgLy8gaW5mb3JtYXRpb24gZm9yIGRhcmsgdGhlbWVkIHN3aXRjaGVzLCB3ZSBwYXJ0aWFsbHkga2VlcCB0aGUgb2xkIGJlaGF2aW9yIHRoYXQgaXMgYmFzZWQgb25cbiAgLy8gdGhlIHByZXZpb3VzIHNwZWNpZmljYXRpb25zLiBGb3IgdGhlIGNoZWNrZWQgY29sb3Igd2UgYWx3YXlzIHVzZSB0aGUgYGRlZmF1bHRgIGh1ZSBiZWNhdXNlXG4gIC8vIHRoYXQgZm9sbG93cyBNREMgYW5kIGFsc28gbWFrZXMgaXQgZWFzaWVyIGZvciBwZW9wbGUgdG8gY3JlYXRlIGEgY3VzdG9tIHRoZW1lIHdpdGhvdXQgbmVlZGluZ1xuICAvLyB0byBzcGVjaWZ5IGVhY2ggaHVlIGluZGl2aWR1YWxseS5cbiAgJHRodW1iLXVuY2hlY2tlZC1odWU6IGlmKCRpcy1kYXJrLCA0MDAsIDUwKTtcbiAgJHRodW1iLWNoZWNrZWQtaHVlOiBkZWZhdWx0O1xuXG4gICRiYXItdW5jaGVja2VkLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkKTtcbiAgJHJpcHBsZS11bmNoZWNrZWQtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgYmFzZSk7XG5cbiAgLm1hdC1zbGlkZS10b2dnbGUge1xuICAgIEBpbmNsdWRlIF9tYXQtc2xpZGUtdG9nZ2xlLWNoZWNrZWQoJGFjY2VudCwgJHRodW1iLWNoZWNrZWQtaHVlKTtcblxuICAgICYubWF0LXByaW1hcnkge1xuICAgICAgQGluY2x1ZGUgX21hdC1zbGlkZS10b2dnbGUtY2hlY2tlZCgkcHJpbWFyeSwgJHRodW1iLWNoZWNrZWQtaHVlKTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtc2xpZGUtdG9nZ2xlLWNoZWNrZWQoJHdhcm4sICR0aHVtYi1jaGVja2VkLWh1ZSk7XG4gICAgfVxuXG4gICAgJjpub3QoLm1hdC1jaGVja2VkKSAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICAgIC8vIFNldCBubyBvcGFjaXR5IGZvciB0aGUgcmlwcGxlcyBiZWNhdXNlIHRoZSByaXBwbGUgb3BhY2l0eSB3aWxsIGJlIGFkanVzdGVkIGR5bmFtaWNhbGx5XG4gICAgICAvLyBiYXNlZCBvbiB0aGUgdHlwZSBvZiBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzbGlkZS10b2dnbGUgKGUuZy4gZm9yIGhvdmVyLCBmb2N1cylcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRyaXBwbGUtdW5jaGVja2VkLWNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtc2xpZGUtdG9nZ2xlLXRodW1iIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbigxLCAkY29uZmlnKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJG1hdC1ncmV5LCAkdGh1bWItdW5jaGVja2VkLWh1ZSk7XG4gIH1cblxuICAubWF0LXNsaWRlLXRvZ2dsZS1iYXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYXItdW5jaGVja2VkLWNvbG9yO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtc2xpZGUtdG9nZ2xlLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LXNsaWRlLXRvZ2dsZS1jb250ZW50IHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXNsaWRlLXRvZ2dsZS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtc2xpZGUtdG9nZ2xlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtc2xpZGUtdG9nZ2xlJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXNsaWRlLXRvZ2dsZS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXNsaWRlLXRvZ2dsZS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXNsaWRlLXRvZ2dsZS10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuQG1peGluIF9tYXQtc2xpZGVyLWlubmVyLWNvbnRlbnQtdGhlbWUoJHBhbGV0dGUpIHtcbiAgLm1hdC1zbGlkZXItdHJhY2stZmlsbCxcbiAgLm1hdC1zbGlkZXItdGh1bWIsXG4gIC5tYXQtc2xpZGVyLXRodW1iLWxhYmVsIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUpO1xuICB9XG5cbiAgLm1hdC1zbGlkZXItdGh1bWItbGFiZWwtdGV4dCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSwgZGVmYXVsdC1jb250cmFzdCk7XG4gIH1cblxuICAubWF0LXNsaWRlci1mb2N1cy1yaW5nIHtcbiAgICAkb3BhY2l0eTogMC4yO1xuICAgICRjb2xvcjogbWF0LWNvbG9yKCRwYWxldHRlLCBkZWZhdWx0LCAkb3BhY2l0eSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yO1xuXG4gICAgLy8gYG1hdC1jb2xvcmAgdXNlcyBgcmdiYWAgZm9yIHRoZSBvcGFjaXR5IHdoaWNoIHdvbid0IHdvcmsgd2l0aFxuICAgIC8vIENTUyB2YXJpYWJsZXMgc28gd2UgbmVlZCB0byB1c2UgYG9wYWNpdHlgIGFzIGEgZmFsbGJhY2suXG4gICAgQGlmICh0eXBlLW9mKCRjb2xvcikgIT0gY29sb3IpIHtcbiAgICAgIG9wYWNpdHk6ICRvcGFjaXR5O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXNsaWRlci1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gICRtYXQtc2xpZGVyLW9mZi1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzbGlkZXItb2ZmKTtcbiAgJG1hdC1zbGlkZXItb2ZmLWZvY3VzZWQtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2xpZGVyLW9mZi1hY3RpdmUpO1xuICAkbWF0LXNsaWRlci1kaXNhYmxlZC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzbGlkZXItb2ZmKTtcbiAgJG1hdC1zbGlkZXItbGFiZWxlZC1taW4tdmFsdWUtdGh1bWItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2xpZGVyLW1pbik7XG4gICRtYXQtc2xpZGVyLWxhYmVsZWQtbWluLXZhbHVlLXRodW1iLWxhYmVsLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNsaWRlci1vZmYpO1xuICAkbWF0LXNsaWRlci10aWNrLW9wYWNpdHk6IDAuNztcbiAgJG1hdC1zbGlkZXItdGljay1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBiYXNlLCAkbWF0LXNsaWRlci10aWNrLW9wYWNpdHkpO1xuICAkbWF0LXNsaWRlci10aWNrLXNpemU6IDJweDtcblxuICAubWF0LXNsaWRlci10cmFjay1iYWNrZ3JvdW5kIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWF0LXNsaWRlci1vZmYtY29sb3I7XG4gIH1cblxuICAubWF0LXByaW1hcnkge1xuICAgIEBpbmNsdWRlIF9tYXQtc2xpZGVyLWlubmVyLWNvbnRlbnQtdGhlbWUoJHByaW1hcnkpO1xuICB9XG5cbiAgLm1hdC1hY2NlbnQge1xuICAgIEBpbmNsdWRlIF9tYXQtc2xpZGVyLWlubmVyLWNvbnRlbnQtdGhlbWUoJGFjY2VudCk7XG4gIH1cblxuICAubWF0LXdhcm4ge1xuICAgIEBpbmNsdWRlIF9tYXQtc2xpZGVyLWlubmVyLWNvbnRlbnQtdGhlbWUoJHdhcm4pO1xuICB9XG5cbiAgLm1hdC1zbGlkZXI6aG92ZXIsXG4gIC5jZGstZm9jdXNlZCB7XG4gICAgLm1hdC1zbGlkZXItdHJhY2stYmFja2dyb3VuZCB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWF0LXNsaWRlci1vZmYtZm9jdXNlZC1jb2xvcjtcbiAgICB9XG4gIH1cblxuICAubWF0LXNsaWRlci1kaXNhYmxlZCB7XG4gICAgLm1hdC1zbGlkZXItdHJhY2stYmFja2dyb3VuZCxcbiAgICAubWF0LXNsaWRlci10cmFjay1maWxsLFxuICAgIC5tYXQtc2xpZGVyLXRodW1iIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtYXQtc2xpZGVyLWRpc2FibGVkLWNvbG9yO1xuICAgIH1cblxuICAgICY6aG92ZXIge1xuICAgICAgLm1hdC1zbGlkZXItdHJhY2stYmFja2dyb3VuZCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtYXQtc2xpZGVyLWRpc2FibGVkLWNvbG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tYXQtc2xpZGVyLW1pbi12YWx1ZSB7XG4gICAgLm1hdC1zbGlkZXItZm9jdXMtcmluZyB7XG4gICAgICAkb3BhY2l0eTogMC4xMjtcbiAgICAgICRjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBiYXNlLCAkb3BhY2l0eSk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I7XG5cbiAgICAgIC8vIGBtYXQtY29sb3JgIHVzZXMgYHJnYmFgIGZvciB0aGUgb3BhY2l0eSB3aGljaCB3b24ndCB3b3JrIHdpdGhcbiAgICAgIC8vIENTUyB2YXJpYWJsZXMgc28gd2UgbmVlZCB0byB1c2UgYG9wYWNpdHlgIGFzIGEgZmFsbGJhY2suXG4gICAgICBAaWYgKHR5cGUtb2YoJGNvbG9yKSAhPSBjb2xvcikge1xuICAgICAgICBvcGFjaXR5OiAkb3BhY2l0eTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1hdC1zbGlkZXItdGh1bWItbGFiZWwtc2hvd2luZyB7XG4gICAgICAubWF0LXNsaWRlci10aHVtYixcbiAgICAgIC5tYXQtc2xpZGVyLXRodW1iLWxhYmVsIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1hdC1zbGlkZXItbGFiZWxlZC1taW4tdmFsdWUtdGh1bWItY29sb3I7XG4gICAgICB9XG5cbiAgICAgICYuY2RrLWZvY3VzZWQge1xuICAgICAgICAubWF0LXNsaWRlci10aHVtYixcbiAgICAgICAgLm1hdC1zbGlkZXItdGh1bWItbGFiZWwge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtYXQtc2xpZGVyLWxhYmVsZWQtbWluLXZhbHVlLXRodW1iLWxhYmVsLWNvbG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJjpub3QoLm1hdC1zbGlkZXItdGh1bWItbGFiZWwtc2hvd2luZykge1xuICAgICAgLm1hdC1zbGlkZXItdGh1bWIge1xuICAgICAgICBib3JkZXItY29sb3I6ICRtYXQtc2xpZGVyLW9mZi1jb2xvcjtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgICY6aG92ZXIsXG4gICAgICAmLmNkay1mb2N1c2VkIHtcbiAgICAgICAgLm1hdC1zbGlkZXItdGh1bWIge1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogJG1hdC1zbGlkZXItb2ZmLWZvY3VzZWQtY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICAmLm1hdC1zbGlkZXItZGlzYWJsZWQgLm1hdC1zbGlkZXItdGh1bWIge1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogJG1hdC1zbGlkZXItZGlzYWJsZWQtY29sb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubWF0LXNsaWRlci1oYXMtdGlja3MgLm1hdC1zbGlkZXItd3JhcHBlcjo6YWZ0ZXIge1xuICAgIGJvcmRlci1jb2xvcjogJG1hdC1zbGlkZXItdGljay1jb2xvcjtcblxuICAgIC8vIGBtYXQtY29sb3JgIHVzZXMgYHJnYmFgIGZvciB0aGUgb3BhY2l0eSB3aGljaCB3b24ndCB3b3JrIHdpdGhcbiAgICAvLyBDU1MgdmFyaWFibGVzIHNvIHdlIG5lZWQgdG8gdXNlIGBvcGFjaXR5YCBhcyBhIGZhbGxiYWNrLlxuICAgIEBpZiAodHlwZS1vZigkbWF0LXNsaWRlci10aWNrLWNvbG9yKSAhPSBjb2xvcikge1xuICAgICAgb3BhY2l0eTogJG1hdC1zbGlkZXItdGljay1vcGFjaXR5O1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtc2xpZGVyLWhvcml6b250YWwgLm1hdC1zbGlkZXItdGlja3Mge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICRtYXQtc2xpZGVyLXRpY2stY29sb3IsXG4gICAgICAgICRtYXQtc2xpZGVyLXRpY2stY29sb3IgJG1hdC1zbGlkZXItdGljay1zaXplLCB0cmFuc3BhcmVudCAwLCB0cmFuc3BhcmVudCk7XG4gICAgLy8gRmlyZWZveCBkb2Vzbid0IGRyYXcgdGhlIGdyYWRpZW50IGNvcnJlY3RseSB3aXRoICd0byByaWdodCdcbiAgICAvLyAoc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzMTQzMTkpLlxuICAgIGJhY2tncm91bmQtaW1hZ2U6IC1tb3otcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCgwLjAwMDFkZWcsICRtYXQtc2xpZGVyLXRpY2stY29sb3IsXG4gICAgICAgICRtYXQtc2xpZGVyLXRpY2stY29sb3IgJG1hdC1zbGlkZXItdGljay1zaXplLCB0cmFuc3BhcmVudCAwLCB0cmFuc3BhcmVudCk7XG5cbiAgICAvLyBgbWF0LWNvbG9yYCB1c2VzIGByZ2JhYCBmb3IgdGhlIG9wYWNpdHkgd2hpY2ggd29uJ3Qgd29yayB3aXRoXG4gICAgLy8gQ1NTIHZhcmlhYmxlcyBzbyB3ZSBuZWVkIHRvIHVzZSBgb3BhY2l0eWAgYXMgYSBmYWxsYmFjay5cbiAgICBAaWYgKHR5cGUtb2YoJG1hdC1zbGlkZXItdGljay1jb2xvcikgIT0gY29sb3IpIHtcbiAgICAgIG9wYWNpdHk6ICRtYXQtc2xpZGVyLXRpY2stb3BhY2l0eTtcbiAgICB9XG4gIH1cblxuICAubWF0LXNsaWRlci12ZXJ0aWNhbCAubWF0LXNsaWRlci10aWNrcyB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICRtYXQtc2xpZGVyLXRpY2stY29sb3IsXG4gICAgICAgICRtYXQtc2xpZGVyLXRpY2stY29sb3IgJG1hdC1zbGlkZXItdGljay1zaXplLCB0cmFuc3BhcmVudCAwLCB0cmFuc3BhcmVudCk7XG5cbiAgICAvLyBgbWF0LWNvbG9yYCB1c2VzIGByZ2JhYCBmb3IgdGhlIG9wYWNpdHkgd2hpY2ggd29uJ3Qgd29yayB3aXRoXG4gICAgLy8gQ1NTIHZhcmlhYmxlcyBzbyB3ZSBuZWVkIHRvIHVzZSBgb3BhY2l0eWAgYXMgYSBmYWxsYmFjay5cbiAgICBAaWYgKHR5cGUtb2YoJG1hdC1zbGlkZXItdGljay1jb2xvcikgIT0gY29sb3IpIHtcbiAgICAgIG9wYWNpdHk6ICRtYXQtc2xpZGVyLXRpY2stb3BhY2l0eTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1zbGlkZXItdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtc2xpZGVyLXRodW1iLWxhYmVsLXRleHQge1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBjYXB0aW9uKTtcbiAgICAgIHdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LXNsaWRlci1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtc2xpZGVyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtc2xpZGVyJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXNsaWRlci1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXNsaWRlci1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXNsaWRlci10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cbiRtYXQtc3RlcHBlci1oZWFkZXItaGVpZ2h0OiA3MnB4ICFkZWZhdWx0O1xuLy8gTWluaW11bSBoZWlnaHQgZm9yIGhpZ2hlc3QgZGVuc2l0eSBzdGVwcGVyJ3MgaXMgZGV0ZXJtaW5lZCBiYXNlZCBvbiBob3cgbXVjaFxuLy8gc3RlcHBlciBoZWFkZXJzIGNhbiBzaHJpbmsgdW50aWwgdGhlIHN0ZXAgaWNvbiBvciBzdGVwIGxhYmVsIGV4Y2VlZC4gV2UgY2FuJ3QgdXNlXG4vLyBhIHZhbHVlIGJlbG93IGA0MnB4YCBiZWNhdXNlIHRoZSBvcHRpb25hbCBsYWJlbCBmb3Igc3RlcHMgd291bGQgb3RoZXJ3aXNlIGV4Y2VlZC5cbiRtYXQtc3RlcHBlci1oZWFkZXItbWluaW11bS1oZWlnaHQ6IDQycHggIWRlZmF1bHQ7XG4kbWF0LXN0ZXBwZXItaGVhZGVyLW1heGltdW0taGVpZ2h0OiAkbWF0LXN0ZXBwZXItaGVhZGVyLWhlaWdodCAhZGVmYXVsdDtcblxuJG1hdC1zdGVwcGVyLWRlbnNpdHktY29uZmlnOiAoXG4gIGhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRtYXQtc3RlcHBlci1oZWFkZXItaGVpZ2h0LFxuICAgIG1heGltdW06ICRtYXQtc3RlcHBlci1oZWFkZXItbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1hdC1zdGVwcGVyLWhlYWRlci1taW5pbXVtLWhlaWdodCxcbiAgKVxuKSAhZGVmYXVsdDtcblxuLy8gTm90ZTogVGhlc2UgdmFyaWFibGVzIGFyZSBub3QgZGVub3RlZCB3aXRoIGAhZGVmYXVsdGAgYmVjYXVzZSB0aGV5IGFyZSB1c2VkIGluIHRoZSBub24tdGhlbWVcbi8vIGNvbXBvbmVudCBzdHlsZXMuIE1vZGlmeWluZyB0aGVzZSB2YXJpYWJsZXMgZG9lcyBub3QgaGF2ZSB0aGUgZGVzaXJlZCBlZmZlY3QgZm9yIGNvbnN1bWVycy5cbiRtYXQtc3RlcHBlci1sYWJlbC1oZWFkZXItaGVpZ2h0OiAyNHB4O1xuJG1hdC1zdGVwcGVyLWxhYmVsLXBvc2l0aW9uLWJvdHRvbS10b3AtZ2FwOiAxNnB4O1xuJG1hdC1zdGVwcGVyLWxhYmVsLW1pbi13aWR0aDogNTBweDtcblxuJG1hdC12ZXJ0aWNhbC1zdGVwcGVyLWNvbnRlbnQtbWFyZ2luOiAzNnB4O1xuXG4kbWF0LXN0ZXBwZXItc2lkZS1nYXA6IDI0cHg7XG4kbWF0LXN0ZXBwZXItbGluZS13aWR0aDogMXB4O1xuJG1hdC1zdGVwcGVyLWxpbmUtZ2FwOiA4cHg7XG5cbiRtYXQtc3RlcC1zdWItbGFiZWwtZm9udC1zaXplOiAxMnB4O1xuJG1hdC1zdGVwLWhlYWRlci1pY29uLXNpemU6IDE2cHg7XG5cblxuQG1peGluIG1hdC1zdGVwcGVyLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuXG4gIC5tYXQtc3RlcC1oZWFkZXIge1xuICAgICYuY2RrLWtleWJvYXJkLWZvY3VzZWQsXG4gICAgJi5jZGstcHJvZ3JhbS1mb2N1c2VkLFxuICAgICY6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBob3Zlcik7XG4gICAgfVxuXG4gICAgLy8gT24gdG91Y2ggZGV2aWNlcyB0aGUgOmhvdmVyIHN0YXRlIHdpbGwgbGluZ2VyIG9uIHRoZSBlbGVtZW50IGFmdGVyIGEgdGFwLlxuICAgIC8vIFJlc2V0IGl0IHZpYSBgQG1lZGlhYCBhZnRlciB0aGUgZGVjbGFyYXRpb24sIGJlY2F1c2UgdGhlIG1lZGlhIHF1ZXJ5IGlzbid0XG4gICAgLy8gc3VwcG9ydGVkIGJ5IGFsbCBicm93c2VycyB5ZXQuXG4gICAgQG1lZGlhIChob3Zlcjogbm9uZSkge1xuICAgICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1hdC1zdGVwLWxhYmVsLFxuICAgIC5tYXQtc3RlcC1vcHRpb25hbCB7XG4gICAgICAvLyBUT0RPKGpvc2VwaHBlcnJvdHQpOiBVcGRhdGUgdG8gdXNpbmcgYSBjb3JyZWN0ZWQgZGlzYWJsZWQtdGV4dCBjb250cmFzdFxuICAgICAgLy8gaW5zdGVhZCBvZiBzZWNvbmRhcnktdGV4dC5cbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgICB9XG5cbiAgICAubWF0LXN0ZXAtaWNvbiB7XG4gICAgICAvLyBUT0RPKGpvc2VwaHBlcnJvdHQpOiBVcGRhdGUgdG8gdXNpbmcgYSBjb3JyZWN0ZWQgZGlzYWJsZWQtdGV4dCBjb250cmFzdFxuICAgICAgLy8gaW5zdGVhZCBvZiBzZWNvbmRhcnktdGV4dC5cbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSwgZGVmYXVsdC1jb250cmFzdCk7XG4gICAgfVxuXG4gICAgLm1hdC1zdGVwLWljb24tc2VsZWN0ZWQsXG4gICAgLm1hdC1zdGVwLWljb24tc3RhdGUtZG9uZSxcbiAgICAubWF0LXN0ZXAtaWNvbi1zdGF0ZS1lZGl0IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSk7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgICB9XG5cbiAgICAubWF0LXN0ZXAtaWNvbi1zdGF0ZS1lcnJvciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHdhcm4sIHRleHQpO1xuICAgIH1cblxuICAgIC5tYXQtc3RlcC1sYWJlbC5tYXQtc3RlcC1sYWJlbC1hY3RpdmUge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gICAgfVxuXG4gICAgLm1hdC1zdGVwLWxhYmVsLm1hdC1zdGVwLWxhYmVsLWVycm9yIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHdhcm4sIHRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtc3RlcHBlci1ob3Jpem9udGFsLCAubWF0LXN0ZXBwZXItdmVydGljYWwge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCk7XG4gIH1cblxuICAubWF0LXN0ZXBwZXItdmVydGljYWwtbGluZTo6YmVmb3JlIHtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcbiAgfVxuXG4gIC5tYXQtaG9yaXpvbnRhbC1zdGVwcGVyLWhlYWRlcjo6YmVmb3JlLFxuICAubWF0LWhvcml6b250YWwtc3RlcHBlci1oZWFkZXI6OmFmdGVyLFxuICAubWF0LXN0ZXBwZXItaG9yaXpvbnRhbC1saW5lIHtcbiAgICBib3JkZXItdG9wLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtc3RlcHBlci10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1zdGVwcGVyLXZlcnRpY2FsLCAubWF0LXN0ZXBwZXItaG9yaXpvbnRhbCB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgfVxuXG4gIC5tYXQtc3RlcC1sYWJlbCB7XG4gICAgZm9udDoge1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTEpO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0xKTtcbiAgICB9O1xuICB9XG5cbiAgLm1hdC1zdGVwLXN1Yi1sYWJlbC1lcnJvciB7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgfVxuXG4gIC5tYXQtc3RlcC1sYWJlbC1lcnJvciB7XG4gICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMik7XG4gIH1cblxuICAubWF0LXN0ZXAtbGFiZWwtc2VsZWN0ZWQge1xuICAgIGZvbnQ6IHtcbiAgICAgIHNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0yKTtcbiAgICAgIHdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMik7XG4gICAgfTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1zdGVwcGVyLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkZGVuc2l0eS1zY2FsZTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGhlaWdodDogX21hdC1kZW5zaXR5LXByb3AtdmFsdWUoJG1hdC1zdGVwcGVyLWRlbnNpdHktY29uZmlnLCAkZGVuc2l0eS1zY2FsZSwgaGVpZ2h0KTtcbiAgJHZlcnRpY2FsLXBhZGRpbmc6ICgkaGVpZ2h0IC0gJG1hdC1zdGVwcGVyLWxhYmVsLWhlYWRlci1oZWlnaHQpIC8gMjtcblxuICBAaW5jbHVkZSBfbWF0LWRlbnNpdHktbGVnYWN5LWNvbXBhdGliaWxpdHkoKSB7XG4gICAgLm1hdC1ob3Jpem9udGFsLXN0ZXBwZXItaGVhZGVyIHtcbiAgICAgIGhlaWdodDogJGhlaWdodDtcbiAgICB9XG5cbiAgICAubWF0LXN0ZXBwZXItbGFiZWwtcG9zaXRpb24tYm90dG9tIC5tYXQtaG9yaXpvbnRhbC1zdGVwcGVyLWhlYWRlcixcbiAgICAubWF0LXZlcnRpY2FsLXN0ZXBwZXItaGVhZGVyLCB7XG4gICAgICBwYWRkaW5nOiAkdmVydGljYWwtcGFkZGluZyAkbWF0LXN0ZXBwZXItc2lkZS1nYXA7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlcyB0aGF0IHRoZSB2ZXJ0aWNhbCBsaW5lcyBmb3IgdGhlIHN0ZXAgY29udGVudCBleGNlZWQgaW50byB0aGUgc3RlcFxuICAgIC8vIGhlYWRlcnMgd2l0aCBhIGdpdmVuIGRpc3RhbmNlIChgJG1hdC1zdGVwcGVyLWxpbmUtZ2FwYCkgdG8gdGhlIHN0ZXAgaWNvbi5cbiAgICAubWF0LXN0ZXBwZXItdmVydGljYWwtbGluZTo6YmVmb3JlIHtcbiAgICAgIHRvcDogJG1hdC1zdGVwcGVyLWxpbmUtZ2FwIC0gJHZlcnRpY2FsLXBhZGRpbmc7XG4gICAgICBib3R0b206ICRtYXQtc3RlcHBlci1saW5lLWdhcCAtICR2ZXJ0aWNhbC1wYWRkaW5nO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZXMgdGhhdCB0aGUgaG9yaXpvbnRhbCBsaW5lcyBmb3IgdGhlIHN0ZXAgaGVhZGVyIGFyZSBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxuICAgIC5tYXQtc3RlcHBlci1sYWJlbC1wb3NpdGlvbi1ib3R0b20gLm1hdC1ob3Jpem9udGFsLXN0ZXBwZXItaGVhZGVyIHtcbiAgICAgICY6OmFmdGVyLCAmOjpiZWZvcmUge1xuICAgICAgICB0b3A6ICR2ZXJ0aWNhbC1wYWRkaW5nICsgJG1hdC1zdGVwcGVyLWxhYmVsLWhlYWRlci1oZWlnaHQgLyAyO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVuc3VyZXMgdGhhdCB0aGUgaG9yaXpvbnRhbCBsaW5lIGZvciB0aGUgc3RlcCBjb250ZW50IGlzIGFsaWduZWQgY2VudGVyZWQgdmVydGljYWxseS5cbiAgICAubWF0LXN0ZXBwZXItbGFiZWwtcG9zaXRpb24tYm90dG9tIC5tYXQtc3RlcHBlci1ob3Jpem9udGFsLWxpbmUge1xuICAgICAgdG9wOiAkdmVydGljYWwtcGFkZGluZyArICRtYXQtc3RlcHBlci1sYWJlbC1oZWFkZXItaGVpZ2h0IC8gMjtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1zdGVwcGVyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtc3RlcHBlcicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zdGVwcGVyLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtc3RlcHBlci1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXN0ZXBwZXItdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cbkBtaXhpbiBtYXQtc29ydC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1zb3J0LWhlYWRlci1hcnJvdyB7XG4gICAgJHRhYmxlLWJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgJ2NhcmQnKTtcbiAgICAkdGV4dC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG5cbiAgICAvLyBCZWNhdXNlIHRoZSBhcnJvdyBpcyBtYWRlIHVwIG9mIG11bHRpcGxlIGVsZW1lbnRzIHRoYXQgYXJlIHN0YWNrZWQgb24gdG9wIG9mIGVhY2ggb3RoZXIsXG4gICAgLy8gd2UgY2FuJ3QgdXNlIHRoZSBzZW1pLXRyYW5zcGFyZW50IGNvbG9yIGZyb20gdGhlIHRoZW1lIGRpcmVjdGx5LiBJZiB0aGUgdmFsdWUgaXMgYSBjb2xvclxuICAgIC8vICp0eXBlKiwgd2UgY29udmVydCBpdCBpbnRvIGEgc29saWQgY29sb3IgYnkgdGFraW5nIHRoZSBvcGFjaXR5IGZyb20gdGhlIHJnYmEgdmFsdWUgYW5kXG4gICAgLy8gdXNpbmcgdGhlIHZhbHVlIHRvIGRldGVybWluZSB0aGUgcGVyY2VudGFnZSBvZiB0aGUgYmFja2dyb3VuZCB0byBwdXQgaW50byBmb3JlZ3JvdW5kXG4gICAgLy8gd2hlbiBtaXhpbmcgdGhlIGNvbG9ycyB0b2dldGhlci4gT3RoZXJ3aXNlLCBpZiBpdCByZXNvbHZlcyB0byBzb21ldGhpbmcgZGlmZmVyZW50XG4gICAgLy8gKGUuZy4gaXQgcmVzb2x2ZXMgdG8gYSBDU1MgdmFyaWFibGUpLCB3ZSB1c2UgdGhlIGNvbG9yIGRpcmVjdGx5LlxuICAgIEBpZiAodHlwZS1vZigkdGFibGUtYmFja2dyb3VuZCkgPT0gY29sb3IgYW5kIHR5cGUtb2YoJHRleHQtY29sb3IpID09IGNvbG9yKSB7XG4gICAgICAkdGV4dC1vcGFjaXR5OiBvcGFjaXR5KCR0ZXh0LWNvbG9yKTtcbiAgICAgIGNvbG9yOiBtaXgoJHRhYmxlLWJhY2tncm91bmQsIHJnYmEoJHRleHQtY29sb3IsIDEpLCAoMSAtICR0ZXh0LW9wYWNpdHkpICogMTAwJSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIGNvbG9yOiAkdGV4dC1jb2xvcjtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1zb3J0LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIF9tYXQtc29ydC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtc29ydC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXNvcnQnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc29ydC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXNvcnQtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zb3J0LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuQG1peGluIG1hdC10YWJzLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRoZWFkZXItYm9yZGVyOiAxcHggc29saWQgbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcblxuICAubWF0LXRhYi1uYXYtYmFyLFxuICAubWF0LXRhYi1oZWFkZXIge1xuICAgIGJvcmRlci1ib3R0b206ICRoZWFkZXItYm9yZGVyO1xuICB9XG5cbiAgLm1hdC10YWItZ3JvdXAtaW52ZXJ0ZWQtaGVhZGVyIHtcbiAgICAubWF0LXRhYi1uYXYtYmFyLFxuICAgIC5tYXQtdGFiLWhlYWRlciB7XG4gICAgICBib3JkZXItdG9wOiAkaGVhZGVyLWJvcmRlcjtcbiAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgLm1hdC10YWItbGFiZWwsIC5tYXQtdGFiLWxpbmsge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuXG4gICAgJi5tYXQtdGFiLWRpc2FibGVkIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtdGFiLWhlYWRlci1wYWdpbmF0aW9uLWNoZXZyb24ge1xuICAgIGJvcmRlci1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxuXG4gIC5tYXQtdGFiLWhlYWRlci1wYWdpbmF0aW9uLWRpc2FibGVkIC5tYXQtdGFiLWhlYWRlci1wYWdpbmF0aW9uLWNoZXZyb24ge1xuICAgIGJvcmRlci1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXNhYmxlZC10ZXh0KTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBoZWFkZXIgYm9yZGVyIHdoZW4gdGhlcmUgaXMgYSBiYWNrZ3JvdW5kIGNvbG9yXG4gIC5tYXQtdGFiLWdyb3VwW2NsYXNzKj0nbWF0LWJhY2tncm91bmQtJ10gLm1hdC10YWItaGVhZGVyLFxuICAubWF0LXRhYi1uYXYtYmFyW2NsYXNzKj0nbWF0LWJhY2tncm91bmQtJ10ge1xuICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgYm9yZGVyLXRvcDogbm9uZTtcbiAgfVxuXG4gIC5tYXQtdGFiLWdyb3VwLCAubWF0LXRhYi1uYXYtYmFyIHtcbiAgICAkdGhlbWUtY29sb3JzOiAoXG4gICAgICBwcmltYXJ5OiAkcHJpbWFyeSxcbiAgICAgIGFjY2VudDogJGFjY2VudCxcbiAgICAgIHdhcm46ICR3YXJuXG4gICAgKTtcblxuICAgIEBlYWNoICRuYW1lLCAkY29sb3IgaW4gJHRoZW1lLWNvbG9ycyB7XG4gICAgICAvLyBTZXQgdGhlIGZvcmVncm91bmQgY29sb3Igb2YgdGhlIHRhYnNcbiAgICAgICYubWF0LSN7JG5hbWV9IHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC10YWItbGFiZWwtZm9jdXMoJGNvbG9yKTtcbiAgICAgICAgQGluY2x1ZGUgX21hdC1pbmstYmFyKCRjb2xvcik7XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgaW5rIGJhciB3aGVuIGJhY2tncm91bmQgY29sb3IgaXMgdGhlIHNhbWVcbiAgICAgICAgJi5tYXQtYmFja2dyb3VuZC0jeyRuYW1lfSB7XG4gICAgICAgICAgQGluY2x1ZGUgX21hdC1pbmstYmFyKCRjb2xvciwgZGVmYXVsdC1jb250cmFzdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBAZWFjaCAkbmFtZSwgJGNvbG9yIGluICR0aGVtZS1jb2xvcnMge1xuICAgICAgLy8gU2V0IGJhY2tncm91bmQgY29sb3Igb2YgdGhlIHRhYnMgYW5kIG92ZXJyaWRlIGZvY3VzIGNvbG9yXG4gICAgICAmLm1hdC1iYWNrZ3JvdW5kLSN7JG5hbWV9IHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC10YWItbGFiZWwtZm9jdXMoJGNvbG9yKTtcbiAgICAgICAgQGluY2x1ZGUgX21hdC10YWJzLWJhY2tncm91bmQoJGNvbG9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtaW5rLWJhcigkY29sb3IsICRodWU6IGRlZmF1bHQpIHtcbiAgLm1hdC1pbmstYmFyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGNvbG9yLCAkaHVlKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC10YWItbGFiZWwtZm9jdXMoJHRhYi1mb2N1cy1jb2xvcikge1xuICAubWF0LXRhYi1sYWJlbCxcbiAgLm1hdC10YWItbGluayB7XG4gICAgJi5jZGsta2V5Ym9hcmQtZm9jdXNlZCxcbiAgICAmLmNkay1wcm9ncmFtLWZvY3VzZWQge1xuICAgICAgJjpub3QoLm1hdC10YWItZGlzYWJsZWQpIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCR0YWItZm9jdXMtY29sb3IsIGxpZ2h0ZXIsIDAuMyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LXRhYnMtYmFja2dyb3VuZCgkYmFja2dyb3VuZC1jb2xvcikge1xuICAvLyBTZXQgYmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIHRhYiBncm91cFxuICAubWF0LXRhYi1oZWFkZXIsIC5tYXQtdGFiLWxpbmtzLCAubWF0LXRhYi1oZWFkZXItcGFnaW5hdGlvbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLWNvbG9yKTtcbiAgfVxuXG4gIC8vIFNldCBsYWJlbHMgdG8gY29udHJhc3QgYWdhaW5zdCBiYWNrZ3JvdW5kXG4gIC5tYXQtdGFiLWxhYmVsLCAubWF0LXRhYi1saW5rIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLWNvbG9yLCBkZWZhdWx0LWNvbnRyYXN0KTtcblxuICAgICYubWF0LXRhYi1kaXNhYmxlZCB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLWNvbG9yLCBkZWZhdWx0LWNvbnRyYXN0LCAwLjQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNldCBwYWdpbmF0aW9uIGNoZXZyb25zIHRvIGNvbnRyYXN0IGJhY2tncm91bmRcbiAgLm1hdC10YWItaGVhZGVyLXBhZ2luYXRpb24tY2hldnJvbiB7XG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQtY29sb3IsIGRlZmF1bHQtY29udHJhc3QpO1xuICB9XG5cbiAgLm1hdC10YWItaGVhZGVyLXBhZ2luYXRpb24tZGlzYWJsZWQgLm1hdC10YWItaGVhZGVyLXBhZ2luYXRpb24tY2hldnJvbiB7XG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQtY29sb3IsIGRlZmF1bHQtY29udHJhc3QsIDAuNCk7XG4gIH1cblxuICAvLyBTZXQgcmlwcGxlcyBjb2xvciB0byBiZSB0aGUgY29udHJhc3QgY29sb3Igb2YgdGhlIG5ldyBiYWNrZ3JvdW5kLiBPdGhlcndpc2UgdGhlIHJpcHBsZVxuICAvLyBjb2xvciB3aWxsIGJlIGJhc2VkIG9uIHRoZSBhcHAgYmFja2dyb3VuZCBjb2xvci5cbiAgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLWNvbG9yLCBkZWZhdWx0LWNvbnRyYXN0LCAwLjEyKTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LXRhYnMtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtdGFiLWdyb3VwIHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG5cbiAgLm1hdC10YWItbGFiZWwsIC5tYXQtdGFiLWxpbmsge1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIGJ1dHRvbik7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJ1dHRvbik7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBidXR0b24pO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC10YWJzLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC10YWJzLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtdGFicycpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC10YWJzLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdGFicy1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRhYnMtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbi8vIE1pbmltdW0gaGVpZ2h0IGZvciB0b29sYmFyJ3MgaW4gdGhlIGhpZ2hlc3QgZGVuc2l0eSBpcyBkaWZmaWN1bHQgdG8gZGV0ZXJtaW5lIGJlY2F1c2Vcbi8vIGRldmVsb3BlcnMgY2FuIHByb2plY3QgYXJiaXRyYXJ5IGNvbnRlbnQuIFdlIHVzZSBhIG1pbmltdW0gdmFsdWUgdGhhdCBlbnN1cmVzIHRoYXQgbW9zdFxuLy8gY29tbW9uIGNvbnRlbnQgKGUuZy4gaWNvbiBidXR0b25zKSBkb2VzIG5vdCBleGNlZWQgdGhlIHJvdyBib3VuZGFyaWVzIGluIGhpZ2hlc3QgZGVuc2l0eS5cbiRtYXQtdG9vbGJhci1taW5pbXVtLWhlaWdodDogNDRweCAhZGVmYXVsdDtcblxuJG1hdC10b29sYmFyLWhlaWdodC1kZXNrdG9wOiA2NHB4ICFkZWZhdWx0O1xuJG1hdC10b29sYmFyLW1heGltdW0taGVpZ2h0LWRlc2t0b3A6ICRtYXQtdG9vbGJhci1oZWlnaHQtZGVza3RvcCAhZGVmYXVsdDtcbiRtYXQtdG9vbGJhci1taW5pbXVtLWhlaWdodC1kZXNrdG9wOiAkbWF0LXRvb2xiYXItbWluaW11bS1oZWlnaHQgIWRlZmF1bHQ7XG5cbiRtYXQtdG9vbGJhci1oZWlnaHQtbW9iaWxlOiA1NnB4ICFkZWZhdWx0O1xuJG1hdC10b29sYmFyLW1heGltdW0taGVpZ2h0LW1vYmlsZTogJG1hdC10b29sYmFyLWhlaWdodC1tb2JpbGUgIWRlZmF1bHQ7XG4kbWF0LXRvb2xiYXItbWluaW11bS1oZWlnaHQtbW9iaWxlOiAkbWF0LXRvb2xiYXItbWluaW11bS1oZWlnaHQgIWRlZmF1bHQ7XG5cbiRtYXQtdG9vbGJhci1kZXNrdG9wLWRlbnNpdHktY29uZmlnOiAoXG4gIGhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRtYXQtdG9vbGJhci1oZWlnaHQtZGVza3RvcCxcbiAgICBtYXhpbXVtOiAkbWF0LXRvb2xiYXItbWF4aW11bS1oZWlnaHQtZGVza3RvcCxcbiAgICBtaW5pbXVtOiAkbWF0LXRvb2xiYXItbWluaW11bS1oZWlnaHQtZGVza3RvcCxcbiAgKVxuKSAhZGVmYXVsdDtcblxuJG1hdC10b29sYmFyLW1vYmlsZS1kZW5zaXR5LWNvbmZpZzogKFxuICBoZWlnaHQ6IChcbiAgICBkZWZhdWx0OiAkbWF0LXRvb2xiYXItaGVpZ2h0LW1vYmlsZSxcbiAgICBtYXhpbXVtOiAkbWF0LXRvb2xiYXItbWF4aW11bS1oZWlnaHQtbW9iaWxlLFxuICAgIG1pbmltdW06ICRtYXQtdG9vbGJhci1taW5pbXVtLWhlaWdodC1tb2JpbGUsXG4gIClcbikgIWRlZmF1bHQ7XG5cblxuQG1peGluIF9tYXQtdG9vbGJhci1oZWlnaHQoJGhlaWdodCkge1xuICAubWF0LXRvb2xiYXItbXVsdGlwbGUtcm93cyB7XG4gICAgbWluLWhlaWdodDogJGhlaWdodDtcbiAgfVxuICAubWF0LXRvb2xiYXItcm93LCAubWF0LXRvb2xiYXItc2luZ2xlLXJvdyB7XG4gICAgaGVpZ2h0OiAkaGVpZ2h0O1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXRvb2xiYXItY29sb3IoJHBhbGV0dGUpIHtcbiAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRwYWxldHRlKTtcbiAgY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSwgZGVmYXVsdC1jb250cmFzdCk7XG59XG5cbkBtaXhpbiBfbWF0LXRvb2xiYXItZm9ybS1maWVsZC1vdmVycmlkZXMge1xuICAubWF0LWZvcm0tZmllbGQtdW5kZXJsaW5lLFxuICAubWF0LWZvcm0tZmllbGQtcmlwcGxlLFxuICAubWF0LWZvY3VzZWQgLm1hdC1mb3JtLWZpZWxkLXJpcHBsZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLFxuICAubWF0LWZvY3VzZWQgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLFxuICAubWF0LXNlbGVjdC12YWx1ZSxcbiAgLm1hdC1zZWxlY3QtYXJyb3csXG4gIC5tYXQtZm9ybS1maWVsZC5tYXQtZm9jdXNlZCAubWF0LXNlbGVjdC1hcnJvdyB7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gIH1cblxuICAubWF0LWlucHV0LWVsZW1lbnQge1xuICAgIGNhcmV0LWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIH1cbn1cblxuQG1peGluIG1hdC10b29sYmFyLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC10b29sYmFyIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGFwcC1iYXIpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuXG4gICAgJi5tYXQtcHJpbWFyeSB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRvb2xiYXItY29sb3IoJHByaW1hcnkpO1xuICAgIH1cblxuICAgICYubWF0LWFjY2VudCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRvb2xiYXItY29sb3IoJGFjY2VudCk7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRvb2xiYXItY29sb3IoJHdhcm4pO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIF9tYXQtdG9vbGJhci1mb3JtLWZpZWxkLW92ZXJyaWRlcztcbiAgfVxufVxuXG5AbWl4aW4gbWF0LXRvb2xiYXItdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtdG9vbGJhcixcbiAgLm1hdC10b29sYmFyIGgxLFxuICAubWF0LXRvb2xiYXIgaDIsXG4gIC5tYXQtdG9vbGJhciBoMyxcbiAgLm1hdC10b29sYmFyIGg0LFxuICAubWF0LXRvb2xiYXIgaDUsXG4gIC5tYXQtdG9vbGJhciBoNiB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIHRpdGxlKTtcbiAgICBtYXJnaW46IDA7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtdG9vbGJhci1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGRlbnNpdHktc2NhbGU6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRoZWlnaHQtZGVza3RvcDogX21hdC1kZW5zaXR5LXByb3AtdmFsdWUoXG4gICAgICAkbWF0LXRvb2xiYXItZGVza3RvcC1kZW5zaXR5LWNvbmZpZywgJGRlbnNpdHktc2NhbGUsIGhlaWdodCk7XG4gICRoZWlnaHQtbW9iaWxlOiBfbWF0LWRlbnNpdHktcHJvcC12YWx1ZShcbiAgICAgICRtYXQtdG9vbGJhci1tb2JpbGUtZGVuc2l0eS1jb25maWcsICRkZW5zaXR5LXNjYWxlLCBoZWlnaHQpO1xuXG4gIEBpbmNsdWRlIF9tYXQtZGVuc2l0eS1sZWdhY3ktY29tcGF0aWJpbGl0eSgpIHtcbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgaGVpZ2h0IGZvciB0aGUgdG9vbGJhci5cbiAgICBAaW5jbHVkZSBfbWF0LXRvb2xiYXItaGVpZ2h0KCRoZWlnaHQtZGVza3RvcCk7XG5cbiAgICAvLyBBcyBwZXIgc3BlY3MsIHRvb2xiYXJzIHNob3VsZCBoYXZlIGEgZGlmZmVyZW50IGhlaWdodCBpbiBtb2JpbGUgZGV2aWNlcy4gVGhpcyBoYXMgYmVlblxuICAgIC8vIHNwZWNpZmllZCBpbiB0aGUgb2xkIGd1aWRlbGluZXMgYW5kIGlzIHN0aWxsIG9ic2VydmFibGUgaW4gdGhlIG5ldyBzcGVjaWZpY2F0aW9ucyBieVxuICAgIC8vIGxvb2tpbmcgYXQgdGhlIHNwZWMgaW1hZ2VzLiBTZWU6IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2NvbXBvbmVudHMvYXBwLWJhcnMtdG9wLmh0bWwjYW5hdG9teVxuICAgIEBtZWRpYSAoJG1hdC14c21hbGwpIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdG9vbGJhci1oZWlnaHQoJGhlaWdodC1tb2JpbGUpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXRvb2xiYXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC10b29sYmFyJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRvb2xiYXItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC10b29sYmFyLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtdG9vbGJhci10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cbiRtYXQtdG9vbHRpcC10YXJnZXQtaGVpZ2h0OiAyMnB4O1xuJG1hdC10b29sdGlwLWZvbnQtc2l6ZTogMTBweDtcbiRtYXQtdG9vbHRpcC12ZXJ0aWNhbC1wYWRkaW5nOiAoJG1hdC10b29sdGlwLXRhcmdldC1oZWlnaHQgLSAkbWF0LXRvb2x0aXAtZm9udC1zaXplKSAvIDI7XG5cbiRtYXQtdG9vbHRpcC1oYW5kc2V0LXRhcmdldC1oZWlnaHQ6IDMwcHg7XG4kbWF0LXRvb2x0aXAtaGFuZHNldC1mb250LXNpemU6IDE0cHg7XG4kbWF0LXRvb2x0aXAtaGFuZHNldC12ZXJ0aWNhbC1wYWRkaW5nOlxuICAgICgkbWF0LXRvb2x0aXAtaGFuZHNldC10YXJnZXQtaGVpZ2h0IC0gJG1hdC10b29sdGlwLWhhbmRzZXQtZm9udC1zaXplKSAvIDI7XG5cbkBtaXhpbiBtYXQtdG9vbHRpcC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcblxuICAubWF0LXRvb2x0aXAge1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgdG9vbHRpcCwgMC45KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LXRvb2x0aXAtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtdG9vbHRpcCB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgICBmb250LXNpemU6ICRtYXQtdG9vbHRpcC1mb250LXNpemU7XG4gICAgcGFkZGluZy10b3A6ICRtYXQtdG9vbHRpcC12ZXJ0aWNhbC1wYWRkaW5nO1xuICAgIHBhZGRpbmctYm90dG9tOiAkbWF0LXRvb2x0aXAtdmVydGljYWwtcGFkZGluZztcbiAgfVxuXG4gIC5tYXQtdG9vbHRpcC1oYW5kc2V0IHtcbiAgICBmb250LXNpemU6ICRtYXQtdG9vbHRpcC1oYW5kc2V0LWZvbnQtc2l6ZTtcbiAgICBwYWRkaW5nLXRvcDogJG1hdC10b29sdGlwLWhhbmRzZXQtdmVydGljYWwtcGFkZGluZztcbiAgICBwYWRkaW5nLWJvdHRvbTogJG1hdC10b29sdGlwLWhhbmRzZXQtdmVydGljYWwtcGFkZGluZztcbiAgfVxufVxuXG5AbWl4aW4gX21hdC10b29sdGlwLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC10b29sdGlwLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtdG9vbHRpcCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC10b29sdGlwLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdG9vbHRpcC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRvb2x0aXAtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cblxuQG1peGluIG1hdC1zbmFjay1iYXItY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGlzLWRhcmstdGhlbWU6IG1hcC1nZXQoJGNvbmZpZywgaXMtZGFyayk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcblxuICAubWF0LXNuYWNrLWJhci1jb250YWluZXIge1xuICAgIC8vIFVzZSB0aGUgcHJpbWFyeSB0ZXh0IG9uIHRoZSBkYXJrIHRoZW1lLCBldmVuIHRob3VnaCB0aGUgbGlnaHRlciBvbmUgdXNlc1xuICAgIC8vIGEgc2Vjb25kYXJ5LCBiZWNhdXNlIHRoZSBjb250cmFzdCBvbiB0aGUgbGlnaHQgcHJpbWFyeSB0ZXh0IGlzIHBvb3IuXG4gICAgY29sb3I6IGlmKCRpcy1kYXJrLXRoZW1lLCAkZGFyay1wcmltYXJ5LXRleHQsICRsaWdodC1zZWNvbmRhcnktdGV4dCk7XG4gICAgYmFja2dyb3VuZDogaWYoJGlzLWRhcmstdGhlbWUsIG1hcC1nZXQoJG1hdC1ncmV5LCA1MCksICMzMjMyMzIpO1xuXG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1lbGV2YXRpb24oNiwgJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LXNpbXBsZS1zbmFja2Jhci1hY3Rpb24ge1xuICAgIGNvbG9yOiBpZigkaXMtZGFyay10aGVtZSwgaW5oZXJpdCwgbWF0LWNvbG9yKCRhY2NlbnQsIHRleHQpKTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LXNuYWNrLWJhci10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1zaW1wbGUtc25hY2tiYXIge1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIGJvZHktMSk7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1zaW1wbGUtc25hY2tiYXItYWN0aW9uIHtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgICBmb250OiB7XG4gICAgICBmYW1pbHk6IGluaGVyaXQ7XG4gICAgICBzaXplOiBpbmhlcml0O1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYnV0dG9uKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtc25hY2stYmFyLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1zbmFjay1iYXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1zbmFjay1iYXInKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc25hY2stYmFyLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtc25hY2stYmFyLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc25hY2stYmFyLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vLyBUaGVtZSBzdHlsZXMgdGhhdCBvbmx5IGFwcGx5IHRvIHRoZSBmaWxsIGFwcGVhcmFuY2Ugb2YgdGhlIGZvcm0tZmllbGQuXG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1maWxsLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcblxuICAkZmlsbC1iYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGJhc2UsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjEsIDAuMDQpKTtcbiAgJGZpbGwtZGlzYWJsZWQtYmFja2dyb3VuZDogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBiYXNlLCBpZigkaXMtZGFyay10aGVtZSwgMC4wNSwgMC4wMikpO1xuICAkdW5kZXJsaW5lLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjUsIDAuNDIpKTtcbiAgJGxhYmVsLWRpc2FibGVkLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuXG4gIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLWZpbGwge1xuICAgIC5tYXQtZm9ybS1maWVsZC1mbGV4IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRmaWxsLWJhY2tncm91bmQ7XG4gICAgfVxuXG4gICAgJi5tYXQtZm9ybS1maWVsZC1kaXNhYmxlZCAubWF0LWZvcm0tZmllbGQtZmxleCB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZmlsbC1kaXNhYmxlZC1iYWNrZ3JvdW5kO1xuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmU6OmJlZm9yZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yO1xuICAgIH1cblxuICAgICYubWF0LWZvcm0tZmllbGQtZGlzYWJsZWQge1xuICAgICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgY29sb3I6ICRsYWJlbC1kaXNhYmxlZC1jb2xvcjtcbiAgICAgIH1cblxuICAgICAgLm1hdC1mb3JtLWZpZWxkLXVuZGVybGluZTo6YmVmb3JlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFVzZWQgdG8gbWFrZSBpbnN0YW5jZXMgb2YgdGhlIF9tYXQtZm9ybS1maWVsZC1sYWJlbC1mbG9hdGluZyBtaXhpbiBuZWdsaWdpYmx5IGRpZmZlcmVudCxcbi8vIGFuZCBwcmV2ZW50IEdvb2dsZSdzIENTUyBPcHRpbWl6ZXIgZnJvbSBjb2xsYXBzaW5nIHRoZSBkZWNsYXJhdGlvbnMuIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2Ugc29tZVxuLy8gb2YgdGhlIHNlbGVjdG9ycyBjb250YWluIHBzZXVkby1jbGFzc2VzIG5vdCByZWNvZ25pemVkIGluIGFsbCBicm93c2Vycy4gSWYgYSBicm93c2VyIGVuY291bnRlcnNcbi8vIGFuIHVua25vd24gcHNldWRvLWNsYXNzIGl0IHdpbGwgZGlzY2FyZCB0aGUgZW50aXJlIHJ1bGUgc2V0LlxuJG1hdC1mb3JtLWZpZWxkLWZpbGwtZGVkdXBlOiAwO1xuXG4vLyBBcHBsaWVzIGEgZmxvYXRpbmcgbGFiZWwgYWJvdmUgdGhlIGZvcm0gZmllbGQgY29udHJvbCBpdHNlbGYuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLWZpbGwtbGFiZWwtZmxvYXRpbmcoJGZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCkge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLSRpbmZpeC1tYXJnaW4tdG9wIC0gJGluZml4LXBhZGRpbmcgKyAkbWF0LWZvcm0tZmllbGQtZmlsbC1kZWR1cGUpXG4gICAgICAgICAgICAgc2NhbGUoJGZvbnQtc2NhbGUpO1xuICB3aWR0aDogMTAwJSAvICRmb250LXNjYWxlICsgJG1hdC1mb3JtLWZpZWxkLWZpbGwtZGVkdXBlO1xuXG4gICRtYXQtZm9ybS1maWVsZC1maWxsLWRlZHVwZTogJG1hdC1mb3JtLWZpZWxkLWZpbGwtZGVkdXBlICsgMC4wMDAwMSAhZ2xvYmFsO1xufVxuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtZmlsbC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLy8gVGhlIHVuaXQtbGVzcyBsaW5lLWhlaWdodCBmcm9tIHRoZSBmb250IGNvbmZpZy5cbiAgJGxpbmUtaGVpZ2h0OiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgaW5wdXQpO1xuICAvLyBUaGUgYW1vdW50IHRvIHNjYWxlIHRoZSBmb250IGZvciB0aGUgZmxvYXRpbmcgbGFiZWwgYW5kIHN1YnNjcmlwdC5cbiAgJHN1YnNjcmlwdC1mb250LXNjYWxlOiAwLjc1O1xuICAvLyBUaGUgcGFkZGluZyBvbiB0b3Agb2YgdGhlIGluZml4LlxuICAkaW5maXgtcGFkZGluZy10b3A6IDAuMjVlbTtcbiAgLy8gVGhlIHBhZGRpbmcgYmVsb3cgdGhlIGluZml4LlxuICAkaW5maXgtcGFkZGluZy1ib3R0b206IDAuNzVlbTtcbiAgLy8gVGhlIG1hcmdpbiBhcHBsaWVkIHRvIHRoZSBmb3JtLWZpZWxkLWluZml4IHRvIHJlc2VydmUgc3BhY2UgZm9yIHRoZSBmbG9hdGluZyBsYWJlbC5cbiAgJGluZml4LW1hcmdpbi10b3A6IDFlbSAqICRsaW5lLWhlaWdodCAqICRzdWJzY3JpcHQtZm9udC1zY2FsZTtcbiAgLy8gVGhlIGFtb3VudCB3ZSBvZmZzZXQgdGhlIGxhYmVsIGZyb20gdGhlIGlucHV0IHRleHQgaW4gdGhlIGZpbGwgYXBwZWFyYW5jZS5cbiAgJGZpbGwtYXBwZWFyYW5jZS1sYWJlbC1vZmZzZXQ6IC0wLjVlbTtcblxuICAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1maWxsIHtcbiAgICAubWF0LWZvcm0tZmllbGQtaW5maXgge1xuICAgICAgcGFkZGluZzogJGluZml4LXBhZGRpbmctdG9wIDAgJGluZml4LXBhZGRpbmctYm90dG9tIDA7XG4gICAgfVxuXG4gICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgIHRvcDogJGluZml4LW1hcmdpbi10b3AgKyAkaW5maXgtcGFkZGluZy10b3A7XG4gICAgICBtYXJnaW4tdG9wOiAkZmlsbC1hcHBlYXJhbmNlLWxhYmVsLW9mZnNldDtcbiAgICB9XG5cbiAgICAmLm1hdC1mb3JtLWZpZWxkLWNhbi1mbG9hdCB7XG4gICAgICAmLm1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCAubWF0LWZvcm0tZmllbGQtbGFiZWwsXG4gICAgICAubWF0LWlucHV0LXNlcnZlcjpmb2N1cyArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1maWxsLWxhYmVsLWZsb2F0aW5nKFxuICAgICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmctdG9wICsgJGZpbGwtYXBwZWFyYW5jZS1sYWJlbC1vZmZzZXQsXG4gICAgICAgICAgICAgICAgJGluZml4LW1hcmdpbi10b3ApO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXJ2ZXItc2lkZSByZW5kZXJlZCBtYXRJbnB1dCB3aXRoIGEgbGFiZWwgYXR0cmlidXRlIGJ1dCBsYWJlbCBub3Qgc2hvd25cbiAgICAgIC8vICh1c2VkIGFzIGEgcHVyZSBDU1Mgc3RhbmQtaW4gZm9yIG1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCkuXG4gICAgICAubWF0LWlucHV0LXNlcnZlcltsYWJlbF06bm90KDpsYWJlbC1zaG93bikgKyAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlclxuICAgICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWZpbGwtbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZy10b3AgKyAkZmlsbC1hcHBlYXJhbmNlLWxhYmVsLW9mZnNldCxcbiAgICAgICAgICAgICAgICAkaW5maXgtbWFyZ2luLXRvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LWZvcm0tZmllbGQtZmlsbC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1maWxsLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZm9ybS1maWVsZC1maWxsJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtZmlsbC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtZmlsbC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtZmlsbC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG4vLyBUaGVtZSBzdHlsZXMgdGhhdCBvbmx5IGFwcGx5IHRvIHRoZSBsZWdhY3kgYXBwZWFyYW5jZSBvZiB0aGUgZm9ybS1maWVsZC5cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGlzLWRhcmstdGhlbWU6IG1hcC1nZXQoJGNvbmZpZywgaXMtZGFyayk7XG5cbiAgJGxhYmVsLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgJHVuZGVybGluZS1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyLCBpZigkaXMtZGFyay10aGVtZSwgMC43LCAwLjQyKSk7XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2UtbGVnYWN5IHtcbiAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgY29sb3I6ICRsYWJlbC1jb2xvcjtcbiAgICB9XG5cbiAgICAubWF0LWhpbnQge1xuICAgICAgY29sb3I6ICRsYWJlbC1jb2xvcjtcbiAgICB9XG5cbiAgICAubWF0LWZvcm0tZmllbGQtdW5kZXJsaW5lIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR1bmRlcmxpbmUtY29sb3I7XG4gICAgfVxuXG4gICAgJi5tYXQtZm9ybS1maWVsZC1kaXNhYmxlZCAubWF0LWZvcm0tZmllbGQtdW5kZXJsaW5lIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1jb250cm9sLWRpc2FibGVkLXVuZGVybGluZSgkdW5kZXJsaW5lLWNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gVXNlZCB0byBtYWtlIGluc3RhbmNlcyBvZiB0aGUgX21hdC1mb3JtLWZpZWxkLWxhYmVsLWZsb2F0aW5nIG1peGluIG5lZ2xpZ2libHkgZGlmZmVyZW50LFxuLy8gYW5kIHByZXZlbnQgR29vZ2xlJ3MgQ1NTIE9wdGltaXplciBmcm9tIGNvbGxhcHNpbmcgdGhlIGRlY2xhcmF0aW9ucy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBzb21lXG4vLyBvZiB0aGUgc2VsZWN0b3JzIGNvbnRhaW4gcHNldWRvLWNsYXNzZXMgbm90IHJlY29nbml6ZWQgaW4gYWxsIGJyb3dzZXJzLiBJZiBhIGJyb3dzZXIgZW5jb3VudGVyc1xuLy8gYW4gdW5rbm93biBwc2V1ZG8tY2xhc3MgaXQgd2lsbCBkaXNjYXJkIHRoZSBlbnRpcmUgcnVsZSBzZXQuXG4kbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlZHVwZTogMDtcblxuLy8gQXBwbGllcyBhIGZsb2F0aW5nIGxhYmVsIGFib3ZlIHRoZSBmb3JtIGZpZWxkIGNvbnRyb2wgaXRzZWxmLlxuQG1peGluIF9tYXQtZm9ybS1maWVsZC1sZWdhY3ktbGFiZWwtZmxvYXRpbmcoJGZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCkge1xuICAvLyBXZSB1c2UgcGVyc3BlY3RpdmUgdG8gZml4IHRoZSB0ZXh0IGJsdXJyaW5lc3MgYXMgZGVzY3JpYmVkIGhlcmU6XG4gIC8vIGh0dHA6Ly93d3cudXNlcmFnZW50bWFuLmNvbS9ibG9nLzIwMTQvMDUvMDQvZml4aW5nLXR5cG9ncmFwaHktaW5zaWRlLW9mLTItZC1jc3MtdHJhbnNmb3Jtcy9cbiAgLy8gVGhpcyByZXN1bHRzIGluIGEgc21hbGwgaml0dGVyIGFmdGVyIHRoZSBsYWJlbCBmbG9hdHMgb24gRmlyZWZveCwgd2hpY2ggdGhlXG4gIC8vIHRyYW5zbGF0ZVogZml4ZXMuXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtJGluZml4LW1hcmdpbi10b3AgLSAkaW5maXgtcGFkZGluZykgc2NhbGUoJGZvbnQtc2NhbGUpIHBlcnNwZWN0aXZlKDEwMHB4KVxuICB0cmFuc2xhdGVaKDAuMDAxcHggKyAkbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlZHVwZSk7XG4gIC8vIFRoZSB0cmlja3MgYWJvdmUgdXNlZCB0byBzbW9vdGggb3V0IHRoZSBhbmltYXRpb24gb24gY2hyb21lIGFuZCBmaXJlZm94IGFjdHVhbGx5IG1ha2UgdGhpbmdzXG4gIC8vIHdvcnNlIG9uIElFLCBzbyB3ZSBkb24ndCBpbmNsdWRlIHRoZW0gaW4gdGhlIElFIHZlcnNpb24uXG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLSRpbmZpeC1tYXJnaW4tdG9wIC0gJGluZml4LXBhZGRpbmcgKyAkbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlZHVwZSlcbiAgICAgICAgICAgICAgICAgIHNjYWxlKCRmb250LXNjYWxlKTtcblxuICB3aWR0aDogMTAwJSAvICRmb250LXNjYWxlICsgJG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZWR1cGU7XG5cbiAgJG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZWR1cGU6ICRtYXQtZm9ybS1maWVsZC1sZWdhY3ktZGVkdXBlICsgMC4wMDAwMSAhZ2xvYmFsO1xufVxuXG4vLyBTYW1lIGFzIG1peGluIGFib3ZlLCBidXQgb21pdHMgdGhlIHRyYW5zbGF0ZVogZm9yIHByaW50aW5nIHB1cnBvc2VzLlxuQG1peGluIF9tYXQtZm9ybS1maWVsZC1sZWdhY3ktbGFiZWwtZmxvYXRpbmctcHJpbnQoJGZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCkge1xuICAvLyBUaGlzIHJlc3VsdHMgaW4gYSBzbWFsbCBqaXR0ZXIgYWZ0ZXIgdGhlIGxhYmVsIGZsb2F0cyBvbiBGaXJlZm94LCB3aGljaCB0aGVcbiAgLy8gdHJhbnNsYXRlWiBmaXhlcy5cbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0kaW5maXgtbWFyZ2luLXRvcCAtICRpbmZpeC1wYWRkaW5nICsgJG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZWR1cGUpXG4gICAgICAgICAgICAgICAgICBzY2FsZSgkZm9udC1zY2FsZSk7XG4gIC8vIFRoZSB0cmlja3MgYWJvdmUgdXNlZCB0byBzbW9vdGggb3V0IHRoZSBhbmltYXRpb24gb24gY2hyb21lIGFuZCBmaXJlZm94IGFjdHVhbGx5IG1ha2UgdGhpbmdzXG4gIC8vIHdvcnNlIG9uIElFLCBzbyB3ZSBkb24ndCBpbmNsdWRlIHRoZW0gaW4gdGhlIElFIHZlcnNpb24uXG4gICRtYXQtZm9ybS1maWVsZC1sZWdhY3ktZGVkdXBlOiAkbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlZHVwZSArIDAuMDAwMDEgIWdsb2JhbDtcbn1cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLy8gVGhlIHVuaXQtbGVzcyBsaW5lLWhlaWdodCBmcm9tIHRoZSBmb250IGNvbmZpZy5cbiAgJGxpbmUtaGVpZ2h0OiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgaW5wdXQpO1xuICAvLyBUaGUgYW1vdW50IHRvIHNjYWxlIHRoZSBmb250IGZvciB0aGUgZmxvYXRpbmcgbGFiZWwgYW5kIHN1YnNjcmlwdC5cbiAgJHN1YnNjcmlwdC1mb250LXNjYWxlOiAwLjc1O1xuICAvLyBUaGUgYW1vdW50IG9mIHNwYWNlIGJldHdlZW4gdGhlIHRvcCBvZiB0aGUgbGluZSBhbmQgdGhlIHRvcCBvZiB0aGUgYWN0dWFsIHRleHRcbiAgLy8gKGFzIGEgZnJhY3Rpb24gb2YgdGhlIGZvbnQtc2l6ZSkuXG4gICRsaW5lLXNwYWNpbmc6ICgkbGluZS1oZWlnaHQgLSAxKSAvIDI7XG4gIC8vIFRoZSBwYWRkaW5nIG9uIHRoZSBpbmZpeC4gTW9ja3Mgc2hvdyBoYWxmIG9mIHRoZSB0ZXh0IHNpemUsIGJ1dCBzZWVtIHRvIG1lYXN1cmUgZnJvbSB0aGUgZWRnZVxuICAvLyBvZiB0aGUgdGV4dCBpdHNlbGYsIG5vdCB0aGUgZWRnZSBvZiB0aGUgbGluZTsgdGhlcmVmb3JlIHdlIHN1YnRyYWN0IG9mZiB0aGUgbGluZSBzcGFjaW5nLlxuICAkaW5maXgtcGFkZGluZzogMC41ZW0gLSAkbGluZS1zcGFjaW5nO1xuICAvLyBUaGUgbWFyZ2luIGFwcGxpZWQgdG8gdGhlIGZvcm0tZmllbGQtaW5maXggdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgdGhlIGZsb2F0aW5nIGxhYmVsLlxuICAkaW5maXgtbWFyZ2luLXRvcDogMWVtICogJGxpbmUtaGVpZ2h0ICogJHN1YnNjcmlwdC1mb250LXNjYWxlO1xuICAvLyBUaGUgc3BhY2UgYmV0d2VlbiB0aGUgYm90dG9tIG9mIHRoZSAubWF0LWZvcm0tZmllbGQtZmxleCBhcmVhIGFuZCB0aGUgc3Vic2NyaXB0IHdyYXBwZXIuXG4gIC8vIE1vY2tzIHNob3cgaGFsZiBvZiB0aGUgdGV4dCBzaXplLCBidXQgdGhpcyBtYXJnaW4gaXMgYXBwbGllZCB0byBhbiBlbGVtZW50IHdpdGggdGhlIHN1YnNjcmlwdFxuICAvLyB0ZXh0IGZvbnQgc2l6ZSwgc28gd2UgbmVlZCB0byBkaXZpZGUgYnkgdGhlIHNjYWxlIGZhY3RvciB0byBtYWtlIGl0IGhhbGYgb2YgdGhlIG9yaWdpbmFsIHRleHRcbiAgLy8gc2l6ZS4gV2UgYWdhaW4gbmVlZCB0byBzdWJ0cmFjdCBvZmYgdGhlIGxpbmUgc3BhY2luZyBzaW5jZSB0aGUgbW9ja3MgbWVhc3VyZSB0byB0aGUgZWRnZSBvZiB0aGVcbiAgLy8gdGV4dCwgbm90IHRoZSAgZWRnZSBvZiB0aGUgbGluZS5cbiAgJHN1YnNjcmlwdC1tYXJnaW4tdG9wOiAwLjVlbSAvICRzdWJzY3JpcHQtZm9udC1zY2FsZSAtICgkbGluZS1zcGFjaW5nICogMik7XG4gIC8vIFRoZSBwYWRkaW5nIGFwcGxpZWQgdG8gdGhlIGZvcm0tZmllbGQtd3JhcHBlciB0byByZXNlcnZlIHNwYWNlIGZvciB0aGUgc3Vic2NyaXB0LCBzaW5jZSBpdCdzXG4gIC8vIGFic29sdXRlbHkgcG9zaXRpb25lZC4gVGhpcyBpcyBhIGNvbWJpbmF0aW9uIG9mIHRoZSBzdWJzY3JpcHQncyBtYXJnaW4gYW5kIGxpbmUtaGVpZ2h0LCBidXQgd2VcbiAgLy8gbmVlZCB0byBtdWx0aXBseSBieSB0aGUgc3Vic2NyaXB0IGZvbnQgc2NhbGUgZmFjdG9yIHNpbmNlIHRoZSB3cmFwcGVyIGhhcyBhIGxhcmdlciBmb250IHNpemUuXG4gICR3cmFwcGVyLXBhZGRpbmctYm90dG9tOiAoJHN1YnNjcmlwdC1tYXJnaW4tdG9wICsgJGxpbmUtaGVpZ2h0KSAqICRzdWJzY3JpcHQtZm9udC1zY2FsZTtcblxuICAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1sZWdhY3kge1xuICAgIC5tYXQtZm9ybS1maWVsZC13cmFwcGVyIHtcbiAgICAgIHBhZGRpbmctYm90dG9tOiAkd3JhcHBlci1wYWRkaW5nLWJvdHRvbTtcbiAgICB9XG5cbiAgICAubWF0LWZvcm0tZmllbGQtaW5maXgge1xuICAgICAgcGFkZGluZzogJGluZml4LXBhZGRpbmcgMDtcbiAgICB9XG5cbiAgICAmLm1hdC1mb3JtLWZpZWxkLWNhbi1mbG9hdCB7XG4gICAgICAmLm1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCAubWF0LWZvcm0tZmllbGQtbGFiZWwsXG4gICAgICAubWF0LWlucHV0LXNlcnZlcjpmb2N1cyArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1sZWdhY3ktbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZywgJGluZml4LW1hcmdpbi10b3ApO1xuICAgICAgfVxuXG4gICAgICAvLyBAYnJlYWtpbmctY2hhbmdlIDguMC4wIHdpbGwgcmVseSBvbiBBdXRvZmlsbE1vbml0b3IgaW5zdGVhZC5cbiAgICAgIC5tYXQtZm9ybS1maWVsZC1hdXRvZmlsbC1jb250cm9sOi13ZWJraXQtYXV0b2ZpbGwgKyAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlclxuICAgICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1sYWJlbC1mbG9hdGluZyhcbiAgICAgICAgICAgICAgICAkc3Vic2NyaXB0LWZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlcnZlci1zaWRlIHJlbmRlcmVkIG1hdElucHV0IHdpdGggYSBsYWJlbCBhdHRyaWJ1dGUgYnV0IGxhYmVsIG5vdCBzaG93blxuICAgICAgLy8gKHVzZWQgYXMgYSBwdXJlIENTUyBzdGFuZC1pbiBmb3IgbWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0KS5cbiAgICAgIC5tYXQtaW5wdXQtc2VydmVyW2xhYmVsXTpub3QoOmxhYmVsLXNob3duKSArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyXG4gICAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtbGVnYWN5LWxhYmVsLWZsb2F0aW5nKFxuICAgICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgdG9wOiAkaW5maXgtbWFyZ2luLXRvcCArICRpbmZpeC1wYWRkaW5nO1xuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmUge1xuICAgICAgLy8gV2Ugd2FudCB0aGUgdW5kZXJsaW5lIHRvIHN0YXJ0IGF0IHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQgYm94LCBub3QgdGhlIHBhZGRpbmcgYm94LFxuICAgICAgLy8gc28gd2UgbW92ZSBpdCB1cCBieSB0aGUgcGFkZGluZyBhbW91bnQuXG4gICAgICBib3R0b206ICR3cmFwcGVyLXBhZGRpbmctYm90dG9tO1xuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC1zdWJzY3JpcHQtd3JhcHBlciB7XG4gICAgICBtYXJnaW4tdG9wOiAkc3Vic2NyaXB0LW1hcmdpbi10b3A7XG5cbiAgICAgIC8vIFdlIHdhbnQgdGhlIHN1YnNjcmlwdCB0byBzdGFydCBhdCB0aGUgZW5kIG9mIHRoZSBjb250ZW50IGJveCwgbm90IHRoZSBwYWRkaW5nIGJveCxcbiAgICAgIC8vIHNvIHdlIG1vdmUgaXQgdXAgYnkgdGhlIHBhZGRpbmcgYW1vdW50IChhZGp1c3RlZCBmb3IgdGhlIHNtYWxsZXIgZm9udCBzaXplKTtcbiAgICAgIHRvcDogY2FsYygxMDAlIC0gI3skd3JhcHBlci1wYWRkaW5nLWJvdHRvbSAvICRzdWJzY3JpcHQtZm9udC1zY2FsZX0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRyYW5zbGF0ZVogY2F1c2VzIHRoZSBsYWJlbCB0byBub3QgYXBwZWFyIHdoaWxlIHByaW50aW5nLCBzbyB3ZSBvdmVycmlkZSBpdCB0byBub3RcbiAgLy8gYXBwbHkgdHJhbnNsYXRlWiB3aGlsZSBwcmludGluZ1xuICBAbWVkaWEgcHJpbnQge1xuICAgIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLWxlZ2FjeSB7XG4gICAgICAmLm1hdC1mb3JtLWZpZWxkLWNhbi1mbG9hdCB7XG4gICAgICAgICYubWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0IC5tYXQtZm9ybS1maWVsZC1sYWJlbCxcbiAgICAgICAgLm1hdC1pbnB1dC1zZXJ2ZXI6Zm9jdXMgKyAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlciAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1sZWdhY3ktbGFiZWwtZmxvYXRpbmctcHJpbnQoXG4gICAgICAgICAgICAgICAgICAkc3Vic2NyaXB0LWZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBAYnJlYWtpbmctY2hhbmdlIDguMC4wIHdpbGwgcmVseSBvbiBBdXRvZmlsbE1vbml0b3IgaW5zdGVhZC5cbiAgICAgICAgLm1hdC1mb3JtLWZpZWxkLWF1dG9maWxsLWNvbnRyb2w6LXdlYmtpdC1hdXRvZmlsbCArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyXG4gICAgICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1sYWJlbC1mbG9hdGluZy1wcmludChcbiAgICAgICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlcnZlci1zaWRlIHJlbmRlcmVkIG1hdElucHV0IHdpdGggYSBsYWJlbCBhdHRyaWJ1dGUgYnV0IGxhYmVsIG5vdCBzaG93blxuICAgICAgICAvLyAodXNlZCBhcyBhIHB1cmUgQ1NTIHN0YW5kLWluIGZvciBtYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQpLlxuICAgICAgICAubWF0LWlucHV0LXNlcnZlcltsYWJlbF06bm90KDpsYWJlbC1zaG93bikgKyAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlclxuICAgICAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1sZWdhY3ktbGFiZWwtZmxvYXRpbmctcHJpbnQoXG4gICAgICAgICAgICAgICAgICAkc3Vic2NyaXB0LWZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtZm9ybS1maWVsZC1sZWdhY3ktZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtbGVnYWN5LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZm9ybS1maWVsZC1sZWdhY3knKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1sZWdhY3ktY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtbGVnYWN5LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5cbi8vIFRoZW1lIHN0eWxlcyB0aGF0IG9ubHkgYXBwbHkgdG8gdGhlIG91dGxpbmUgYXBwZWFyYW5jZSBvZiB0aGUgZm9ybS1maWVsZC5cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLW91dGxpbmUtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcblxuICAkbGFiZWwtZGlzYWJsZWQtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG4gICRvdXRsaW5lLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjMsIDAuMTIpKTtcbiAgJG91dGxpbmUtY29sb3ItaG92ZXI6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlciwgaWYoJGlzLWRhcmstdGhlbWUsIDEsIDAuODcpKTtcbiAgJG91dGxpbmUtY29sb3ItcHJpbWFyeTogbWF0LWNvbG9yKCRwcmltYXJ5KTtcbiAgJG91dGxpbmUtY29sb3ItYWNjZW50OiBtYXQtY29sb3IoJGFjY2VudCk7XG4gICRvdXRsaW5lLWNvbG9yLXdhcm46IG1hdC1jb2xvcigkd2Fybik7XG4gICRvdXRsaW5lLWNvbG9yLWRpc2FibGVkOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjE1LCAwLjA2KSk7XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUge1xuICAgICAgY29sb3I6ICRvdXRsaW5lLWNvbG9yO1xuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC1vdXRsaW5lLXRoaWNrIHtcbiAgICAgIGNvbG9yOiAkb3V0bGluZS1jb2xvci1ob3ZlcjtcbiAgICB9XG5cbiAgICAmLm1hdC1mb2N1c2VkIHtcbiAgICAgIC5tYXQtZm9ybS1maWVsZC1vdXRsaW5lLXRoaWNrIHtcbiAgICAgICAgY29sb3I6ICRvdXRsaW5lLWNvbG9yLXByaW1hcnk7XG4gICAgICB9XG5cbiAgICAgICYubWF0LWFjY2VudCAubWF0LWZvcm0tZmllbGQtb3V0bGluZS10aGljayB7XG4gICAgICAgIGNvbG9yOiAkb3V0bGluZS1jb2xvci1hY2NlbnQ7XG4gICAgICB9XG5cbiAgICAgICYubWF0LXdhcm4gLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUtdGhpY2sge1xuICAgICAgICBjb2xvcjogJG91dGxpbmUtY29sb3Itd2FybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDbGFzcyByZXBlYXRlZCBzbyB0aGF0IHJ1bGUgaXMgc3BlY2lmaWMgZW5vdWdoIHRvIG92ZXJyaWRlIGZvY3VzZWQgYWNjZW50IGNvbG9yIGNhc2UuXG4gICAgJi5tYXQtZm9ybS1maWVsZC1pbnZhbGlkLm1hdC1mb3JtLWZpZWxkLWludmFsaWQge1xuICAgICAgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUtdGhpY2sge1xuICAgICAgICBjb2xvcjogJG91dGxpbmUtY29sb3Itd2FybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1hdC1mb3JtLWZpZWxkLWRpc2FibGVkIHtcbiAgICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgIGNvbG9yOiAkbGFiZWwtZGlzYWJsZWQtY29sb3I7XG4gICAgICB9XG5cbiAgICAgIC5tYXQtZm9ybS1maWVsZC1vdXRsaW5lIHtcbiAgICAgICAgY29sb3I6ICRvdXRsaW5lLWNvbG9yLWRpc2FibGVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBVc2VkIHRvIG1ha2UgaW5zdGFuY2VzIG9mIHRoZSBfbWF0LWZvcm0tZmllbGQtbGFiZWwtZmxvYXRpbmcgbWl4aW4gbmVnbGlnaWJseSBkaWZmZXJlbnQsXG4vLyBhbmQgcHJldmVudCBHb29nbGUncyBDU1MgT3B0aW1pemVyIGZyb20gY29sbGFwc2luZyB0aGUgZGVjbGFyYXRpb25zLiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHNvbWVcbi8vIG9mIHRoZSBzZWxlY3RvcnMgY29udGFpbiBwc2V1ZG8tY2xhc3NlcyBub3QgcmVjb2duaXplZCBpbiBhbGwgYnJvd3NlcnMuIElmIGEgYnJvd3NlciBlbmNvdW50ZXJzXG4vLyBhbiB1bmtub3duIHBzZXVkby1jbGFzcyBpdCB3aWxsIGRpc2NhcmQgdGhlIGVudGlyZSBydWxlIHNldC5cbiRtYXQtZm9ybS1maWVsZC1vdXRsaW5lLWRlZHVwZTogMDtcblxuLy8gQXBwbGllcyBhIGZsb2F0aW5nIGxhYmVsIGFib3ZlIHRoZSBmb3JtIGZpZWxkIGNvbnRyb2wgaXRzZWxmLlxuQG1peGluIF9tYXQtZm9ybS1maWVsZC1vdXRsaW5lLWxhYmVsLWZsb2F0aW5nKCRmb250LXNjYWxlLCAkaW5maXgtcGFkZGluZywgJGluZml4LW1hcmdpbi10b3ApIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0kaW5maXgtbWFyZ2luLXRvcCAtICRpbmZpeC1wYWRkaW5nICsgJG1hdC1mb3JtLWZpZWxkLW91dGxpbmUtZGVkdXBlKVxuICBzY2FsZSgkZm9udC1zY2FsZSk7XG4gIHdpZHRoOiAxMDAlIC8gJGZvbnQtc2NhbGUgKyAkbWF0LWZvcm0tZmllbGQtb3V0bGluZS1kZWR1cGU7XG5cbiAgJG1hdC1mb3JtLWZpZWxkLW91dGxpbmUtZGVkdXBlOiAkbWF0LWZvcm0tZmllbGQtb3V0bGluZS1kZWR1cGUgKyAwLjAwMDAxICFnbG9iYWw7XG59XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1vdXRsaW5lLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAvLyBUaGUgdW5pdC1sZXNzIGxpbmUtaGVpZ2h0IGZyb20gdGhlIGZvbnQgY29uZmlnLlxuICAkbGluZS1oZWlnaHQ6IG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBpbnB1dCk7XG4gIC8vIFRoZSBhbW91bnQgdG8gc2NhbGUgdGhlIGZvbnQgZm9yIHRoZSBmbG9hdGluZyBsYWJlbCBhbmQgc3Vic2NyaXB0LlxuICAkc3Vic2NyaXB0LWZvbnQtc2NhbGU6IDAuNzU7XG4gIC8vIFRoZSBwYWRkaW5nIGFib3ZlIGFuZCBiZWxvdyB0aGUgaW5maXguXG4gICRpbmZpeC1wYWRkaW5nOiAxZW07XG4gIC8vIFRoZSBtYXJnaW4gYXBwbGllZCB0byB0aGUgZm9ybS1maWVsZC1pbmZpeCB0byByZXNlcnZlIHNwYWNlIGZvciB0aGUgZmxvYXRpbmcgbGFiZWwuXG4gICRpbmZpeC1tYXJnaW4tdG9wOiAxZW0gKiAkbGluZS1oZWlnaHQgKiAkc3Vic2NyaXB0LWZvbnQtc2NhbGU7XG4gIC8vIFRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBib3R0b20gb2YgdGhlIC5tYXQtZm9ybS1maWVsZC1mbGV4IGFyZWEgYW5kIHRoZSBzdWJzY3JpcHQgd3JhcHBlci5cbiAgLy8gTW9ja3Mgc2hvdyBoYWxmIG9mIHRoZSB0ZXh0IHNpemUsIGJ1dCB0aGlzIG1hcmdpbiBpcyBhcHBsaWVkIHRvIGFuIGVsZW1lbnQgd2l0aCB0aGUgc3Vic2NyaXB0XG4gIC8vIHRleHQgZm9udCBzaXplLCBzbyB3ZSBuZWVkIHRvIGRpdmlkZSBieSB0aGUgc2NhbGUgZmFjdG9yIHRvIG1ha2UgaXQgaGFsZiBvZiB0aGUgb3JpZ2luYWwgdGV4dFxuICAvLyBzaXplLlxuICAkc3Vic2NyaXB0LW1hcmdpbi10b3A6IDAuNWVtIC8gJHN1YnNjcmlwdC1mb250LXNjYWxlO1xuICAvLyBUaGUgcGFkZGluZyBhcHBsaWVkIHRvIHRoZSBmb3JtLWZpZWxkLXdyYXBwZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgdGhlIHN1YnNjcmlwdCwgc2luY2UgaXQnc1xuICAvLyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQuIFRoaXMgaXMgYSBjb21iaW5hdGlvbiBvZiB0aGUgc3Vic2NyaXB0J3MgbWFyZ2luIGFuZCBsaW5lLWhlaWdodCwgYnV0IHdlXG4gIC8vIG5lZWQgdG8gbXVsdGlwbHkgYnkgdGhlIHN1YnNjcmlwdCBmb250IHNjYWxlIGZhY3RvciBzaW5jZSB0aGUgd3JhcHBlciBoYXMgYSBsYXJnZXIgZm9udCBzaXplLlxuICAkd3JhcHBlci1wYWRkaW5nLWJvdHRvbTogKCRzdWJzY3JpcHQtbWFyZ2luLXRvcCArICRsaW5lLWhlaWdodCkgKiAkc3Vic2NyaXB0LWZvbnQtc2NhbGU7XG4gIC8vIFRoZSBhbW91bnQgd2Ugb2Zmc2V0IHRoZSBsYWJlbCBmcm9tIHRoZSBpbnB1dCB0ZXh0IGluIHRoZSBvdXRsaW5lIGFwcGVhcmFuY2UuXG4gICRvdXRsaW5lLWFwcGVhcmFuY2UtbGFiZWwtb2Zmc2V0OiAtMC4yNWVtO1xuXG4gIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUge1xuICAgIC5tYXQtZm9ybS1maWVsZC1pbmZpeCB7XG4gICAgICBwYWRkaW5nOiAkaW5maXgtcGFkZGluZyAwICRpbmZpeC1wYWRkaW5nIDA7XG4gICAgfVxuXG4gICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgIHRvcDogJGluZml4LW1hcmdpbi10b3AgKyAkaW5maXgtcGFkZGluZztcbiAgICAgIG1hcmdpbi10b3A6ICRvdXRsaW5lLWFwcGVhcmFuY2UtbGFiZWwtb2Zmc2V0O1xuICAgIH1cblxuICAgICYubWF0LWZvcm0tZmllbGQtY2FuLWZsb2F0IHtcbiAgICAgICYubWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0IC5tYXQtZm9ybS1maWVsZC1sYWJlbCxcbiAgICAgIC5tYXQtaW5wdXQtc2VydmVyOmZvY3VzICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXIgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLW91dGxpbmUtbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZyArICRvdXRsaW5lLWFwcGVhcmFuY2UtbGFiZWwtb2Zmc2V0LFxuICAgICAgICAgICAgICAgICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VydmVyLXNpZGUgcmVuZGVyZWQgbWF0SW5wdXQgd2l0aCBhIGxhYmVsIGF0dHJpYnV0ZSBidXQgbGFiZWwgbm90IHNob3duXG4gICAgICAvLyAodXNlZCBhcyBhIHB1cmUgQ1NTIHN0YW5kLWluIGZvciBtYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQpLlxuICAgICAgLm1hdC1pbnB1dC1zZXJ2ZXJbbGFiZWxdOm5vdCg6bGFiZWwtc2hvd24pICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXJcbiAgICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1vdXRsaW5lLWxhYmVsLWZsb2F0aW5nKFxuICAgICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcgKyAkb3V0bGluZS1hcHBlYXJhbmNlLWxhYmVsLW9mZnNldCxcbiAgICAgICAgICAgICAgICAkaW5maXgtbWFyZ2luLXRvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LWZvcm0tZmllbGQtb3V0bGluZS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1vdXRsaW5lLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZm9ybS1maWVsZC1vdXRsaW5lJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtb3V0bGluZS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtb3V0bGluZS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtb3V0bGluZS10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG5cbi8vIFRoZW1lIHN0eWxlcyB0aGF0IG9ubHkgYXBwbHkgdG8gdGhlIHN0YW5kYXJkIGFwcGVhcmFuY2Ugb2YgdGhlIGZvcm0tZmllbGQuXG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1zdGFuZGFyZC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGlzLWRhcmstdGhlbWU6IG1hcC1nZXQoJGNvbmZpZywgaXMtZGFyayk7XG5cbiAgJHVuZGVybGluZS1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyLCBpZigkaXMtZGFyay10aGVtZSwgMC43LCAwLjQyKSk7XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utc3RhbmRhcmQge1xuICAgIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHVuZGVybGluZS1jb2xvcjtcbiAgICB9XG5cbiAgICAmLm1hdC1mb3JtLWZpZWxkLWRpc2FibGVkIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmUge1xuICAgICAgQGluY2x1ZGUgbWF0LWNvbnRyb2wtZGlzYWJsZWQtdW5kZXJsaW5lKCR1bmRlcmxpbmUtY29sb3IpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtc3RhbmRhcmQtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZm9ybS1maWVsZC1zdGFuZGFyZCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1zdGFuZGFyZC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtc3RhbmRhcmQtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gQ29sb3Igc3R5bGVzIHRoYXQgYXBwbHkgdG8gYWxsIGFwcGVhcmFuY2VzIG9mIHRoZSBmb3JtLWZpZWxkLlxuQG1peGluIG1hdC1mb3JtLWZpZWxkLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRpcy1kYXJrLXRoZW1lOiBtYXAtZ2V0KCRjb25maWcsIGlzLWRhcmspO1xuXG4gIC8vIExhYmVsIGNvbG9ycy4gUmVxdWlyZWQgaXMgdXNlZCBmb3IgdGhlIGAqYCBzdGFyIHNob3duIGluIHRoZSBsYWJlbC5cbiAgJGxhYmVsLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0LCBpZigkaXMtZGFyay10aGVtZSwgMC43LCAwLjYpKTtcbiAgJGZvY3VzZWQtbGFiZWwtY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSwgdGV4dCk7XG4gICRyZXF1aXJlZC1sYWJlbC1jb2xvcjogbWF0LWNvbG9yKCRhY2NlbnQsIHRleHQpO1xuXG4gIC8vIFVuZGVybGluZSBjb2xvcnMuXG4gICR1bmRlcmxpbmUtY29sb3ItYmFzZTogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyLCBpZigkaXMtZGFyay10aGVtZSwgMSwgMC44NykpO1xuICAkdW5kZXJsaW5lLWNvbG9yLWFjY2VudDogbWF0LWNvbG9yKCRhY2NlbnQsIHRleHQpO1xuICAkdW5kZXJsaW5lLWNvbG9yLXdhcm46IG1hdC1jb2xvcigkd2FybiwgdGV4dCk7XG4gICR1bmRlcmxpbmUtZm9jdXNlZC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCB0ZXh0KTtcblxuICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgIGNvbG9yOiAkbGFiZWwtY29sb3I7XG4gIH1cblxuICAubWF0LWhpbnQge1xuICAgIGNvbG9yOiAkbGFiZWwtY29sb3I7XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQubWF0LWZvY3VzZWQgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICBjb2xvcjogJGZvY3VzZWQtbGFiZWwtY29sb3I7XG5cbiAgICAmLm1hdC1hY2NlbnQge1xuICAgICAgY29sb3I6ICR1bmRlcmxpbmUtY29sb3ItYWNjZW50O1xuICAgIH1cblxuICAgICYubWF0LXdhcm4ge1xuICAgICAgY29sb3I6ICR1bmRlcmxpbmUtY29sb3Itd2FybjtcbiAgICB9XG4gIH1cblxuICAubWF0LWZvY3VzZWQgLm1hdC1mb3JtLWZpZWxkLXJlcXVpcmVkLW1hcmtlciB7XG4gICAgY29sb3I6ICRyZXF1aXJlZC1sYWJlbC1jb2xvcjtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC1yaXBwbGUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR1bmRlcmxpbmUtY29sb3ItYmFzZTtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC5tYXQtZm9jdXNlZCB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLXJpcHBsZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdW5kZXJsaW5lLWZvY3VzZWQtY29sb3I7XG5cbiAgICAgICYubWF0LWFjY2VudCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR1bmRlcmxpbmUtY29sb3ItYWNjZW50O1xuICAgICAgfVxuXG4gICAgICAmLm1hdC13YXJuIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHVuZGVybGluZS1jb2xvci13YXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC10eXBlLW1hdC1uYXRpdmUtc2VsZWN0Lm1hdC1mb2N1c2VkOm5vdCgubWF0LWZvcm0tZmllbGQtaW52YWxpZCkge1xuICAgIC5tYXQtZm9ybS1maWVsZC1pbmZpeDo6YWZ0ZXIge1xuICAgICAgY29sb3I6ICR1bmRlcmxpbmUtZm9jdXNlZC1jb2xvcjtcbiAgICB9XG5cbiAgICAmLm1hdC1hY2NlbnQgLm1hdC1mb3JtLWZpZWxkLWluZml4OjphZnRlciB7XG4gICAgICBjb2xvcjogJHVuZGVybGluZS1jb2xvci1hY2NlbnQ7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiAubWF0LWZvcm0tZmllbGQtaW5maXg6OmFmdGVyIHtcbiAgICAgIGNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yLXdhcm47XG4gICAgfVxuICB9XG5cbiAgLy8gU3R5bGluZyBmb3IgdGhlIGVycm9yIHN0YXRlIG9mIHRoZSBmb3JtIGZpZWxkLiBOb3RlIHRoYXQgd2hpbGUgdGhlIHNhbWUgY2FuIGJlXG4gIC8vIGFjaGlldmVkIHdpdGggdGhlIG5nLSogY2xhc3Nlcywgd2UgdXNlIHRoaXMgYXBwcm9hY2ggaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgdGhlIHNhbWVcbiAgLy8gbG9naWMgaXMgdXNlZCB0byBzdHlsZSB0aGUgZXJyb3Igc3RhdGUgYW5kIHRvIHNob3cgdGhlIGVycm9yIG1lc3NhZ2VzLlxuICAubWF0LWZvcm0tZmllbGQubWF0LWZvcm0tZmllbGQtaW52YWxpZCB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgIGNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yLXdhcm47XG5cbiAgICAgICYubWF0LWFjY2VudCxcbiAgICAgIC5tYXQtZm9ybS1maWVsZC1yZXF1aXJlZC1tYXJrZXIge1xuICAgICAgICBjb2xvcjogJHVuZGVybGluZS1jb2xvci13YXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC1yaXBwbGUsXG4gICAgLm1hdC1mb3JtLWZpZWxkLXJpcHBsZS5tYXQtYWNjZW50IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR1bmRlcmxpbmUtY29sb3Itd2FybjtcbiAgICB9XG4gIH1cblxuICAubWF0LWVycm9yIHtcbiAgICBjb2xvcjogJHVuZGVybGluZS1jb2xvci13YXJuO1xuICB9XG5cbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtbGVnYWN5LWNvbG9yKCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1zdGFuZGFyZC1jb2xvcigkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtZmlsbC1jb2xvcigkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtb3V0bGluZS1jb2xvcigkY29uZmlnKTtcbn1cblxuLy8gVXNlZCB0byBtYWtlIGluc3RhbmNlcyBvZiB0aGUgX21hdC1mb3JtLWZpZWxkLWxhYmVsLWZsb2F0aW5nIG1peGluIG5lZ2xpZ2libHkgZGlmZmVyZW50LFxuLy8gYW5kIHByZXZlbnQgR29vZ2xlJ3MgQ1NTIE9wdGltaXplciBmcm9tIGNvbGxhcHNpbmcgdGhlIGRlY2xhcmF0aW9ucy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBzb21lXG4vLyBvZiB0aGUgc2VsZWN0b3JzIGNvbnRhaW4gcHNldWRvLWNsYXNzZXMgbm90IHJlY29nbml6ZWQgaW4gYWxsIGJyb3dzZXJzLiBJZiBhIGJyb3dzZXIgZW5jb3VudGVyc1xuLy8gYW4gdW5rbm93biBwc2V1ZG8tY2xhc3MgaXQgd2lsbCBkaXNjYXJkIHRoZSBlbnRpcmUgcnVsZSBzZXQuXG4kbWF0LWZvcm0tZmllbGQtZGVkdXBlOiAwO1xuXG4vLyBBcHBsaWVzIGEgZmxvYXRpbmcgbGFiZWwgYWJvdmUgdGhlIGZvcm0gZmllbGQgY29udHJvbCBpdHNlbGYuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLWxhYmVsLWZsb2F0aW5nKCRmb250LXNjYWxlLCAkaW5maXgtcGFkZGluZywgJGluZml4LW1hcmdpbi10b3ApIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0kaW5maXgtbWFyZ2luLXRvcCAtICRpbmZpeC1wYWRkaW5nICsgJG1hdC1mb3JtLWZpZWxkLWRlZHVwZSlcbiAgICAgICAgICAgICBzY2FsZSgkZm9udC1zY2FsZSk7XG4gIHdpZHRoOiAxMDAlIC8gJGZvbnQtc2NhbGUgKyAkbWF0LWZvcm0tZmllbGQtZGVkdXBlO1xuXG4gICRtYXQtZm9ybS1maWVsZC1kZWR1cGU6ICRtYXQtZm9ybS1maWVsZC1kZWR1cGUgKyAwLjAwMDAxICFnbG9iYWw7XG59XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLy8gVGhlIHVuaXQtbGVzcyBsaW5lLWhlaWdodCBmcm9tIHRoZSBmb250IGNvbmZpZy5cbiAgJGxpbmUtaGVpZ2h0OiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgaW5wdXQpO1xuXG4gIC8vIFRoZSBhbW91bnQgdG8gc2NhbGUgdGhlIGZvbnQgZm9yIHRoZSBmbG9hdGluZyBsYWJlbCBhbmQgc3Vic2NyaXB0LlxuICAkc3Vic2NyaXB0LWZvbnQtc2NhbGU6IDAuNzU7XG4gIC8vIFRoZSBhbW91bnQgdG8gc2NhbGUgdGhlIGZvbnQgZm9yIHRoZSBwcmVmaXggYW5kIHN1ZmZpeCBpY29ucy5cbiAgJHByZWZpeC1zdWZmaXgtaWNvbi1mb250LXNjYWxlOiAxLjU7XG5cbiAgLy8gVGhlIHBhZGRpbmcgb24gdGhlIGluZml4LiBNb2NrcyBzaG93IGhhbGYgb2YgdGhlIHRleHQgc2l6ZS5cbiAgJGluZml4LXBhZGRpbmc6IDAuNWVtO1xuICAvLyBUaGUgbWFyZ2luIGFwcGxpZWQgdG8gdGhlIGZvcm0tZmllbGQtaW5maXggdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgdGhlIGZsb2F0aW5nIGxhYmVsLlxuICAkaW5maXgtbWFyZ2luLXRvcDogMWVtICogJGxpbmUtaGVpZ2h0ICogJHN1YnNjcmlwdC1mb250LXNjYWxlO1xuICAvLyBGb250IHNpemUgdG8gdXNlIGZvciB0aGUgbGFiZWwgYW5kIHN1YnNjcmlwdCB0ZXh0LlxuICAkc3Vic2NyaXB0LWZvbnQtc2l6ZTogJHN1YnNjcmlwdC1mb250LXNjYWxlICogMTAwJTtcbiAgLy8gRm9udCBzaXplIHRvIHVzZSBmb3IgdGhlIGZvciB0aGUgcHJlZml4IGFuZCBzdWZmaXggaWNvbnMuXG4gICRwcmVmaXgtc3VmZml4LWljb24tZm9udC1zaXplOiAkcHJlZml4LXN1ZmZpeC1pY29uLWZvbnQtc2NhbGUgKiAxMDAlO1xuICAvLyBUaGUgc3BhY2UgYmV0d2VlbiB0aGUgYm90dG9tIG9mIHRoZSAubWF0LWZvcm0tZmllbGQtZmxleCBhcmVhIGFuZCB0aGUgc3Vic2NyaXB0IHdyYXBwZXIuXG4gIC8vIE1vY2tzIHNob3cgaGFsZiBvZiB0aGUgdGV4dCBzaXplLCBidXQgdGhpcyBtYXJnaW4gaXMgYXBwbGllZCB0byBhbiBlbGVtZW50IHdpdGggdGhlIHN1YnNjcmlwdFxuICAvLyB0ZXh0IGZvbnQgc2l6ZSwgc28gd2UgbmVlZCB0byBkaXZpZGUgYnkgdGhlIHNjYWxlIGZhY3RvciB0byBtYWtlIGl0IGhhbGYgb2YgdGhlIG9yaWdpbmFsIHRleHRcbiAgLy8gc2l6ZS5cbiAgJHN1YnNjcmlwdC1tYXJnaW4tdG9wOiAwLjVlbSAvICRzdWJzY3JpcHQtZm9udC1zY2FsZTtcbiAgLy8gVGhlIHBhZGRpbmcgYXBwbGllZCB0byB0aGUgZm9ybS1maWVsZC13cmFwcGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIHRoZSBzdWJzY3JpcHQsIHNpbmNlIGl0J3NcbiAgLy8gYWJzb2x1dGVseSBwb3NpdGlvbmVkLiBUaGlzIGlzIGEgY29tYmluYXRpb24gb2YgdGhlIHN1YnNjcmlwdCdzIG1hcmdpbiBhbmQgbGluZS1oZWlnaHQsIGJ1dCB3ZVxuICAvLyBuZWVkIHRvIG11bHRpcGx5IGJ5IHRoZSBzdWJzY3JpcHQgZm9udCBzY2FsZSBmYWN0b3Igc2luY2UgdGhlIHdyYXBwZXIgaGFzIGEgbGFyZ2VyIGZvbnQgc2l6ZS5cbiAgJHdyYXBwZXItcGFkZGluZy1ib3R0b206ICgkc3Vic2NyaXB0LW1hcmdpbi10b3AgKyAkbGluZS1oZWlnaHQpICogJHN1YnNjcmlwdC1mb250LXNjYWxlO1xuXG4gIC5tYXQtZm9ybS1maWVsZCB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGlucHV0KTtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC13cmFwcGVyIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogJHdyYXBwZXItcGFkZGluZy1ib3R0b207XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQtcHJlZml4LFxuICAubWF0LWZvcm0tZmllbGQtc3VmZml4IHtcbiAgICAvLyBBbGxvdyBpY29ucyBpbiBhIHByZWZpeCBvciBzdWZmaXggdG8gYWRhcHQgdG8gdGhlIGNvcnJlY3Qgc2l6ZS5cbiAgICAubWF0LWljb24ge1xuICAgICAgZm9udC1zaXplOiAkcHJlZml4LXN1ZmZpeC1pY29uLWZvbnQtc2l6ZTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gQWxsb3cgaWNvbiBidXR0b25zIGluIGEgcHJlZml4IG9yIHN1ZmZpeCB0byBhZGFwdCB0byB0aGUgY29ycmVjdCBzaXplLlxuICAgIC5tYXQtaWNvbi1idXR0b24ge1xuICAgICAgaGVpZ2h0OiAkcHJlZml4LXN1ZmZpeC1pY29uLWZvbnQtc2NhbGUgKiAxZW07XG4gICAgICB3aWR0aDogJHByZWZpeC1zdWZmaXgtaWNvbi1mb250LXNjYWxlICogMWVtO1xuXG4gICAgICAubWF0LWljb24ge1xuICAgICAgICBoZWlnaHQ6ICRsaW5lLWhlaWdodCAqIDFlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQtaW5maXgge1xuICAgIHBhZGRpbmc6ICRpbmZpeC1wYWRkaW5nIDA7XG4gICAgLy8gVGhyb3dzIG9mZiB0aGUgYmFzZWxpbmUgaWYgd2UgZG8gaXQgYXMgYSByZWFsIG1hcmdpbiwgc28gd2UgZG8gaXQgYXMgYSBib3JkZXIgaW5zdGVhZC5cbiAgICBib3JkZXItdG9wOiAkaW5maXgtbWFyZ2luLXRvcCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC1jYW4tZmxvYXQge1xuICAgICYubWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0IC5tYXQtZm9ybS1maWVsZC1sYWJlbCxcbiAgICAubWF0LWlucHV0LXNlcnZlcjpmb2N1cyArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICB9XG5cbiAgICAvLyBTZXJ2ZXItc2lkZSByZW5kZXJlZCBtYXRJbnB1dCB3aXRoIGEgbGFiZWwgYXR0cmlidXRlIGJ1dCBsYWJlbCBub3Qgc2hvd25cbiAgICAvLyAodXNlZCBhcyBhIHB1cmUgQ1NTIHN0YW5kLWluIGZvciBtYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQpLlxuICAgIC5tYXQtaW5wdXQtc2VydmVyW2xhYmVsXTpub3QoOmxhYmVsLXNob3duKSArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyXG4gICAgICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlciB7XG4gICAgdG9wOiAtJGluZml4LW1hcmdpbi10b3A7XG4gICAgcGFkZGluZy10b3A6ICRpbmZpeC1tYXJnaW4tdG9wO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICB0b3A6ICRpbmZpeC1tYXJnaW4tdG9wICsgJGluZml4LXBhZGRpbmc7XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQtdW5kZXJsaW5lIHtcbiAgICAvLyBXZSB3YW50IHRoZSB1bmRlcmxpbmUgdG8gc3RhcnQgYXQgdGhlIGVuZCBvZiB0aGUgY29udGVudCBib3gsIG5vdCB0aGUgcGFkZGluZyBib3gsXG4gICAgLy8gc28gd2UgbW92ZSBpdCB1cCBieSB0aGUgcGFkZGluZyBhbW91bnQuXG4gICAgYm90dG9tOiAkd3JhcHBlci1wYWRkaW5nLWJvdHRvbTtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC1zdWJzY3JpcHQtd3JhcHBlciB7XG4gICAgZm9udC1zaXplOiAkc3Vic2NyaXB0LWZvbnQtc2l6ZTtcbiAgICBtYXJnaW4tdG9wOiAkc3Vic2NyaXB0LW1hcmdpbi10b3A7XG5cbiAgICAvLyBXZSB3YW50IHRoZSBzdWJzY3JpcHQgdG8gc3RhcnQgYXQgdGhlIGVuZCBvZiB0aGUgY29udGVudCBib3gsIG5vdCB0aGUgcGFkZGluZyBib3gsXG4gICAgLy8gc28gd2UgbW92ZSBpdCB1cCBieSB0aGUgcGFkZGluZyBhbW91bnQgKGFkanVzdGVkIGZvciB0aGUgc21hbGxlciBmb250IHNpemUpO1xuICAgIHRvcDogY2FsYygxMDAlIC0gI3skd3JhcHBlci1wYWRkaW5nLWJvdHRvbSAvICRzdWJzY3JpcHQtZm9udC1zY2FsZX0pO1xuICB9XG5cbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtbGVnYWN5LXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLWZpbGwtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtb3V0bGluZS10eXBvZ3JhcGh5KCRjb25maWcpO1xufVxuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkZGVuc2l0eS1zY2FsZTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZW5zaXR5KCRkZW5zaXR5LXNjYWxlKTtcbiAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLWRlbnNpdHkoJGRlbnNpdHktc2NhbGUpO1xuICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtZmlsbC1kZW5zaXR5KCRkZW5zaXR5LXNjYWxlKTtcbiAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLW91dGxpbmUtZGVuc2l0eSgkZGVuc2l0eS1zY2FsZSk7XG59XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWZvcm0tZmllbGQnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuJG1hdC10cmVlLW5vZGUtaGVpZ2h0OiA0OHB4ICFkZWZhdWx0O1xuLy8gTWluaW11bSBoZWlnaHQgZm9yIHRyZWUgbm9kZXMgaW4gaGlnaGVzdCBkZW5zaXR5IGlzIGRpZmZpY3VsdCB0byBkZXRlcm1pbmUgYXNcbi8vIGRldmVsb3BlcnMgY2FuIGRpc3BsYXkgYXJiaXRyYXJ5IGNvbnRlbnQuIFdlIHVzZSBhIG1pbmltdW0gaGVpZ2h0IHdoaWNoIGVuc3VyZXNcbi8vIHRoYXQgY29tbW9uIGNvbnRlbnQgcGxhY2VkIGluIHRyZWUgbm9kZXMgZG9lcyBub3QgZXhjZWVkIChlLmcuIGljb25zLCBjaGVja2JveGVzKS5cbiRtYXQtdHJlZS1ub2RlLW1pbmltdW0taGVpZ2h0OiAyNHB4ICFkZWZhdWx0O1xuJG1hdC10cmVlLW5vZGUtbWF4aW11bS1oZWlnaHQ6ICRtYXQtdHJlZS1ub2RlLWhlaWdodCAhZGVmYXVsdDtcblxuJG1hdC10cmVlLWRlbnNpdHktY29uZmlnOiAoXG4gIGhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRtYXQtdHJlZS1ub2RlLWhlaWdodCxcbiAgICBtYXhpbXVtOiAkbWF0LXRyZWUtbm9kZS1tYXhpbXVtLWhlaWdodCxcbiAgICBtaW5pbXVtOiAkbWF0LXRyZWUtbm9kZS1taW5pbXVtLWhlaWdodCxcbiAgKVxuKSAhZGVmYXVsdDtcblxuXG5AbWl4aW4gbWF0LXRyZWUtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtdHJlZSB7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCAnY2FyZCcpO1xuICB9XG5cbiAgLm1hdC10cmVlLW5vZGUsXG4gIC5tYXQtbmVzdGVkLXRyZWUtbm9kZSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC10cmVlLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LXRyZWUge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LXRyZWUtbm9kZSxcbiAgLm1hdC1uZXN0ZWQtdHJlZS1ub2RlIHtcbiAgICBmb250LXdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMSk7XG4gICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSk7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtdHJlZS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGRlbnNpdHktc2NhbGU6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRoZWlnaHQ6IF9tYXQtZGVuc2l0eS1wcm9wLXZhbHVlKCRtYXQtdHJlZS1kZW5zaXR5LWNvbmZpZywgJGRlbnNpdHktc2NhbGUsIGhlaWdodCk7XG5cbiAgQGluY2x1ZGUgX21hdC1kZW5zaXR5LWxlZ2FjeS1jb21wYXRpYmlsaXR5KCkge1xuICAgIC5tYXQtdHJlZS1ub2RlIHtcbiAgICAgIG1pbi1oZWlnaHQ6ICRoZWlnaHQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtdHJlZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXRyZWUnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtdHJlZS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRyZWUtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC10cmVlLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG4vLyBJbmNsdWRlcyBhbGwgb2YgdGhlIHR5cG9ncmFwaGljIHN0eWxlcy5cbkBtaXhpbiBhbmd1bGFyLW1hdGVyaWFsLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZTogbnVsbCkge1xuICAkY29uZmlnOiBpZihfbWF0LWlzLXRoZW1lLW9iamVjdCgkY29uZmlnLW9yLXRoZW1lKSxcbiAgICAgIG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSksICRjb25maWctb3ItdGhlbWUpO1xuXG4gIC8vIElmIG5vIGFjdHVhbCBjb2xvciBjb25maWd1cmF0aW9uIGhhcyBiZWVuIHNwZWNpZmllZCwgY3JlYXRlIGEgZGVmYXVsdCBvbmUuXG4gIEBpZiBub3QgJGNvbmZpZyB7XG4gICAgJGNvbmZpZzogbWF0LXR5cG9ncmFwaHktY29uZmlnKCk7XG4gIH1cblxuICAvLyBUT0RPOiBDT01QLTMwOTogRG8gbm90IHVzZSBpbmRpdmlkdWFsIG1peGlucy4gSW5zdGVhZCwgdXNlIHRoZSBhbGwtdGhlbWUgbWl4aW4gYW5kIG9ubHlcbiAgLy8gc3BlY2lmeSBhIGB0eXBvZ3JhcGh5YCBjb25maWcgd2hpbGUgc2V0dGluZyBgY29sb3JgIGFuZCBgZGVuc2l0eWAgdG8gYG51bGxgLiBUaGlzIGlzIGN1cnJlbnRseVxuICAvLyBub3QgcG9zc2libGUgYXMgaXQgd291bGQgaW50cm9kdWNlIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSBmb3IgdHlwb2dyYXBoeSBiZWNhdXNlIHRoZSBgbWF0LWNvcmVgXG4gIC8vIG1peGluIHRoYXQgaXMgdHJhbnNpdGl2ZWx5IGxvYWRlZCBieSB0aGUgYGFsbC10aGVtZWAgZmlsZSwgaW1wb3J0cyBgYWxsLXR5cG9ncmFwaHlgIHdoaWNoXG4gIC8vIHdvdWxkIHRoZW4gbG9hZCBgYWxsLXRoZW1lYCBhZ2Fpbi4gVGhpcyB1bHRpbWF0ZWx5IHJlc3VsdHMgYSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuXG4gIEBpbmNsdWRlIG1hdC1iYWRnZS10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtYmFzZS10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtYXV0b2NvbXBsZXRlLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1ib3R0b20tc2hlZXQtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWJ1dHRvbi10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtYnV0dG9uLXRvZ2dsZS10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtY2FyZC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtY2hlY2tib3gtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWNoaXBzLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1kaXZpZGVyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC10YWJsZS10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZGF0ZXBpY2tlci10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZGlhbG9nLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1leHBhbnNpb24tcGFuZWwtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWdyaWQtbGlzdC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtaWNvbi10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtaW5wdXQtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LW1lbnUtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXBhZ2luYXRvci10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtcHJvZ3Jlc3MtYmFyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1wcm9ncmVzcy1zcGlubmVyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1yYWRpby10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtc2VsZWN0LXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1zaWRlbmF2LXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1zbGlkZS10b2dnbGUtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXNsaWRlci10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtc3RlcHBlci10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtc29ydC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtdGFicy10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtdG9vbGJhci10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtdG9vbHRpcC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtbGlzdC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtb3B0aW9uLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1vcHRncm91cC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtc25hY2stYmFyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC10cmVlLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG59XG5cblxuLy8gTWl4aW4gdGhhdCByZW5kZXJzIGFsbCBvZiB0aGUgY29yZSBzdHlsZXMgdGhhdCBhcmUgbm90IHRoZW1lLWRlcGVuZGVudC5cbkBtaXhpbiBtYXQtY29yZSgkdHlwb2dyYXBoeS1jb25maWc6IG51bGwpIHtcbiAgQGluY2x1ZGUgYW5ndWxhci1tYXRlcmlhbC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5LWNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1yaXBwbGUoKTtcbiAgQGluY2x1ZGUgY2RrLWExMXkoKTtcbiAgQGluY2x1ZGUgY2RrLW92ZXJsYXkoKTtcbiAgQGluY2x1ZGUgY2RrLXRleHQtZmllbGQoKTtcblxuICBAaW5jbHVkZSBfbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLXBvc2l0aW9uaW5nKCk7XG4gIEBpbmNsdWRlIF9tYXQtbWRjLWNvcmUoKTtcbn1cblxuQG1peGluIG1hdC1jb3JlLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC8vIFdyYXBwZXIgZWxlbWVudCB0aGF0IHByb3ZpZGVzIHRoZSB0aGVtZSBiYWNrZ3JvdW5kIHdoZW4gdGhlIHVzZXIncyBjb250ZW50IGlzbid0XG4gIC8vIGluc2lkZSBvZiBhIGBtYXQtc2lkZW5hdi1jb250YWluZXJgLiBOb3RlIHRoYXQgd2UgbmVlZCB0byBleGNsdWRlIHRoZSBhbXBlcnNhbmRcbiAgLy8gc2VsZWN0b3IgaW4gY2FzZSB0aGUgbWl4aW4gaXMgaW5jbHVkZWQgYXQgdGhlIHRvcCBsZXZlbC5cbiAgLm1hdC1hcHAtYmFja2dyb3VuZCN7aWYoJiwgJywgJi5tYXQtYXBwLWJhY2tncm91bmQnLCAnJyl9IHtcbiAgICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgYmFja2dyb3VuZCk7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gIH1cblxuICAvLyBQcm92aWRlcyBleHRlcm5hbCBDU1MgY2xhc3NlcyBmb3IgZWFjaCBlbGV2YXRpb24gdmFsdWUuIEVhY2ggQ1NTIGNsYXNzIGlzIGZvcm1hdHRlZCBhc1xuICAvLyBgbWF0LWVsZXZhdGlvbi16JHpWYWx1ZWAgd2hlcmUgYCR6VmFsdWVgIGNvcnJlc3BvbmRzIHRvIHRoZSB6LXNwYWNlIHRvIHdoaWNoIHRoZSBlbGVtZW50IGlzXG4gIC8vIGVsZXZhdGVkLlxuICBAZm9yICR6VmFsdWUgZnJvbSAwIHRocm91Z2ggMjQge1xuICAgIC4jeyRfbWF0LWVsZXZhdGlvbi1wcmVmaXh9I3skelZhbHVlfSB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbigkelZhbHVlLCAkY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICAvLyBNYXJrZXIgdGhhdCBpcyB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBhZGRlZCBhIHRoZW1lIHRvIHRoZWlyIHBhZ2UuXG4gIEBhdC1yb290IHtcbiAgICAubWF0LXRoZW1lLWxvYWRlZC1tYXJrZXIge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuLy8gTWl4aW4gdGhhdCByZW5kZXJzIGFsbCBvZiB0aGUgY29yZSBzdHlsZXMgdGhhdCBkZXBlbmQgb24gdGhlIHRoZW1lLlxuQG1peGluIG1hdC1jb3JlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIC8vIFdyYXAgdGhlIHN1Yi10aGVtZSBpbmNsdWRlcyBpbiB0aGUgZHVwbGljYXRlIHRoZW1lIHN0eWxlcyBtaXhpbi4gVGhpcyBlbnN1cmVzIHRoYXRcbiAgLy8gdGhlcmUgd29uJ3QgYmUgbXVsdGlwbGUgd2FybmluZ3MuIGUuZy4gaWYgYG1hdC1jb3JlLXRoZW1lYCByZXBvcnRzIGEgd2FybmluZywgdGhlblxuICAvLyB0aGUgaW1wb3J0ZWQgdGhlbWVzIChzdWNoIGFzIGBtYXQtcmlwcGxlLXRoZW1lYCkgc2hvdWxkIG5vdCByZXBvcnQgYWdhaW4uXG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtY29yZScpIHtcbiAgICBAaW5jbHVkZSBtYXQtcmlwcGxlLXRoZW1lKCR0aGVtZSk7XG4gICAgQGluY2x1ZGUgbWF0LW9wdGlvbi10aGVtZSgkdGhlbWUpO1xuICAgIEBpbmNsdWRlIG1hdC1vcHRncm91cC10aGVtZSgkdGhlbWUpO1xuICAgIEBpbmNsdWRlIG1hdC1wc2V1ZG8tY2hlY2tib3gtdGhlbWUoJHRoZW1lKTtcblxuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWNvcmUtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gTWl4aW4gdGhhdCByZW5kZXJzIGFsbCBvZiB0aGUgY29yZSBNREMgc3R5bGVzLiBQcml2YXRlIG1peGluIGluY2x1ZGVkIHdpdGggYG1hdC1jb3JlYC5cbkBtaXhpbiBfbWF0LW1kYy1jb3JlKCkge1xuICBAaW5jbHVkZSBfbWF0LW1kYy1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycy1wb3NpdGlvbmluZygpO1xufVxuXG4vLyBNaXhpbiB0aGF0IGVuc3VyZXMgZm9jdXMgaW5kaWNhdG9yIGhvc3QgZWxlbWVudHMgYXJlIHBvc2l0aW9uZWQgc28gdGhhdCB0aGUgZm9jdXMgaW5kaWNhdG9yXG4vLyBwc2V1ZG8gZWxlbWVudCB3aXRoaW4gaXMgcG9zaXRpb25lZCByZWxhdGl2ZSB0byB0aGUgaG9zdC4gUHJpdmF0ZSBtaXhpbiBpbmNsdWRlZCB3aXRoaW5cbi8vIGBfbWF0LW1kYy1jb3JlYC5cbkBtaXhpbiBfbWF0LW1kYy1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycy1wb3NpdGlvbmluZygpIHtcbiAgLm1hdC1tZGMtZm9jdXMtaW5kaWNhdG9yIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLy8gQ3JlYXRlIGEgdGhlbWUuXG5AbWl4aW4gYW5ndWxhci1tYXRlcmlhbC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUtb3ItY29sb3ItY29uZmlnLCAnYW5ndWxhci1tYXRlcmlhbC10aGVtZScpIHtcbiAgICBAaW5jbHVkZSBtYXQtY29yZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtYXV0b2NvbXBsZXRlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1iYWRnZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtYm90dG9tLXNoZWV0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1idXR0b24tdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWJ1dHRvbi10b2dnbGUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWNhcmQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWNoZWNrYm94LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1jaGlwcy10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtdGFibGUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWRhdGVwaWNrZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWRpYWxvZy10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtZGl2aWRlci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtZXhwYW5zaW9uLXBhbmVsLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1ncmlkLWxpc3QtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWljb24tdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWlucHV0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1saXN0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1tZW51LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1wYWdpbmF0b3ItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXByb2dyZXNzLWJhci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtcmFkaW8tdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXNlbGVjdC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtc2lkZW5hdi10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtc2xpZGUtdG9nZ2xlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1zbGlkZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXN0ZXBwZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXNvcnQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXRhYnMtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXRvb2xiYXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXRvb2x0aXAtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXRyZWUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXNuYWNrLWJhci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgfVxufVxuXG5cbi8vIEluY2x1ZGVzIGFsbCBvZiB0aGUgY29sb3Igc3R5bGVzLlxuQG1peGluIGFuZ3VsYXItbWF0ZXJpYWwtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAvLyBJbiBjYXNlIGEgdGhlbWUgb2JqZWN0IGhhcyBiZWVuIHBhc3NlZCBpbnN0ZWFkIG9mIGEgY29uZmlndXJhdGlvbiBmb3JcbiAgLy8gdGhlIGNvbG9yIHN5c3RlbSwgZXh0cmFjdCB0aGUgY29sb3IgY29uZmlnIGZyb20gdGhlIHRoZW1lIG9iamVjdC5cbiAgJGNvbmZpZzogaWYoX21hdC1pcy10aGVtZS1vYmplY3QoJGNvbmZpZy1vci10aGVtZSksXG4gICAgICBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKSwgJGNvbmZpZy1vci10aGVtZSk7XG5cbiAgQGlmICRjb25maWcgPT0gbnVsbCB7XG4gICAgQGVycm9yICdObyBjb2xvciBjb25maWd1cmF0aW9uIHNwZWNpZmllZC4nO1xuICB9XG5cbiAgQGluY2x1ZGUgYW5ndWxhci1tYXRlcmlhbC10aGVtZSgoXG4gICAgY29sb3I6ICRjb25maWcsXG4gICAgdHlwb2dyYXBoeTogbnVsbCxcbiAgICBkZW5zaXR5OiBudWxsLFxuICApKTtcbn1cblxuXG5cbi8vIEluY2x1ZGVzIGFsbCBvZiB0aGUgZGVuc2l0eSBzdHlsZXMuXG5AbWl4aW4gX2FuZ3VsYXItbWF0ZXJpYWwtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gIC8vIEluIGNhc2UgYSB0aGVtZSBvYmplY3QgaGFzIGJlZW4gcGFzc2VkIGluc3RlYWQgb2YgYSBjb25maWd1cmF0aW9uIGZvclxuICAvLyB0aGUgZGVuc2l0eSBzeXN0ZW0sIGV4dHJhY3QgdGhlIGRlbnNpdHkgY29uZmlnIGZyb20gdGhlIHRoZW1lIG9iamVjdC5cbiAgJGNvbmZpZzogaWYoX21hdC1pcy10aGVtZS1vYmplY3QoJGNvbmZpZy1vci10aGVtZSksXG4gICAgICBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpLCAkY29uZmlnLW9yLXRoZW1lKTtcblxuICBAaWYgJGNvbmZpZyA9PSBudWxsIHtcbiAgICBAZXJyb3IgJ05vIGRlbnNpdHkgY29uZmlndXJhdGlvbiBzcGVjaWZpZWQuJztcbiAgfVxuXG4gIEBpbmNsdWRlIGFuZ3VsYXItbWF0ZXJpYWwtdGhlbWUoKFxuICAgIGNvbG9yOiBudWxsLFxuICAgIHR5cG9ncmFwaHk6IG51bGwsXG4gICAgZGVuc2l0eTogJGNvbmZpZyxcbiAgKSk7XG59XG5cblxuXG4iLCJAaW1wb3J0IFwifnNyYy9AY29uZG8vc3R5bGVzL2NvbmRvXCI7XG5cbi5leHAtdmlzaXRvci1jb25maXJtLXdyYXBwZXIge1xuXG4gICAgJi5jb250ZW50LWxheW91dCB7XG4gICAgICAgIHBhZGRpbmc6IDMycHg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgICAgICAgLm1haW4ge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDEyMDBweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAhaW1wb3J0YW50IFxuICAgICAgICB9XG5cbiAgICAgICAgLmJhY2tncm91bmQge1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgLy9oZWlnaHQ6IDg5MXB4O1xuICAgIFxuICAgICAgICAgICAgcGF0aCB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC4xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAuYmctY2FyZCB7XG4gICAgICAgIEBpbmNsdWRlIGJveC1zaGFkb3coMCA0cHggNnB4IC0xcHggcmdiYSgwLDAsMCwuMSksIDAgMnB4IDRweCAtMXB4IHJnYmEoMCwwLDAsLjA2KSAhaW1wb3J0YW50KTtcbiAgICAgICAgbWluLXdpZHRoOiA4MDBweDtcbiAgICAgICAgei1pbmRleDogMTAwMDtcbiAgICAgICAgQGluY2x1ZGUgY29uZG8tYnJlYWtwb2ludCgnbHQtbGcnKSB7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIG1pbi13aWR0aDogYXV0bztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5kaXZpZGVyIHtcbiAgICAgICAgd2lkdGg6IDMycHg7XG4gICAgICAgIGhlaWdodDogNHB4O1xuICAgICAgICBtYXJnaW46IDQwcHggMDtcbiAgICAgICAgQGluY2x1ZGUgYm9yZGVyLXJhZGl1cygycHgpO1xuICAgIH1cblxuICAgIC52aXNpdG9yLWl0ZW0ge1xuICAgICAgICAubWVkaWEge1xuICAgICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICAgIEBpbmNsdWRlIGNvbmRvLWJyZWFrcG9pbnQoJ2x0LW1kJykge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC5iYXJjb2RlIHtcbiAgICAgICAgICAgIG1hcmdpbjogLTE4cHggMCAwIDA7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBAaW5jbHVkZSBjb25kby1icmVha3BvaW50KCdsdC1tZCcpIHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDIwcHggMCAtMTBweCAwO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59XG5cbkBpbmNsdWRlIGNvbmRvLXRoZW1lIHtcblxuXHQkYmFja2dyb3VuZDogbWFwLWdldCgkdGhlbWUsIGJhY2tncm91bmQpO1xuICAgICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCR0aGVtZSwgZm9yZWdyb3VuZCk7XG4gICAgJHByaW1hcnk6IG1hcC1nZXQoJHRoZW1lLCBwcmltYXJ5KTtcbiAgICAkaXMtZGFyazogbWFwLWdldCgkdGhlbWUsIGlzLWRhcmspO1xuXG4gICAgLmV4cC12aXNpdG9yLWNvbmZpcm0td3JhcHBlciB7XG5cbiAgICAgICAgLmJhY2tncm91bmQge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwYXRoIHtcbiAgICAgICAgICAgICAgICBAaWYgKCRpcy1kYXJrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGNvbmRvLWNvbG9yKCdjb29sLWdyYXknLCA4MDApO1xuICAgICAgICAgICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBjb25kby1jb2xvcignYmx1ZScsIDMwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLmlkLWRldGFpbHMge1xuXG4gICAgICAgIH1cblxuICAgICAgICAuZGl2aWRlciB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXAtZ2V0KCRwcmltYXJ5LCBiYXNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC52aXNpdG9yLWl0ZW0ge1xuICAgICAgICAgICAgLmljb24ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiA3NHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogNzRweDtcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBib3JkZXItcmFkaXVzKDRweCk7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBAaWYgJGlzLWRhcmsge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb25kby1jb2xvcignY29vbC1ncmF5JywgNjAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjb25kby1jb2xvcignY29vbC1ncmF5JywgMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIDE0cHggMCAwO1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgbWF0LWljb24ge1xuICAgICAgICAgICAgICAgICAgICBAaW5jbHVkZSBjb25kby1pY29uLXNpemUoMzQpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbWFwLWdldCgkZm9yZWdyb3VuZCwgYmFzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLm90aGVycyB7XG4gICAgICAgICAgICAgICAgbWF0LWljb24ge1xuICAgICAgICAgICAgICAgICAgICBAaW5jbHVkZSBjb25kby1pY29uLXNpemUoMTYpO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgNnB4IDAgMDtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICB0b3A6IDJweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAudHlwZSB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGNvbmRvLWNvbG9yKCdjdXN0b20tZ3JlZW4nLCA5MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLnZpc2l0b3ItZXh0cmFzIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAyOHB4O1xuICAgICAgICAgICAgICAgIHAge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbWFwLWdldCgkZm9yZWdyb3VuZCwgbGlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBAaW5jbHVkZSBmdC1jYWxjKCRmb250LW5vcm1hbCk7XG4gICAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIGNvbmRvLWJyZWFrcG9pbnQoJ2x0LWxnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgJi5yaWdodCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5pdGVtIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7XG4gICAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIGNvbmRvLWJyZWFrcG9pbnQoJ2x0LWxnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDE2cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuYWN0aW9ucyB7XG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMjBweDtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgcGFkZGluZzogMzBweCAxMnB4IDRweCAxMnB4O1xuICAgICAgICAgICAgei1pbmRleDogMTAwMDtcbiAgICAgICAgICAgIGE6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMCAxOHB4IDAgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBpbmNsdWRlIGNvbmRvLWJyZWFrcG9pbnQoJ2x0LWxnJykge1xuICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgMCAxNHB4IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbiAgICBcbn0iLCJcbkBpbXBvcnQgXCJ2YXJpYWJsZXNcIjtcbiBcbkBtaXhpbiBib3JkZXItcmFkaXVzICgkcmFkaXVzKSB7XG5cdC13ZWJraXQtYm9yZGVyLXJhZGl1czogJHJhZGl1cyAhaW1wb3J0YW50O1xuXHQtbW96LWJvcmRlci1yYWRpdXM6ICRyYWRpdXMgIWltcG9ydGFudDtcblx0Ym9yZGVyLXJhZGl1czogJHJhZGl1cyAhaW1wb3J0YW50O1xufVxuXG5AbWl4aW4gYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyAoJHJhZGl1cykge1xuICAtd2Via2l0LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRyYWRpdXMgIWltcG9ydGFudDtcbiAgLW1vei1ib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAkcmFkaXVzICFpbXBvcnRhbnQ7XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRyYWRpdXMgIWltcG9ydGFudDtcbn1cblxuQG1peGluIG9wYWNpdHkgKCR2YWx1ZSkge1xuICBvcGFjaXR5OiAkdmFsdWU7XG4gIC1tb3otb3BhY2l0eTogJHZhbHVlO1xuICAtd2Via2l0LW9wYWNpdHk6ICR2YWx1ZTtcbn1cblxuQG1peGluIGJveC1zaGFkb3cgKCRydWxlcy4uLikge1xuICBib3gtc2hhZG93OiAkcnVsZXM7XG4gIC1tb3otYm94LXNoYWRvdzogJHJ1bGVzO1xuICAtd2Via2l0LWJveC1zaGFkb3c6ICRydWxlcztcbn1cblxuQG1peGluIHRleHQtc2hhZG93ICgkcnVsZXMpIHtcbiAgdGV4dC1zaGFkb3c6ICRydWxlcztcbiAgLW1vei10ZXh0LXNoYWRvdzogJHJ1bGVzO1xuICAtd2Via2l0LXRleHQtc2hhZG93OiAkcnVsZXM7XG59XG5cbkBtaXhpbiB0cmFuc2Zvcm0gKCRydWxlcykge1xuXHQtd2Via2l0LXRyYW5zZm9ybTogJHJ1bGVzICFpbXBvcnRhbnQ7XG5cdC1tb3otdHJhbnNmb3JtOiAkcnVsZXMgIWltcG9ydGFudDtcblx0dHJhbnNmb3JtOiAkcnVsZXMgIWltcG9ydGFudDtcbn1cblxuQG1peGluIHRyYW5zaXRpb24gKCRydWxlcy4uLikge1xuXHQtd2Via2l0LXRyYW5zaXRpb246ICRydWxlcztcblx0LW1vei10cmFuc2l0aW9uOiAkcnVsZXM7XG5cdHRyYW5zaXRpb246ICRydWxlcztcbn1cblxuQG1peGluIGFuaW1hdGlvbi1kZWxheSAoJHZhbHVlKSB7XG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiAkdmFsdWU7XG4gIC1tb3otYW5pbWF0aW9uLWRlbGF5OiAkdmFsdWU7XG4gIGFuaW1hdGlvbi1kZWxheTogJHZhbHVlO1xufVxuXG5AbWl4aW4gYm94LXNpemluZyAoJHJ1bGVzLi4uKSB7XG4gIC13ZWJraXQtYm94LXNpemluZzogJHJ1bGVzO1xuICAtbW96LWJveC1zaXppbmc6ICRydWxlcztcbiAgYm94LXNpemluZzogJHJ1bGVzO1xufVxuXG5AbWl4aW4gYXBwZWFyYW5jZSAoJHJ1bGVzLi4uKSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogJHJ1bGVzO1xuICAtbW96LWFwcGVhcmFuY2U6ICRydWxlcztcbn1cblxuQG1peGluIGRlc2VsZWN0ICgpIHtcbiAgLW1vei11c2VyLXNlbGVjdDogLW1vei1ub25lO1xuXHQta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XG5cdC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG5cdC1vLXVzZXItc2VsZWN0OiBub25lO1xuXHR1c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuQG1peGluIHZpc2liaWxpdHkgKCRydWxlcykge1xuICB2aXNpYmlsaXR5OiAkcnVsZXM7XG59XG5cbkBtaXhpbiBuby1tcCAoKSB7XG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XG59XG5cbkBtaXhpbiBjaXJjbGVzKCRyLCAkYmc6bnVsbCwgJHRjOm51bGwpIHtcbiAgd2lkdGg6ICRyO1xuICBoZWlnaHQ6ICRyO1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAganVzdGlmeS1jb250ZW50OmNlbnRlcjtcbiAgYWxpZ24taXRlbXM6Y2VudGVyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmc7XG4gIGNvbG9yOiAkdGM7XG4gIEBpbmNsdWRlIGJvcmRlci1yYWRpdXMoJHIpO1xufVxuXG5AbWl4aW4gbGluZWFyLWdyYWRpZW50KCRkaXJlY3Rpb24sICRjb2xvci1zdG9wcy4uLikge1xuICAvLyBEaXJlY3Rpb24gaGFzIGJlZW4gb21pdHRlZCBhbmQgaGFwcGVucyB0byBiZSBhIGNvbG9yLXN0b3BcbiAgQGlmIGlzLWRpcmVjdGlvbigkZGlyZWN0aW9uKSA9PSBmYWxzZSB7XG4gICAgJGNvbG9yLXN0b3BzOiAkZGlyZWN0aW9uLCAkY29sb3Itc3RvcHM7XG4gICAgJGRpcmVjdGlvbjogMTgwZGVnO1xuICB9XG5cbiAgYmFja2dyb3VuZDogbnRoKG50aCgkY29sb3Itc3RvcHMsIDEpLCAxKTtcbiAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQobGVnYWN5LWRpcmVjdGlvbigkZGlyZWN0aW9uKSwgJGNvbG9yLXN0b3BzKTtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCRkaXJlY3Rpb24sICRjb2xvci1zdG9wcyk7XG59XG5cbkBtaXhpbiBmbGlwKCRkaXJlY3Rpb24pIHtcbiAgdHJhbnNmb3JtIDogcm90YXRlWSgkZGlyZWN0aW9uKTtcbn0gXG4gXG5AbWl4aW4gcGxhY2Vob2xkZXIge1xuICAmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtAY29udGVudH1cbiAgJjotbW96LXBsYWNlaG9sZGVyICAgICAgICAgICB7QGNvbnRlbnR9XG4gICY6Oi1tb3otcGxhY2Vob2xkZXIgICAgICAgICAge0Bjb250ZW50fVxuICAmOi1tcy1pbnB1dC1wbGFjZWhvbGRlciAgICAgIHtAY29udGVudH0gIFxufVxuXG5AbWl4aW4gZnQtY2FsYygkcGl4ZWxzKSB7XG4gIGZvbnQtc2l6ZTogKCAkcGl4ZWxzIC8gJHJlbS1iYXNlICkgKyByZW07XG59XG5cbkBtaXhpbiBjb25kby1pY29uLXNpemUoJHNpemUsICRpbXBvcnRhbnQ6IGZhbHNlKSB7XG4gIHdpZHRoOiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbiAgaGVpZ2h0OiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbiAgbWluLXdpZHRoOiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbiAgbWluLWhlaWdodDogI3soJHNpemUpICsgJ3B4J30gaWYoJGltcG9ydGFudCwgIWltcG9ydGFudCwgbnVsbCk7XG4gIGZvbnQtc2l6ZTogI3soJHNpemUpICsgJ3B4J30gaWYoJGltcG9ydGFudCwgIWltcG9ydGFudCwgbnVsbCk7XG4gIGxpbmUtaGVpZ2h0OiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcblxuICBzdmcge1xuICAgICAgd2lkdGg6ICN7KCRzaXplKSArICdweCd9IGlmKCRpbXBvcnRhbnQsICFpbXBvcnRhbnQsIG51bGwpO1xuICAgICAgaGVpZ2h0OiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbiAgfVxufVxuXG5AbWl4aW4gY29uZG8tYnV0dG9uLXNpemUoJHNpemUsICRpbXBvcnRhbnQ6IGZhbHNlKSB7XG4gIGhlaWdodDogI3soJHNpemUpICsgJ3B4J30gaWYoJGltcG9ydGFudCwgIWltcG9ydGFudCwgbnVsbCk7XG4gIG1pbi1oZWlnaHQ6ICN7KCRzaXplKSArICdweCd9IGlmKCRpbXBvcnRhbnQsICFpbXBvcnRhbnQsIG51bGwpO1xuICBsaW5lLWhlaWdodDogI3soJHNpemUpICsgJ3B4J30gaWYoJGltcG9ydGFudCwgIWltcG9ydGFudCwgbnVsbCk7XG59XG5cbkBtaXhpbiBjb25kby1icmVha3BvaW50KCRicmVha3BvaW50KSB7XG5cbiAgJG1lZGlhUXVlcnk6IG1hcC1nZXQoJGNvbmRvLWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludCk7XG5cbiAgQGlmICgkbWVkaWFRdWVyeSAhPSBudWxsKSB7XG5cbiAgICAgIEBtZWRpYSAjeyRtZWRpYVF1ZXJ5fSB7XG4gICAgICAgICAgQGNvbnRlbnRcbiAgICAgIH1cbiAgfSBAZWxzZSB7XG5cbiAgICAgIEBtZWRpYSAjeyRicmVha3BvaW50fSB7XG4gICAgICAgICAgQGNvbnRlbnRcbiAgICAgIH1cbiAgfVxufVxuIiwiXG4vLyBET05UIE1PRElGWVxuICBAbWl4aW4gcHVibGljLXJlZ3VsYXIge1xuICAgIGZvbnQtZmFtaWx5OiAnUmFsZXdheScsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbiAgXG4gIEBtaXhpbiBwdWJsaWMtbWVkaXVtIHtcbiAgICBmb250LWZhbWlseTogJ1JhbGV3YXknLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG5cbiAgQG1peGluIHB1YmxpYy1ib2xkIHtcbiAgICBmb250LWZhbWlseTogJ1JhbGV3YXknLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICB9XG5cbiAgQG1peGluIGRlc3AtcmVndWxhciB7XG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogMC4zcHg7ICAgXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogaW5oZXJpdDtcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogaW5oZXJpdDtcbiAgfVxuICBcbiAgQG1peGluIGRlc3AtbWVkaXVtIHtcbiAgICBmb250LWZhbWlseTogJ0ludGVyJywgc2Fucy1zZXJpZjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxldHRlci1zcGFjaW5nOiAwLjNweDtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG4gIH1cbiAgXG4gIEBtaXhpbiBkZXNwLWJvbGQge1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuM3B4O1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbiAgfVxuXG4gIEBtaXhpbiBmdC1jYWxjKCRwaXhlbHMpIHtcbiAgICBmb250LXNpemU6ICggJHBpeGVscyAvICRyZW0tYmFzZSApICsgcmVtO1xuICB9XG4gICJdfQ== */\";","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { CondoAnimations } from 'src/@condo/animations';\nimport { NgxQrcodeElementTypes, NgxQrcodeErrorCorrectionLevels } from '@techiediaries/ngx-qrcode';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\n\n@Component({\n  selector: 'app-exp-visitor-confirm',\n  templateUrl: './exp-visitor-confirm.component.html',\n  styleUrls: ['./exp-visitor-confirm.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations   : CondoAnimations\n})\nexport class ExpVisitorConfirmComponent implements OnInit {\n\n  isDataLoaded:Boolean = false;\n\n  message: any = null;\n\n  visitor:any;\n\n  timeZone:any;\n\n  visitorStructure:any = {};\n\n  elementType = NgxQrcodeElementTypes.URL;\n  correctionLevel = NgxQrcodeErrorCorrectionLevels.HIGH;\n\n  constructor(\n    private router:Router,\n    private activateRoute: ActivatedRoute,\n    private visitorService:VisitorService,\n    private sharedService: SharedService,\n    private sessionService:SessionService\n  ) { }\n\n\n  getDateTime(date) {\n    return moment(date).format(this.timeZone.time)\n  }\n\n  ngOnInit(): void {\n\n    this.sharedService.timezonecast.subscribe( timeZone => this.timeZone = timeZone )\n\n\n    // Show the validation message\n\n    let params = {\n      expectedVisitorId: this.activateRoute.params['value'].id\n    }\n\n    this.visitorService.getExpectedVisitorById(params).subscribe((res:any) => {\n\n      this.isDataLoaded = true;\n\n      this.visitor = res[0]\n\n      let type = this.activateRoute.params['value'].type;\n\n      if(type == 'frequent' && this.sessionService.isAdmin()) {\n        this.visitorStructure = {\n          name : 'Frequent Visitor',\n          createBtnName : 'Create another frequent visitor',\n          createBtnUrl : '/ams/visitor/info/frequent-visitor-create',\n          viewBtnName : 'View list of frequent visitor',\n          viewBtnUrl : '/ams/visitor/info/frequent-visitor-list' \n        }\n      } else if (type == 'frequent' && !this.sessionService.isAdmin()) {\n        this.visitorStructure = {\n          name : 'Frequent Visitor',\n          createBtnName : 'Create another frequent visitor',\n          createBtnUrl : '/user/visitor/frequent-visitor-create',\n          viewBtnName : 'View list of frequent visitor',\n          viewBtnUrl : '/user/visitor/frequent-visitor-list' \n        }\n      } else if (type == 'vendor') {\n        this.visitorStructure = {\n          name : 'Vendor Pass',\n          createBtnName : 'Create another vendor pass',\n          createBtnUrl : '/ams/visitor/info/vendor-pass-create',\n          viewBtnName : 'View list of vendor pass',\n          viewBtnUrl : '/ams/visitor/info/vendor-pass-list' \n        }\n\n      } else if (type == 'expected' && this.sessionService.isAdmin()) {\n        this.visitorStructure = {\n          name : 'Expected Visitor',\n          createBtnName : 'Create another expected visitor',\n          createBtnUrl : '/ams/visitor/info/create-expected-visitor',\n          viewBtnName : 'View list of expected visitor',\n          viewBtnUrl : '/ams/visitor/info/expected-visitor-list' \n        }\n      } else if (type == 'expected' && !this.sessionService.isAdmin()) {\n        this.visitorStructure = {\n          name : 'Expected Visitor',\n          createBtnName : 'Create another expected visitor',\n          createBtnUrl : '/user/visitor/create-expected-visitor',\n          viewBtnName : 'View list of expected visitor',\n          viewBtnUrl : '/user/visitor/expected-visitor-user-list' \n        }\n      }\n\n      this.message = {\n        appearance: 'outline',\n        content   : `${this.visitorStructure.name} created. Please share the below details to your visitor`,\n        shake     : false,\n        showIcon  : true,\n        type      : 'success'\n      };\n\n    }, error => {\n      this.isDataLoaded = true;\n      this.sharedService.openSnackBar('Server Error','error');\n    })\n\n  }\n\n}\n","export default \".intl-tel-input {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9jb21tb24vdmlzaXRvci9jb21wb25lbnRzL2V4cC12aXNpdG9yLWNyZWF0ZS1jaGVraW4vZXhwLXZpc2l0b3ItY3JlYXRlLWNoZWtpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7QUFDSiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tbW9uL3Zpc2l0b3IvY29tcG9uZW50cy9leHAtdmlzaXRvci1jcmVhdGUtY2hla2luL2V4cC12aXNpdG9yLWNyZWF0ZS1jaGVraW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW50bC10ZWwtaW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xufSJdfQ== */\";","import { Component, OnInit, ViewEncapsulation, ViewChild} from '@angular/core';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { ApartmentService } from 'src/app/api/controllers/Apartment';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { StaffService } from 'src/app/api/controllers/Staff';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { SearchCountryField, CountryISO } from 'ngx-intl-tel-input';\nimport { CondoAnimations } from 'src/@condo/animations';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\n\n@Component({\n  selector: 'app-exp-visitor-create-chekin',\n  templateUrl: './exp-visitor-create-chekin.component.html',\n  styleUrls: ['./exp-visitor-create-chekin.component.scss'],\n  encapsulation  : ViewEncapsulation.None,\n  animations   : CondoAnimations\n})\n\nexport class ExpVisitorCreateChekinComponent implements OnInit {\n  \n  @ViewChild('expectedVisitorForm') form:any;\n  visitor:any = {};\n  expectedDurationInfo:string = '';\n  visitTypeList:any = [];\n  visitCategoryList:any = [];\n  towerList:any = [];\n  unitList:any = [];\n  staffsList:any = [];\n  block:any = {};\n  isDataLoaded:boolean = true;\n  urlType:string = 'create';\n  separateDialCode = true;\n  SearchCountryField = SearchCountryField;\n  CountryISO = CountryISO;\n  preferredCountries: CountryISO[] = [CountryISO.Philippines, CountryISO.India];\n  message: any = null;\n\n  isEdit:boolean = false;\n\n  selectedCountryISO: any = \"ph\"\n  \n  constructor(\n    private router:Router,\n    private activateRouter: ActivatedRoute,\n    private apartmentService:ApartmentService,\n    private visitorService:VisitorService,\n    private lookupService: LookupService,\n    private sessionService:SessionService,\n    private staffService: StaffService,\n    private sharedService: SharedService\n  ) {\n  \n  }\n\n  isAdmin() {\n    return this.sessionService.isAdmin()\n  }\n\n  getSelectedCategory(event){\n    this.visitor.visitorCategoryId = event[0].lookupValueId\n  }\n\n  getSelectedVisitType(event){\n    this.visitor.visitTypeId = event[0].lookupValueId;\n    this.visitor.apartmentUnitId = null;\n    this.visitor.tomeetStaffId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n  }\n\n  getSelectedBlock(event) {\n    this.block.blockId = event[0].block_Id\n    this.getUnits('change');\n  }\n\n  getSelectedBlockUnit(event){\n    this.visitor.apartmentUnitId = event[0].buId\n    this.getPrimaryName();\n  }\n\n  getSelectedStaff(event){\n    this.visitor.tomeetStaffId = event[0].staffId;\n  }\n\n  getBlockId() {\n    let unitDetails = {\n      apartmentBlockUnitId: this.visitor.apartmentUnitId,\n    };\n    return this.apartmentService.getApartmentBlockUnitById(unitDetails);\n  }\n\n  async getUnits(type) {\n    //Async await function integrated for checkin and checkout mode\n    if(type == 'change') {\n      this.visitor.apartmentUnitId = null;\n      this.block.primaryName = '';\n    } else {\n      let tower:any = await this.getBlockId().toPromise();\n      if(tower.length > 0)\n        this.block.blockId = tower[0].apartmentBlockId;\n    }\n    for(let data of this.towerList) {\n      if(this.block.blockId == data.block_Id) {\n        this.unitList = data.blockUnit;\n        if(type != 'change') {\n          this.getPrimaryName();\n          this.isDataLoaded = true;\n        }\n        break;\n      }\n    }\n  }\n\n  getPrimaryName() {\n    for(let data of this.unitList) {\n      if(this.visitor.apartmentUnitId == data.buId) {\n        this.block.primaryName = data.il_Label;\n        break;\n      }\n    }\n  }\n\n  expectedDurationChange() {\n    if(this.visitor.expectedVisitorInTime && this.visitor.expectedVisitorOutTime) {\n      let inDate = moment(this.visitor.expectedVisitorInTime);\n      let outDate = moment(this.visitor.expectedVisitorOutTime);\n      let diffDuration = moment.duration(outDate.diff(inDate));\n      this.expectedDurationInfo = diffDuration.days()+\" days \"+this.isSingleDigit(diffDuration.hours())+\":\"+ this.isSingleDigit(diffDuration.minutes())+\" hours\";\n      let hours = diffDuration.asHours();\n      this.visitor.expectedDuration = Math.round(hours);\n    } else \n        this.visitor.expectedVisitorOutTime = '';\n  }\n\n  isSingleDigit(digit){\n    if(digit <= 0){\n      return '00';\n    } else {\n      return (digit.toString().length > 1) ? digit : '0'+digit;\n    }\n  }\n\n  resetField() {\n    this.visitor={};\n    this.visitor.visitTypeId = null;\n    this.visitor.visitorCategoryId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n    this.expectedDurationInfo='';\n  }\n\n  submitExpectedVisitorForm(form) {\n    \n    this.message = null;\n    \n    if(!form.valid){\n      window.scroll({\n        top: 0,\n        behavior: 'smooth'\n      });\n      // Show the validation message\n      this.message = {\n        appearance: 'outline',\n        content   : \"Fill the Required Fields\",\n        shake     : true,\n        showIcon  : true,\n        type      : 'error'\n      };\n\n    }\n    else {\n\n      this.isDataLoaded = false;\n\n      if(!this.isEdit) {\n\n        let params = {\n          expectedVisitor : {\n            ...this.visitor,\n            \"apartmentUnitId\": this.visitor.apartmentUnitId,\n            \"apartmentId\" : this.sessionService.apartmentId,\n            \"expectedVisitorPhone\": this.visitor.expectedVisitorPhone.number,\n            \"isActive\": true,\n            \"insertedBy\": this.sessionService.userId,\n            \"insertedOn\": _moment().toISOString(),\n            \"updatedBy\": null,\n            \"updatedOn\": null,\n            \"enteredBy\": parseInt(this.sessionService.userId),\n            \"meetingPersonId\": 1,\n            \"visitorsOrg\": \"string\",\n            \"entryGateId\": null,\n            \"exitGateId\": null,\n            \"tomeetStaffId\": this.visitor.tomeetStaffId,\n            \"phonecountrycode\":  this.visitor.expectedVisitorPhone.countryCode,\n            \"isDailyvendor\": false,\n            \"isFrequentvisitor\": false,\n          }\n        }\n        this.visitorService.addExpectedVisitor(params).subscribe((res:any) => {\n          this.isDataLoaded = true;\n          if(res.message) {\n            let id = res.message.split('#');\n            this.router.navigate(['confirm-expected-visitor', id[0], 'expected'], { relativeTo: this.activateRouter.parent });\n          } else {\n            this.sharedService.openSnackBar(res.errorMessage,'error');\n          }\n        })\n  \n      }\n      else {\n  \n        let visitor = {\n          expectedVisitor : {...this.visitor,\n            \"expectedVisitorPhone\": this.visitor.expectedVisitorPhone.number,\n            \"phonecountrycode\": this.visitor.expectedVisitorPhone.countryCode,\n          }\n        }\n        this.visitorService.updateExpectedVisitor(visitor).subscribe((res:any) => {\n          this.isDataLoaded = true;\n          if(res.message) {\n            this.router.navigate(['confirm-expected-visitor', this.activateRouter.params['value'].id, 'expected'], { relativeTo: this.activateRouter.parent });\n          } else {\n            this.sharedService.openSnackBar(res.errorMessage,'error');\n          }\n        })\n  \n      }\n\n    }\n    \n\n  }\n\n  getTowers() {\n    let tower = {\n     apartmentId: this.sessionService.apartmentId\n    }\n    return this.apartmentService.getApartmentBlockAndBlockUnitIsLivingByApartmentId(tower)\n  }\n  \n  ngOnInit() {\n    \n    //set apartmentBlockUnitId and VisitorTypeId in User Mode\n    if(!this.isAdmin()) {\n      this.visitor.apartmentUnitId = this.sessionService.apartmentBlockUnitID;\n      this.visitor.visitTypeId = 50 // unitVisitor Type\n    }\n\n    //for edit visitor\n    if(this.activateRouter.params['value'].id != undefined) {\n      this.isEdit = true;\n      let visitor = {\n        expectedVisitorId : this.activateRouter.params['value'].id\n      }\n      this.visitorService.getExpectedVisitorById(visitor).subscribe((res: any) => {\n        this.visitor = res[0];\n        this.visitor.expectedVisitorPhone = {\n          'countryCode' : this.visitor.phonecountrycode,\n          'number' : res[0].expectedVisitorPhone\n        }\n        this.expectedDurationChange();\n        if(this.visitor.apartmentUnitId && this.isAdmin()) {\n          this.getTowers().subscribe((res:any)=>{\n            if(res.length > 0) {\n              this.towerList = res;\n              this.getUnits('edit');\n            }\n          })\n        }\n        else {\n          this.isDataLoaded = true;\n        }\n      })\n    }\n    else {\n      this.isEdit = false;\n    }\n\n     //Visit Category\n     let visitCategoryParams = {\n      ApartmentId: this.sessionService.apartmentId,\n      LookupTypeId: 100\n    }\n    this.lookupService.getLookupValueByLookupTypeId(visitCategoryParams).subscribe((res:any) => {\n      this.visitCategoryList = res\n    })\n    \n    \n    if(this.isAdmin()) {\n      this.resetField();\n      //visit type\n      let visitParams = {\n        ApartmentId: this.sessionService.apartmentId,\n        LookupTypeId: 15\n      }\n      this.lookupService.getLookupValueByLookupTypeId(visitParams).subscribe((res:any) => {\n        this.visitTypeList = res;\n      });\n      \n      //Tower List \n      this.getTowers().subscribe((res:any)=>{\n        if(res.length > 0) {\n          this.towerList = res;\n        }\n      })\n\n      //Staffs List\n      let staffParms = {\n        apartmentId: this.sessionService.apartmentId,\n        RoleTypeId: this.sessionService.roleTypeId\n      }\n      this.staffService.getAllStaffs(staffParms).subscribe((res:any) => {\n        this.staffsList = res;;\n      });\n    }\n\n  }\n}\n\n","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\napp-exp-visitor-list {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  app-exp-visitor-list .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  app-exp-visitor-list .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\napp-exp-visitor-list .mat-drawer-container .mat-drawer .expected-visitor-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\napp-exp-visitor-list .mat-drawer-container .mat-drawer .expected-visitor-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\napp-exp-visitor-list .mat-drawer-container .mat-drawer .expected-visitor-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n@media (max-width: 991px) {\\n  app-exp-visitor-list .table-header .button-name {\\n    display: none;\\n  }\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #27303f;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-crescent .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-crescent .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #404040;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n  color: #748694;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-light .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-light .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-orange .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-orange .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-maroon .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-maroon .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #212121;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-blue .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-blue .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #475569;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #ffffff;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n  color: #cfd8e3;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-dark .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-dark .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #2f2f2f;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n  color: #54575d;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-public .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-public .expected-visitor-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","import { Component, OnInit, Injector, HostListener, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { ConfirmDialogModel, CommonConfirmModalComponent } from 'src/app/shared/components/common-confirm-modal/common-confirm-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { MatDrawer } from '@angular/material/sidenav';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\n\n@Component({\n  selector: 'app-exp-visitor-list',\n  templateUrl: './exp-visitor-list.component.html',\n  styleUrls: ['./exp-visitor-list.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class ExpVisitorListComponent implements OnInit {\n  \n  @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent; \n  @ViewChild('matDrawer', {static: true}) matDrawer: MatDrawer;\n  columnData:any;\n  visitorList:any = [];\n  visitorSearch:string = '';\n  isVisitorDataLoaded:boolean;\n  modalService:any;\n\n  ItemStartIndex: any = 0;\n  ItemEndIndex: any;\n  totalItems: any;\n  itemLimit: any = 10;\n  \n  filterField:any = {\n    fromDate: moment(new Date()).subtract(30, 'days').format(),\n    toDate: _moment().toISOString(),\n  }\n\n  timeZone:any;\n\n  constructor(\n    private router: Router,\n    private injector: Injector,\n    private visitorService:VisitorService,\n    private sharedService:SharedService,\n    private sessionService:SessionService,\n    private activateRouter:ActivatedRoute,\n    public dialog: MatDialog,\n  ) { \n    this.modalService = this.injector.get(ModalService);\n  }\n\n  navigateToCreate(){\n    this.router.navigate(['/ams/visitor/info/create-expected-visitor']);\n  }\n\n  getPrintParams(event) {\n    this.datagrid.exportdata(event, 'expectedVisitorData');\n  }\n\n  getDate(date) {\n    return moment(date).format(this.timeZone.date)\n  }\n\n  getDateTime(date) {\n    return moment(date).format(this.timeZone.time)\n  }\n\n  viewPass(id) {\n    this.router.navigate(['confirm-expected-visitor', id, 'expected'],{relativeTo: this.activateRouter.parent});\n  }\n\n  checkIn(item) {\n\n    const message = `Are you sure you want to Check In?`;\n    const dialogData = new ConfirmDialogModel(\"Confirm Action\", message);\n    const dialogRef = this.dialog.open(CommonConfirmModalComponent, {\n      panelClass: 'material-dialog-medium',\n      disableClose: true,\n      data: dialogData\n    });\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if (dialogResult) {\n        this.router.navigate([`checkin/${item.expectedVisitorId}`],{relativeTo:this.activateRouter.parent,queryParams : {access : 'expected'}});\n      }\n    });\n\n  }\n  \n\n  @HostListener('window:onCopyWith', ['$event.detail'])\n  onCopyWith(detail) {\n    const message = `Are you sure, you want to copy the details?`;\n    const dialogData = new ConfirmDialogModel(\"Confirm Action\", message);\n    const dialogRef = this.dialog.open(CommonConfirmModalComponent, {\n      panelClass: 'material-dialog-medium',\n      disableClose: true,\n      data: dialogData\n    });\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if (dialogResult) {\n        let dataRecord = this.datagrid.getrowdata(detail.rowId);\n        this.router.navigate([`/ams/visitor/info/expected-visitor/copy/${dataRecord.expectedVisitorId}`]);\n      }\n    });\n  }\n\n  filterApply() {\n    this.getVisitorList();\n    this.matDrawer.close();\n    this.filterField.fromDate = moment(this.filterField.fromDate).utc().format();\n  }\n\n  getIndexParams(event){\n    this.ItemStartIndex = event.ItemStartIndex;\n    this.ItemEndIndex = event.ItemEndIndex;\n    this.itemLimit = event.itemLimit;\n  }\n\n  goBack() {\n    this.matDrawer.close();\n  }\n\n  clearFilter() {\n    this.filterField = {\n      fromDate: moment(new Date()).subtract(1, 'days').format(),\n      toDate: _moment().toISOString(),\n    }\n    this.getVisitorList();\n  }\n\n  getVisitorList() {\n    \n    this.isVisitorDataLoaded = false;\n    \n    let params = {\n      apartmentId: this.sessionService.apartmentId,\n      fromDate : moment(this.filterField.fromDate).toISOString(),\n      toDate: moment(this.filterField.toDate).toISOString(),\n    }\n    \n    this.visitorService.getAllYetToComeExpectedVisitorsByApartmentIdDate(params).subscribe((res:any) => {\n      if(res.length > 0) {\n        \n        /*let tableData = {\n          localdata: res.reverse(),\n          datatype: \"array\"\n        }\n        this.totalItems = tableData.localdata.length;\n        this.visitorList = new jqx.dataAdapter(tableData); */\n\n        this.visitorList = res.reverse();\n        this.totalItems = this.visitorList.length;\n\n        if (this.totalItems > this.itemLimit) {\n          this.ItemEndIndex = this.itemLimit;\n        }\n        else {\n          this.ItemEndIndex = this.totalItems;\n        }\n\n        this.isVisitorDataLoaded = true;\n\n      }\n      this.isVisitorDataLoaded = true;\n    },(error)=>{\n      this.isVisitorDataLoaded = true;\n      this.sharedService.openSnackBar('Server Error','error');\n    })\n\n  }\n\n  ngOnInit() {\n\n    this.sharedService.timezonecast.subscribe( timeZone => this.timeZone = timeZone )\n\n    this.getVisitorList();\n\n    var cellsrenderer = (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">' + value + '</div>';\n    }\n    var columnrenderer = (value) => {\n      return '<div style=\"padding: 14px\">' + value + '</div>';\n    }\n    this.columnData = [{\n      text: 'Id',\n      datafield: 'serialNo',\n      width: 80,\n      pinned: true,\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer\n    },{\n      text: 'Visitor Name',\n      datafield: 'expectedVisitorName',\n      width: 140,\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer\n    },{\n      text: 'Phone Number',\n      datafield: 'expectedVisitorPhone',\n      cellsrenderer: cellsrenderer,\n      minwidth: 100,\n      renderer: columnrenderer\n    },{\n      text: 'Expected Date/Time of Visit',\n      datafield: 'expectedVisitorInTime',\n      cellsrenderer: (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">'+ moment(value).format(\"MM/DD/YY hh:mm\") +'</div>'\n      },\n      minwidth: 160,\n      renderer: columnrenderer\n    },{\n      text: 'Expected Time-out',\n      datafield: 'expectedVisitorOutTime',\n      cellsrenderer: (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">'+ moment(value).format(\"MM/DD/YY hh:mm\") +'</div>'\n      },\n      minwidth: 160,\n      renderer: columnrenderer\n    },{\n      text: 'Visit Type',\n      datafield: 'visitType_Label',\n      cellsrenderer: cellsrenderer,\n      minwidth: 80,\n      renderer: columnrenderer\n    },{\n      text: 'Visitor category',\n      datafield: 'visitorCategoryId_Label',\n      cellsrenderer: cellsrenderer,\n      minwidth: 150,\n      renderer: columnrenderer\n    }, {\n      text: 'Tower Unit',\n      datafield: 'block_Unit',\n      cellsrenderer: cellsrenderer,\n      minwidth: 170,\n      renderer: columnrenderer \n    }, {\n      text: 'Check-In',\n      cellsalign: 'center', \n      align: 'center',\n      width: 120,\n      cellsrenderer: (row: number): string => {\n        // let new_ = moment().format('DD/MM/YYYY');\n        // let date = moment(this.visitorList.loadedData[row].expectedVisitorInTime).format('DD/MM/YYYY');\n        // if(new_ == date) {\n          return '<div class=\"simple-actions\">'\n          +'<a href=\"javascript:void(0)\" onClick=\"checkIn('+ row +')\" ><img src=\"assets/images/checkin-icon.svg\" width=\"20\" /> </a>'\n          +'</div>'\n        //}\n      },\n      renderer: columnrenderer\n    },{\n      text: 'Copy',\n      cellsalign: 'center', \n      align: 'center',\n      width: 120,\n      cellsrenderer: (row: number): string => {\n        let new_ = moment().format('DD/MM/YYYY');\n        let date = moment(this.visitorList.loadedData[row].expectedVisitorInTime).format('DD/MM/YYYY');\n        if(new_ != date) {\n          return '<div class=\"simple-actions\">'\n          +'<a href=\"javascript:void(0)\" onClick=\"copyWith('+ row +')\" >Copy Details</a>'\n          +'</div>'\n        }\n      },\n      renderer: columnrenderer\n    }];\n  }\n}\nfunction checkIn(row) {\n  var event = new CustomEvent('onCheckIn', {\n    detail: {\n        rowId: row\n    }\n  })\n  window.dispatchEvent(event);\n}\n(window as any).checkIn = checkIn;\n\nfunction copyWith(row){\n  var event = new CustomEvent('onCopyWith', {\n    detail: {\n        rowId: row\n    }\n  })\n  window.dispatchEvent(event);\n}\n(window as any).copyWith = copyWith;\n","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #27303f;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-crescent .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #404040;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #748694;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-light .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-light .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-orange .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #372558;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #6b698c;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-maroon .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #212121;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #64748b;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-blue .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #475569;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #ffffff;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #cfd8e3;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-dark .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .icon {\\n  width: 50px;\\n  height: 50px;\\n  border-radius: 4px !important;\\n  display: flex;\\n  background-color: #f1f5f9;\\n  margin: 0 14px 0 0;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n  width: 28px;\\n  height: 28px;\\n  min-width: 28px;\\n  min-height: 28px;\\n  font-size: 28px;\\n  line-height: 28px;\\n  color: #2f2f2f;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n  width: 28px;\\n  height: 28px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .icon {\\n    width: 45px;\\n    height: 45px;\\n  }\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .icon mat-icon {\\n    width: 24px;\\n    height: 24px;\\n    min-width: 24px;\\n    min-height: 24px;\\n    font-size: 24px;\\n    line-height: 24px;\\n  }\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .icon mat-icon svg {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .others mat-icon {\\n  width: 16px;\\n  height: 16px;\\n  min-width: 16px;\\n  min-height: 16px;\\n  font-size: 16px;\\n  line-height: 16px;\\n  margin: 0 6px 0 0;\\n  position: relative;\\n  top: 2px;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .others mat-icon svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n  width: 40px;\\n  height: 40px;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 40px !important;\\n  cursor: pointer;\\n  background-color: #06c987;\\n  margin: 0;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon {\\n  width: 18px;\\n  height: 18px;\\n  min-width: 18px;\\n  min-height: 18px;\\n  font-size: 18px;\\n  line-height: 18px;\\n  color: white;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .check .icon mat-icon svg {\\n  width: 18px;\\n  height: 18px;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .check .icon .svg {\\n  fill: white;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .check .icon {\\n    width: 36px;\\n    height: 36px;\\n    display: inline-flex;\\n    justify-content: center;\\n    align-items: center;\\n    border-radius: 36px !important;\\n  }\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n  margin-top: 20px;\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n  color: #54575d;\\n  font-size: 1.3rem;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .visitor-extras p {\\n    display: inline-block;\\n  }\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .visitor-extras p.right {\\n    float: right;\\n  }\\n}\\n.condo-theme-public .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n  padding-top: 16px;\\n}\\n@media (max-width: 767px) {\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .visitor-extras {\\n    margin-top: 12px;\\n  }\\n  .condo-theme-public .frequent-vendor-list-wrapper .visitor-item .visitor-extras .item {\\n    padding-top: 12px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","import { Component, OnInit, Injector, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { SessionService } from 'src/app/core/session/session.service';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { Subscription } from 'rxjs';\nimport { ConfirmDialogModel, CommonConfirmModalComponent } from 'src/app/shared/components/common-confirm-modal/common-confirm-modal.component';\n\n@Component({\n  selector: 'app-frequent-vendor-list',\n  templateUrl: './frequent-vendor-list.component.html',\n  styleUrls: ['./frequent-vendor-list.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class FrequentVendorListComponent implements OnInit {\n  @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent; \n  visitorList:any = [];\n  visitorSearch:string = '';\n  isVisitorDataLoaded:boolean;\n  modalService:any;\n  urlType:string;\n  apiSubscribe:Subscription;\n\n  ItemStartIndex: any = 0;\n  ItemEndIndex: any;\n  totalItems: any = 0;\n  itemLimit: any = 10;\n\n  timeZone:any;\n\n  constructor(\n    private router: Router,\n    private injector: Injector,\n    private visitorService:VisitorService,\n    private sessionService:SessionService,\n    public dialog: MatDialog,\n    private sharedService: SharedService,\n    private activeRouter: ActivatedRoute,\n  ) { \n    this.modalService = this.injector.get(ModalService);\n    this.activeRouter.url.subscribe((data)=>{\n      this.urlType = data[0].path;\n    })\n  }\n\n  get isAdmin() {\n    return this.sessionService.isAdmin();\n  }\n\n  navigateToCreate(){\n    if(this.urlType == 'frequent-visitor-list') \n     this.router.navigate(['frequent-visitor-create'],{relativeTo:this.activeRouter.parent});\n    else if(this.urlType == 'vendor-pass-list') \n      this.router.navigate(['vendor-pass-create'],{relativeTo:this.activeRouter.parent});\n  }\n\n  getDateTime(date) {\n    return moment(date).format('hh:mm A')\n  }\n\n  viewPass(id) {\n    if(this.urlType == 'frequent-visitor-list') \n      this.router.navigate(['confirm-expected-visitor', id, 'frequent'],{relativeTo: this.activeRouter.parent});\n    else if(this.urlType == 'vendor-pass-list') \n    this.router.navigate(['confirm-expected-visitor', id, 'vendor'],{relativeTo: this.activeRouter.parent});\n  }\n\n  getIndexParams(event){\n    this.ItemStartIndex = event.ItemStartIndex;\n    this.ItemEndIndex = event.ItemEndIndex;\n    this.itemLimit = event.itemLimit;\n  }\n\n  checkIn(item) {\n    const message = `Are you sure you want to Check In?`;\n    const dialogData = new ConfirmDialogModel(\"Confirm Action\", message);\n    const dialogRef = this.dialog.open(CommonConfirmModalComponent, {\n      panelClass: 'material-dialog-medium',\n      disableClose: true,\n      data: dialogData\n    });\n    dialogRef.afterClosed().subscribe(dialogResult => {\n      if (dialogResult) {\n        let pageAccess:string;\n        if(this.urlType == 'frequent-visitor-list') \n          pageAccess = 'frequent';\n        else if(this.urlType == 'vendor-pass-list') \n          pageAccess = 'vendor';\n        this.router.navigate([`checkin/${item.expectedVisitorId}`],{relativeTo:this.activeRouter.parent,queryParams : {access : pageAccess}});\n      }\n    });\n  }\n\n  editVisitor(expectedVisitorId){\n    this.router.navigate([`/user/visitor/expected-visitor/edit/${expectedVisitorId}`]);\n  }\n\n  deleteVisitor(id, index){\n    this.modalService.showConfirmModal({id:id,index:index});\n  }\n\n  getVendorPassList() {\n    this.isVisitorDataLoaded = false;\n    let param = {\n      apartmentId: this.sessionService.apartmentId,\n      fromDate: '',\n      toDate: '',\n    }\n    return this.visitorService.getAllDvYetToComeExpectedVisitorsByApartmentIdDate(param);\n  }\n\n  getFrequentVisitorList() {\n    this.isVisitorDataLoaded = false;\n    let param = {\n      apartmentId: this.sessionService.apartmentId,\n      fromDate: '',\n      toDate: '',\n    }\n    return this.visitorService.getAllFvYetToComeExpectedVisitorsByApartmentIdDate(param)\n  }\n\n  getVisitorList() {\n    let visitorList;\n    if(this.urlType == 'frequent-visitor-list') \n      visitorList = this.getFrequentVisitorList();\n    else if(this.urlType == 'vendor-pass-list') \n      visitorList = this.getVendorPassList();\n     \n    visitorList.subscribe((res:any) => {\n      if(res.length > 0) {\n        this.visitorList = res.reverse();\n        this.totalItems = this.visitorList.length;\n        if (this.totalItems > this.itemLimit) {\n          this.ItemEndIndex = this.itemLimit;\n        }\n        else {\n          this.ItemEndIndex = this.totalItems;\n        }\n        this.isVisitorDataLoaded = true;\n      }\n      else {\n        this.isVisitorDataLoaded = true;\n      }\n    },(error)=>{\n      this.isVisitorDataLoaded = true;\n      this.sharedService.openSnackBar('Server Error','error');\n    })\n  }\n\n  ngOnInit() {\n    this.sharedService.timezonecast.subscribe( timeZone => this.timeZone = timeZone );\n\n    this.getVisitorList();\n    \n    //delete expected visitor\n    this.apiSubscribe = this.sharedService.unitlistdeleteindexcast.subscribe( item => {\n\t\t\tif(item != null && item.id ) {\n        let params = {\n          expectedVisitorId: item.id,\n          deleteBy: this.sessionService.userId\n        }\n        this.visitorService.deleteExpectedVisitorById(params).subscribe((res: any) => {\n          if(res.message) {\n            this.sharedService.setUnitListDeleteIndex(null);\n            \n            this.visitorList = this.visitorList.filter( visitor => {\n              return visitor.expectedVisitorId != item.id\n            })\n\n            this.totalItems = this.visitorList.length;\n\n            if (this.totalItems > this.itemLimit) {\n              this.ItemEndIndex = this.itemLimit;\n            }\n            else {\n              this.ItemEndIndex = this.totalItems;\n            }\n\n            this.sharedService.openSnackBar(res.message,'success');\n          } else {\n            this.sharedService.openSnackBar(res.errorMessage,'error');\n          }\n        }, error => {\n          this.sharedService.openSnackBar('Server Error','error');\n        });\n\t\t\t}\n\t\t});\n  }\n\n  ngOnDestroy(){\n\t\tthis.apiSubscribe.unsubscribe();\n  }\n}\n ","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n@media (max-width: 991px) {\\n  .user-visitor-list-wrapper .table-header .button-name {\\n    display: none;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","import { Component, OnInit, Injector, HostListener, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { MatDialog } from '@angular/material/dialog';\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-user-visitor-list',\n  templateUrl: './user-visitor-list.component.html',\n  styleUrls: ['./user-visitor-list.component.scss']\n})\nexport class UserVisitorListComponent implements OnInit {\n  @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent; \n  columnData:any;\n  visitorList:any = [];\n  visitorSearch:string = '';\n  isVisitorDataLoaded:boolean;\n  totalItems:number;\n  modalService:any;\n  urlType:string;\n  apiSubscribe:Subscription;\n\n  constructor(\n    private router: Router,\n    private injector: Injector,\n    private visitorService:VisitorService,\n    private sessionService:SessionService,\n    public dialog: MatDialog,\n    private sharedService: SharedService,\n    private activeRouter: ActivatedRoute,\n  ) { \n    this.modalService = this.injector.get(ModalService);\n    this.activeRouter.url.subscribe((data)=>{\n      this.urlType = data[0].path;\n    })\n  }\n\n  isAdmin() {\n    return this.sessionService.isAdmin();\n  }\n\n  navigateToCreate(){\n    if(this.isAdmin())   \n      this.router.navigate(['/ams/visitor/info/create-expected-visitor']);\n    else \n      this.router.navigate(['/user/visitor/create-expected-visitor']);\n  }\n\n  getPrintParams(event) {\n    this.datagrid.exportdata(event, 'expectedVisitorData');\n  }\n\n  onGlSearchFilter(event) {\n    if(event != \"\"){\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = event;\n      let filtercondition = 'contains';\n      let filterData = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.operator = 'or';\n      filtergroup.addfilter(filter_or_operator, filterData);\n      this.datagrid.showfiltercolumnbackground(false);\n      this.columnData.forEach(item => {\n        if(item.datafield != 'Actions') {\n          this.datagrid.addfilter(item.datafield, filtergroup, true);\n        }\n      })\n      this.datagrid.applyfilters();\n    }\n    else {\n      this.datagrid.clearfilters();\n    }\n  }\n\n  getVisitorCheckedIn() {\n    this.isVisitorDataLoaded = false;\n    let param = {\n      apartmentId: this.sessionService.apartmentId,\n      BlockUnitId:  this.sessionService.apartmentBlockUnitID,\n    }\n    this.visitorService.getYetToCheckoutVisitorsByApartmentId(param).subscribe((res:any) => {\n      if(res.length > 0) {\n        let tableData = {\n          localdata: res.reverse(),\n          datatype: \"array\"\n        }\n        this.totalItems = tableData.localdata.length;\n        this.visitorList = new jqx.dataAdapter(tableData);\n      }\n      this.isVisitorDataLoaded = true;\n    },(error)=>{\n      this.isVisitorDataLoaded = true;\n    })\n  }\n\n  getVisitorHistory() {\n    this.isVisitorDataLoaded = false;\n    let param = {\n      ApartmentID: this.sessionService.apartmentId,\n    }\n    this.visitorService.getReportsForVisitorsCheckedInMultiFilter(param).subscribe((res:any) => {\n      if(res.length > 0) {\n        let tableData = {\n          localdata: res.reverse(),\n          datatype: \"array\"\n        }\n        this.totalItems = tableData.localdata.length;\n        this.visitorList = new jqx.dataAdapter(tableData);\n      }\n      this.isVisitorDataLoaded = true;\n    },(error)=>{\n      this.isVisitorDataLoaded = true;\n    })\n  }\n\n  ngOnInit() {\n    if(this.urlType == 'expected-visitor-user-checked-in')\n      this.getVisitorCheckedIn();\n    else if(this.urlType == 'expected-visitor-user-history')\n      this.getVisitorHistory();\n    var cellsrenderer = (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">' + value + '</div>';\n    }\n    var columnrenderer = (value) => {\n      return '<div style=\"padding: 14px\">' + value + '</div>';\n    }\n    this.columnData = [{\n      text: 'Id',\n      datafield: 'serialNo',\n      width: 80,\n      pinned: true,\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer\n    },{\n      text: 'Visitor Name',\n      datafield: 'visitorName',\n      minwidth: 200,\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer\n    },{\n      text: 'Phone Number',\n      datafield: 'visitorPhone',\n      cellsrenderer: cellsrenderer,\n      width: 220,\n      renderer: columnrenderer\n    },{\n      text: 'Visitor In Time',\n      datafield: 'visitorInTime',\n      cellsrenderer: (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">'+ moment(value).format(\"MM/DD/YY hh:mm\") +'</div>'\n      },\n      width: 240,\n      renderer: columnrenderer\n    },{\n      text: 'Visitor Out Time',\n      datafield: 'visitorOutTime',\n      cellsrenderer: (row, column, value) => {\n        if(value) {\n          return '<div class=\"jqx-custom-inner-cell\">'+ moment(value).format(\"MM/DD/YY hh:mm\") +'</div>'\n        } else {\n          return '<div class=\"jqx-custom-inner-cell\"></div>'\n        }\n      },\n      width: 240,\n      renderer: columnrenderer\n    },{\n      text: 'Visitor category',\n      datafield: 'visitorCategoryName',\n      cellsrenderer: cellsrenderer,\n      width: 240,\n      renderer: columnrenderer\n    }];\n    //delete expected visitor\n    this.apiSubscribe = this.sharedService.unitlistdeleteindexcast.subscribe( item => {\n\t\t\tif(item != null && item.id ) {\n        let params = {\n          expectedVisitorId: item.id,\n          deleteBy: this.sessionService.userId\n        }\n        this.visitorService.deleteExpectedVisitorById(params).subscribe((res: any) => {\n          if(res.message) {\n            this.sharedService.setUnitListDeleteIndex(null);\n            this.datagrid.deleterow(item.index);\n            this.datagrid.refresh();\n            this.sharedService.openSnackBar(res.message,'success');\n          } else {\n            this.sharedService.openSnackBar(res.errorMessage,'error');\n          }\n        }, error => {\n          console.log(error);\n        });\n\t\t\t}\n\t\t});\n  }\n\n  ngOnDestroy(){\n\t\tthis.apiSubscribe.unsubscribe();\n  }\n}\n\n","export default \".intl-tel-input {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9jb21tb24vdmlzaXRvci9jb21wb25lbnRzL3Zpc2l0b3ItY3JlYXRlLWNoZWNraW4vdmlzaXRvci1jcmVhdGUtY2hlY2tpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7QUFDSiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tbW9uL3Zpc2l0b3IvY29tcG9uZW50cy92aXNpdG9yLWNyZWF0ZS1jaGVja2luL3Zpc2l0b3ItY3JlYXRlLWNoZWNraW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaW50bC10ZWwtaW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xufSJdfQ== */\";","import { Component, OnInit, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef} from '@angular/core';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { ApartmentService } from 'src/app/api/controllers/Apartment';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { StaffService } from 'src/app/api/controllers/Staff';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SearchCountryField, CountryISO } from 'ngx-intl-tel-input';\nimport { CondoAnimations } from 'src/@condo/animations';\nimport { SharedService } from 'src/app/shared/services/shared.service';\n\n@Component({\n  selector: 'app-visitor-create-checkin',\n  templateUrl: './visitor-create-checkin.component.html',\n  styleUrls: ['./visitor-create-checkin.component.scss'],\n  encapsulation  : ViewEncapsulation.None,\n  animations   : CondoAnimations\n})\nexport class VisitorCreateCheckinComponent implements OnInit { \n  @ViewChild('visitorForm') form:any;\n  visitor:any = {};\n  expectedDurationInfo:string = '';\n  visitTypeList:any = [];\n  visitCategoryList:any = [];\n  towerList:any = [];\n  unitList:any = [];\n  staffsList:any = [];\n  block:any = {};\n  isDataLoaded:boolean = true;\n  urlType:string = 'create';\n  separateDialCode = true;\n  SearchCountryField = SearchCountryField;\n  CountryISO = CountryISO;\n  preferredCountries: CountryISO[] = [CountryISO.UnitedStates, CountryISO.UnitedKingdom];\n  message: any = null;\n  pageComingFrom:string;\n  constructor(\n    private apartmentService:ApartmentService,\n    private visitorService:VisitorService,\n    private lookupService: LookupService,\n    private sessionService:SessionService,\n    private staffService: StaffService,\n    private activateRouter: ActivatedRoute,\n    private router: Router,\n    private sharedService: SharedService,\n    private _changeDetectorRef: ChangeDetectorRef,\n  ) {\n    //check in and checkout edit\n    this.activateRouter.params.subscribe((param)=>{\n      if(param.id && param.type) {\n        this.isDataLoaded = false;\n        this.urlType = param.type;\n        let id = parseInt(param.id);\n        if(param.type == 'checkin')\n          this.checkInLogic(id);\n        else if(param.type == 'checkout' || param.type == 'edit') \n          this.checkoutLogic(id);\n      }\n    })\n    // Data Coming From\n    this.activateRouter.queryParams.subscribe((query=>{\n      if(query && query.access) {\n        this.pageComingFrom = query.access;\n      }\n    }))\n  }\n\n  checkInLogic(id) {\n    let visitor = {\n      expectedVisitorId : id\n    }\n    this.visitorService.getExpectedVisitorById(visitor).subscribe((res: any) => {\n      this.visitor.visitTypeId = res[0].visitTypeId;\n      this.visitor.apartmentUnitId = res[0].apartmentUnitId;\n      this.visitor.tomeetStaffId = res[0].tomeetStaffId;\n      this.visitor.visitorName = res[0].expectedVisitorName;\n      this.visitor.visitorCount = res[0].expectedVisitorCount;\n      this.visitor.visitorPhone = {\n        'number' : res[0].expectedVisitorPhone,\n        'countryCode' : res[0].phonecountrycode,\n      }\n      this.visitor.visitorInTime = moment(new Date());\n      this.visitor.visitorOutTime = res[0].expectedVisitorOutTime;\n      this.visitor.expectedDuration = res[0].expectedDuration;\n      this.visitor.expectedVisitorInTime = res[0].expectedVisitorInTime;\n      this.visitor.expectedVisitorOutTime = res[0].expectedVisitorOutTime;\n      this.visitor.passNumber = res[0].visitorPassId;\n      this.visitor.visitorPassId = res[0].visitorPassId;\n      this.visitor.visitorCategoryId = res[0].visitorCategoryId;\n      this.visitor.purpose = res[0].purpose;\n      this.visitor.expectedVisitorId = id;\n      this.expectedDurationChange();\n      if(this.visitor.apartmentUnitId) {\n        this.getTowers().then((res:any)=>{\n          if(res.length > 0) {\n            this.towerList = res;\n            this.getUnits('edit');\n          }\n        })\n      } else {\n        this.isDataLoaded = true;\n      }\n    },(error)=>{\n      this.sharedService.openSnackBar('Server Error','error');\n    })\n  }\n\n  checkoutLogic(id) {\n    let visitor = {\n      visitorId : id\n    }\n    this.visitorService.getVisitorById(visitor).subscribe((res: any) => {\n      this.visitor = res[0];\n      this.visitor.visitorPhone = {\n        'countryCode' : this.visitor.phonecountrycode,\n        'number' : this.visitor.visitorPhone\n      }\n      if(this.urlType == 'checkout')\n        this.visitor.visitorOutTime =  moment(new Date()).toISOString();\n      this.expectedDurationChange();\n      if(this.visitor.apartmentUnitId) {\n        this.getTowers().then((res:any)=>{\n          if(res.length > 0) {\n            this.towerList = res;\n            this.getUnits('edit');\n          }\n        })\n      } else {\n        this.isDataLoaded = true;\n      }\n    },(error)=>{\n      this.isDataLoaded = true;\n      this.sharedService.openSnackBar('Server Error','error');\n      this.router.navigate(['checkout'],{relativeTo:this.activateRouter.parent})\n    })\n  }\n\n  navigateBack() {\n    if(this.pageComingFrom == 'frequent') \n      this.router.navigate(['frequent-visitor-list'],{ relativeTo: this.activateRouter.parent });\n    else if(this.pageComingFrom == 'vendor')\n      this.router.navigate(['vendor-pass-list'],{ relativeTo: this.activateRouter.parent });\n    else if(this.pageComingFrom == 'expected')\n      this.router.navigate(['expected-visitor-list'],{ relativeTo: this.activateRouter.parent });\n    else if(this.urlType =='checkout'|| this.urlType=='edit')\n      this.router.navigate(['checkout'],{ relativeTo: this.activateRouter.parent });\n  }\n\n  disableField() {\n    if(this.urlType=='checkout' || this.urlType == 'edit')\n      return true;\n    else \n      return false;\n  }\n\n  setSelectedCategory(event){\n    this.visitor.visitorCategoryId = event[0].lookupValueId\n  }\n\n  setSelectedVisitType(event){\n    this.visitor.visitTypeId = event[0].lookupValueId;\n    this.visitor.apartmentUnitId = null;\n    this.visitor.tomeetStaffId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n  }\n\n  setSelectedBlock(event) {\n    this.block.blockId = event[0].block_Id\n    this.getUnits('change');\n  }\n\n  setSelectedBlockUnit(event){\n    this.visitor.apartmentUnitId = event[0].buId\n    this.getPrimaryName();\n  }\n\n  setSelectedStaff(event){\n    this.visitor.tomeetStaffId = event[0].staffId;\n    this.visitor.apartmentUnitId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n  }\n\n  getParticularBlockId() {\n    let unitDetails = {\n      apartmentBlockUnitId: this.visitor.apartmentUnitId,\n    };\n    return this.apartmentService.getApartmentBlockUnitById(unitDetails);\n  }\n\n  getTowers() {\n     let tower = {\n      apartmentId: this.sessionService.apartmentId\n    }\n    return this.apartmentService.getApartmentBlockAndBlockUnitIsLivingByApartmentId(tower).toPromise();\n  }\n\n  async getUnits(type) {\n    //Async await function integrated for checkin and checkout mode\n    if(type == 'change') {\n      this.visitor.apartmentUnitId = null;\n      this.block.primaryName = '';\n    } else {\n      //checkin or checkout mode\n      let tower:any = await this.getParticularBlockId().toPromise();\n      if(tower.length > 0)\n        this.block.blockId = tower[0].apartmentBlockId;\n    }\n    for(let data of this.towerList) {\n      if(this.block.blockId == data.block_Id) {\n        this.unitList = data.blockUnit;\n        if(type != 'change'){\n          this.getPrimaryName();\n          this.isDataLoaded = true;\n        }\n        break;\n      }\n    }\n  }\n\n  getPrimaryName() {\n    for(let data of this.unitList) {\n      if(this.visitor.apartmentUnitId == data.buId) {\n        this.block.primaryName = data.il_Label;\n        break;\n      }\n    }\n  }\n\n  expectedDurationChange() {\n    if(this.visitor.visitorInTime && this.visitor.expectedVisitorOutTime) {\n      let inDate = moment(this.visitor.visitorInTime);\n      let outDate = moment(this.visitor.expectedVisitorOutTime);\n      let diffDuration = moment.duration(outDate.diff(inDate));\n      this.expectedDurationInfo = diffDuration.days()+\" days \"+this.isSingleDigit(diffDuration.hours())+\":\"+ this.isSingleDigit(diffDuration.minutes())+\" hours\";\n      let hours = diffDuration.asHours();\n      this.visitor.expectedDuration = Math.round(hours);\n    }\n  }\n\n  isSingleDigit(digit){\n    if(digit <= 0){\n      return '00';\n    } else {\n      return (digit.toString().length > 1) ? digit : '0'+digit;\n    }\n  }\n\n  resetField() {\n    this.visitor={};\n    this.visitor.visitorInTime = moment(new Date());\n    this.visitor.visitTypeId = null;\n    this.visitor.visitorCategoryId = null;\n    this.block = {\n      blockId:null,\n      primaryName:''\n    }\n    this.expectedDurationInfo='';\n  }\n\n  createCheckIn() {\n    this.message = null;\n    if(!this.form.valid){\n      window.scroll({\n        top: 0,\n        behavior: 'smooth'\n      });\n      // Show the validation message\n      this.message = {\n        appearance: 'outline',\n        content   : \"Fill the Required Fields\",\n        shake     : true,\n        showIcon  : true,\n        type      : 'error'\n      };\n      //Mark for check\n      this._changeDetectorRef.markForCheck();\n    } else {\n      this.isDataLoaded = false;\n      let params = {\n        visitor : {\n          ...this.visitor,\n          \"apartmentId\" : this.sessionService.apartmentId,\n          \"visitorPhone\": this.visitor.visitorPhone.number,\n          \"phonecountrycode\": this.visitor.visitorPhone.countryCode,\n          \"isCheckedIn\" : true,\n          \"isCheckedOut\": false,\n          \"isActive\": true,\n          \"insertedBy\": this.sessionService.userId,\n          \"insertedOn\": _moment().toISOString(),\n          \"updatedBy\": null,\n          \"updatedOn\": null,\n          \"expectedVisitorId\": this.visitor.expectedVisitorId,\n          \"expectedVisitorInTime\": this.visitor.expectedVisitorInTime,\n          \"expectedVisitorOutTime\": this.visitor.expectedVisitorOutTime,\n          \"expectedVisitorDuration\": null,\n  \n          \"enteredBy\": parseInt(this.sessionService.userId),\n          \"visitorVehicleTypeId\": null,\n          \"visitorVehicleNumber\": \"string\",\n          \"visitingPlaceId\": null,\n          \"meetingPersonId\": 1,\n          \"meetingPersonName\": \"string\",\n          \"visitorsOrg\": \"string\",\n          \"entryGateId\": null,\n          \"exitGateId\": null,\n        }\n      }\n      this.visitorService.addVisitor(params).subscribe((res:any) => {\n        this.isDataLoaded = true;\n        if(res.message) {\n          this.sharedService.openSnackBar('Visitor Checked IN','success');\n          this.router.navigate(['checkout'],{ relativeTo: this.activateRouter.parent });\n        } else {\n          this.sharedService.openSnackBar(res.errorMessage,'error');\n        }\n      })\n    }\n  }\n\n  updateCheckIn() {\n    this.message = null;\n    if(!this.form.valid){\n      window.scroll({\n        top: 0,\n        behavior: 'smooth'\n      });\n      // Show the validation message\n      this.message = {\n        appearance: 'outline',\n        content   : \"Fill the Required Fields\",\n        shake     : true,\n        showIcon  : true,\n        type      : 'error'\n      };\n      //Mark for check\n      this._changeDetectorRef.markForCheck();\n    } else {\n      this.isDataLoaded = false;\n      let params = {\n        visitor : {...this.visitor,\n          \"visitorPhone\": this.visitor.visitorPhone.number,\n          \"phonecountrycode\": this.visitor.visitorPhone.countryCode,\n        }\n      }\n      this.visitorService.updateVisitor(params).subscribe((res:any) => {\n        this.isDataLoaded = true;\n        if(res.message) {\n          this.sharedService.openSnackBar(res.message,'success');\n          this.router.navigate(['checkout'],{ relativeTo: this.activateRouter.parent });\n        } else {\n          this.sharedService.openSnackBar(res.errorMessage,'error');\n        }\n      })\n    }\n  }\n\n  createCheckOut() {\n    this.isDataLoaded = true;\n    let visitorDetails = {\n      \"visitorId\": this.visitor.visitorId,\n      \"checkOutTime\": this.visitor.visitorOutTime,\n      \"updatedBy\": this.sessionService.userId,\n    }\n    this.visitorService.checkOutVisitor(visitorDetails).subscribe((res: any) => {\n      if(res.message) {\n        this.sharedService.openSnackBar(res.message,'success');\n        this.router.navigate(['history'],{ relativeTo: this.activateRouter.parent });\n      } else {\n        this.sharedService.openSnackBar(res.errorMessage,'error');\n      }\n      this.isDataLoaded = false;\n    })\n  }\n\n  ngOnInit() {\n    //visit type\n    let visitParams = {\n      ApartmentId: this.sessionService.apartmentId,\n      LookupTypeId: 15\n    }\n    this.lookupService.getLookupValueByLookupTypeId(visitParams).subscribe((res:any) => {\n      this.visitTypeList = res;\n    });\n    //TowerList\n    if(this.urlType == 'create') {\n      this.resetField();\n      this.getTowers().then((res:any)=>{\n        if(res.length > 0) {\n          this.towerList = res;\n        }\n      })\n    }\n    // Staffs List\n    let staffParms = {\n      apartmentId: this.sessionService.apartmentId,\n      RoleTypeId: this.sessionService.roleTypeId\n    }\n    this.staffService.getAllStaffs(staffParms).subscribe((res:any) => {\n      this.staffsList = res;;\n    });\n    //Visit Category\n    let visitCategoryParams = {\n      ApartmentId: this.sessionService.apartmentId,\n      LookupTypeId: this.pageComingFrom == 'frequent' ? 202 : 100\n    }\n    this.lookupService.getLookupValueByLookupTypeId(visitCategoryParams).subscribe((res:any) => {\n      this.visitCategoryList = res\n    });\n  }\n}","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n@media (max-width: 991px) {\\n  .table-header .button-name {\\n    display: none;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AYW5ndWxhci9tYXRlcmlhbC9fdGhlbWluZy5zY3NzIiwic3JjL0Bjb25kby9zdHlsZXMvdXRpbGl0aWVzL19taXhpbnMuc2NzcyIsInNyYy9hcHAvbW9kdWxlcy9jb21tb24vdmlzaXRvci9jb21wb25lbnRzL3Zpc2l0b3ItaGlzdG9yeS92aXNpdG9yLWhpc3RvcnkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMnREQSxtQ0FBQTtBQWdKQSx5REFBQTtBQTZYQSx5REFBQTtBQTR6REEsMkNBQUE7QUF3Q0EscUJBQUE7QUM3N0hNO0VDN0lGO0lBRVEsYUFBQTtFQUlWO0FBQ0YiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL2NvbW1vbi92aXNpdG9yL2NvbXBvbmVudHMvdmlzaXRvci1oaXN0b3J5L3Zpc2l0b3ItaGlzdG9yeS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZm9yIHdoaWNoIGFsbCBpbXBvcnRzIGFyZSByZXNvbHZlZCBhbmQgYnVuZGxlZC4gVGhpcyBpcyB0aGUgZW50cnktcG9pbnQgZm9yXG4vLyB0aGUgYEBhbmd1bGFyL21hdGVyaWFsYCB0aGVtaW5nIFNhc3MgYnVuZGxlLiBTZWUgYC8vc3JjL21hdGVyaWFsOnRoZW1pbmdfYnVuZGxlYC5cblxuLy8gSW1wb3J0IGFsbCB0aGUgdGhlbWluZyBmdW5jdGlvbmFsaXR5LlxuLy8gV2Ugd2FudCBvdmVybGF5cyB0byBhbHdheXMgYXBwZWFyIG92ZXIgdXNlciBjb250ZW50LCBzbyBzZXQgYSBiYXNlbGluZVxuLy8gdmVyeSBoaWdoIHotaW5kZXggZm9yIHRoZSBvdmVybGF5IGNvbnRhaW5lciwgd2hpY2ggaXMgd2hlcmUgd2UgY3JlYXRlIHRoZSBuZXdcbi8vIHN0YWNraW5nIGNvbnRleHQgZm9yIGFsbCBvdmVybGF5cy5cbiRjZGstei1pbmRleC1vdmVybGF5LWNvbnRhaW5lcjogMTAwMCAhZGVmYXVsdDtcbiRjZGstei1pbmRleC1vdmVybGF5OiAxMDAwICFkZWZhdWx0O1xuJGNkay16LWluZGV4LW92ZXJsYXktYmFja2Ryb3A6IDEwMDAgIWRlZmF1bHQ7XG5cbi8vIEJhY2tncm91bmQgY29sb3IgZm9yIGFsbCBvZiB0aGUgYmFja2Ryb3BzXG4kY2RrLW92ZXJsYXktZGFyay1iYWNrZHJvcC1iYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzIpICFkZWZhdWx0O1xuXG4vLyBEZWZhdWx0IGJhY2tkcm9wIGFuaW1hdGlvbiBpcyBiYXNlZCBvbiB0aGUgTWF0ZXJpYWwgRGVzaWduIHN3aWZ0LWVhc2Utb3V0LlxuJGJhY2tkcm9wLWFuaW1hdGlvbi1kdXJhdGlvbjogNDAwbXMgIWRlZmF1bHQ7XG4kYmFja2Ryb3AtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjUsIDAuOCwgMC4yNSwgMSkgIWRlZmF1bHQ7XG5cblxuQG1peGluIGNkay1vdmVybGF5KCkge1xuICAuY2RrLW92ZXJsYXktY29udGFpbmVyLCAuY2RrLWdsb2JhbC1vdmVybGF5LXdyYXBwZXIge1xuICAgIC8vIERpc2FibGUgZXZlbnRzIGZyb20gYmVpbmcgY2FwdHVyZWQgb24gdGhlIG92ZXJsYXkgY29udGFpbmVyLlxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG4gICAgLy8gVGhlIGNvbnRhaW5lciBzaG91bGQgYmUgdGhlIHNpemUgb2YgdGhlIHZpZXdwb3J0LlxuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIC8vIFRoZSBvdmVybGF5LWNvbnRhaW5lciBpcyBhbiBpbnZpc2libGUgZWxlbWVudCB3aGljaCBjb250YWlucyBhbGwgaW5kaXZpZHVhbCBvdmVybGF5cy5cbiAgLmNkay1vdmVybGF5LWNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6ICRjZGstei1pbmRleC1vdmVybGF5LWNvbnRhaW5lcjtcblxuICAgICY6ZW1wdHkge1xuICAgICAgLy8gSGlkZSB0aGUgZWxlbWVudCB3aGVuIGl0IGRvZXNuJ3QgaGF2ZSBhbnkgY2hpbGQgbm9kZXMuIFRoaXMgZG9lc24ndFxuICAgICAgLy8gaW5jbHVkZSBvdmVybGF5cyB0aGF0IGhhdmUgYmVlbiBkZXRhY2hlZCwgcmF0aGVyIHRoYW4gZGlzcG9zZWQuXG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdlIHVzZSBhbiBleHRyYSB3cmFwcGVyIGVsZW1lbnQgaW4gb3JkZXIgdG8gdXNlIG1ha2UgdGhlIG92ZXJsYXkgaXRzZWxmIGEgZmxleCBpdGVtLlxuICAvLyBUaGlzIG1ha2VzIGNlbnRlcmluZyB0aGUgb3ZlcmxheSBlYXN5IHdpdGhvdXQgcnVubmluZyBpbnRvIHRoZSBzdWJwaXhlbCByZW5kZXJpbmdcbiAgLy8gcHJvYmxlbXMgdGllZCB0byB1c2luZyBgdHJhbnNmb3JtYCBhbmQgd2l0aG91dCBpbnRlcmZlcmluZyB3aXRoIHRoZSBvdGhlciBwb3NpdGlvblxuICAvLyBzdHJhdGVnaWVzLlxuICAuY2RrLWdsb2JhbC1vdmVybGF5LXdyYXBwZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHotaW5kZXg6ICRjZGstei1pbmRleC1vdmVybGF5O1xuICB9XG5cbiAgLy8gQSBzaW5nbGUgb3ZlcmxheSBwYW5lLlxuICAuY2RrLW92ZXJsYXktcGFuZSB7XG4gICAgLy8gTm90ZTogaXQncyBpbXBvcnRhbnQgZm9yIHRoaXMgb25lIHRvIHN0YXJ0IG9mZiBgYWJzb2x1dGVgLFxuICAgIC8vIGluIG9yZGVyIGZvciB1cyB0byBiZSBhYmxlIHRvIG1lYXN1cmUgaXQgY29ycmVjdGx5LlxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHotaW5kZXg6ICRjZGstei1pbmRleC1vdmVybGF5O1xuXG4gICAgLy8gRm9yIGNvbm5lY3RlZC1wb3NpdGlvbiBvdmVybGF5cywgd2Ugc2V0IGBkaXNwbGF5OiBmbGV4YCBpblxuICAgIC8vIG9yZGVyIHRvIGZvcmNlIGBtYXgtd2lkdGhgIGFuZCBgbWF4LWhlaWdodGAgdG8gdGFrZSBlZmZlY3QuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgbWF4LWhlaWdodDogMTAwJTtcbiAgfVxuXG4gIC5jZGstb3ZlcmxheS1iYWNrZHJvcCB7XG4gICAgLy8gVE9ETyhqZWxib3Vybik6IHJldXNlIHNpZGVuYXYgZnVsbHNjcmVlbiBtaXhpbi5cbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuXG4gICAgei1pbmRleDogJGNkay16LWluZGV4LW92ZXJsYXktYmFja2Ryb3A7XG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5ICRiYWNrZHJvcC1hbmltYXRpb24tZHVyYXRpb24gJGJhY2tkcm9wLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb247XG4gICAgb3BhY2l0eTogMDtcblxuICAgICYuY2RrLW92ZXJsYXktYmFja2Ryb3Atc2hvd2luZyB7XG4gICAgICBvcGFjaXR5OiAxO1xuXG4gICAgICAvLyBJbiBoaWdoIGNvbnRyYXN0IG1vZGUgdGhlIHJnYmEgYmFja2dyb3VuZCB3aWxsIGJlY29tZSBzb2xpZCBzbyB3ZSBuZWVkIHRvIGZhbGwgYmFja1xuICAgICAgLy8gdG8gbWFraW5nIGl0IG9wYXF1ZSB1c2luZyBgb3BhY2l0eWAuIE5vdGUgdGhhdCB3ZSBjYW4ndCB1c2UgdGhlIGBjZGstaGlnaC1jb250cmFzdGBcbiAgICAgIC8vIG1peGluLCBiZWNhdXNlIHdlIGNhbid0IG5vcm1hbGl6ZSB0aGUgaW1wb3J0IHBhdGggdG8gdGhlIF9hMTF5LnNjc3MgYm90aCBmb3IgdGhlXG4gICAgICAvLyBzb3VyY2UgYW5kIHdoZW4gdGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkLiBTZWUgIzEwOTA4LlxuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpIHtcbiAgICAgICAgb3BhY2l0eTogMC42O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5jZGstb3ZlcmxheS1kYXJrLWJhY2tkcm9wIHtcbiAgICBiYWNrZ3JvdW5kOiAkY2RrLW92ZXJsYXktZGFyay1iYWNrZHJvcC1iYWNrZ3JvdW5kO1xuICB9XG5cbiAgLmNkay1vdmVybGF5LXRyYW5zcGFyZW50LWJhY2tkcm9wIHtcbiAgICAvLyBOb3RlOiBhcyBvZiBGaXJlZm94IDU3LCBoYXZpbmcgdGhlIGJhY2tkcm9wIGJlIGBiYWNrZ3JvdW5kOiBub25lYCB3aWxsIHByZXZlbnQgaXQgZnJvbVxuICAgIC8vIGNhcHR1cmluZyB0aGUgdXNlcidzIG1vdXNlIHNjcm9sbCBldmVudHMuIFNpbmNlIHdlIGFsc28gY2FuJ3QgdXNlIHNvbWV0aGluZyBsaWtlXG4gICAgLy8gYHJnYmEoMCwgMCwgMCwgMClgLCB3ZSB3b3JrIGFyb3VuZCB0aGUgaW5jb25zaXN0ZW5jeSBieSBub3Qgc2V0dGluZyB0aGUgYmFja2dyb3VuZCBhdFxuICAgIC8vIGFsbCBhbmQgdXNpbmcgYG9wYWNpdHlgIHRvIG1ha2UgdGhlIGVsZW1lbnQgdHJhbnNwYXJlbnQuXG4gICAgJiwgJi5jZGstb3ZlcmxheS1iYWNrZHJvcC1zaG93aW5nIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuICB9XG5cbiAgLy8gT3ZlcmxheSBwYXJlbnQgZWxlbWVudCB1c2VkIHdpdGggdGhlIGNvbm5lY3RlZCBwb3NpdGlvbiBzdHJhdGVneS4gVXNlZCB0byBjb25zdHJhaW4gdGhlXG4gIC8vIG92ZXJsYXkgZWxlbWVudCdzIHNpemUgdG8gZml0IHdpdGhpbiB0aGUgdmlld3BvcnQuXG4gIC5jZGstb3ZlcmxheS1jb25uZWN0ZWQtcG9zaXRpb24tYm91bmRpbmctYm94IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgei1pbmRleDogJGNkay16LWluZGV4LW92ZXJsYXk7XG5cbiAgICAvLyBXZSB1c2UgYGRpc3BsYXk6IGZsZXhgIG9uIHRoaXMgZWxlbWVudCBleGNsdXNpdmVseSBmb3IgY2VudGVyaW5nIGNvbm5lY3RlZCBvdmVybGF5cy5cbiAgICAvLyBXaGVuICpub3QqIGNlbnRlcmluZywgYSB0b3AvbGVmdC9ib3R0b20vcmlnaHQgd2lsbCBiZSBzZXQgd2hpY2ggb3ZlcnJpZGVzIHRoZSBub3JtYWxcbiAgICAvLyBmbGV4IGxheW91dC5cbiAgICBkaXNwbGF5OiBmbGV4O1xuXG4gICAgLy8gV2UgdXNlIHRoZSBgY29sdW1uYCBkaXJlY3Rpb24gaGVyZSB0byBhdm9pZCBzb21lIGZsZXhib3ggaXNzdWVzIGluIEVkZ2VcbiAgICAvLyB3aGVuIHVzaW5nIHRoZSBcImdyb3cgYWZ0ZXIgb3BlblwiIG9wdGlvbnMuXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgIC8vIEFkZCBzb21lIGRpbWVuc2lvbnMgc28gdGhlIGVsZW1lbnQgaGFzIGFuIGBpbm5lclRleHRgIHdoaWNoIHNvbWUgcGVvcGxlIGRlcGVuZCBvbiBpbiB0ZXN0cy5cbiAgICBtaW4td2lkdGg6IDFweDtcbiAgICBtaW4taGVpZ2h0OiAxcHg7XG4gIH1cblxuICAvLyBVc2VkIHdoZW4gZGlzYWJsaW5nIGdsb2JhbCBzY3JvbGxpbmcuXG4gIC5jZGstZ2xvYmFsLXNjcm9sbGJsb2NrIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG5cbiAgICAvLyBOZWNlc3NhcnkgZm9yIHRoZSBjb250ZW50IG5vdCB0byBsb3NlIGl0cyB3aWR0aC4gTm90ZSB0aGF0IHdlJ3JlIHVzaW5nIDEwMCUsIGluc3RlYWQgb2ZcbiAgICAvLyAxMDB2dywgYmVjYXVzZSAxMDB2dyBpbmNsdWRlcyB0aGUgd2lkdGggcGx1cyB0aGUgc2Nyb2xsYmFyLCB3aGVyZWFzIDEwMCUgaXMgdGhlIHdpZHRoXG4gICAgLy8gdGhhdCB0aGUgZWxlbWVudCBoYWQgYmVmb3JlIHdlIG1hZGUgaXQgYGZpeGVkYC5cbiAgICB3aWR0aDogMTAwJTtcblxuICAgIC8vIE5vdGU6IHRoaXMgd2lsbCBhbHdheXMgYWRkIGEgc2Nyb2xsYmFyIHRvIHdoYXRldmVyIGVsZW1lbnQgaXQgaXMgb24sIHdoaWNoIGNhblxuICAgIC8vIHBvdGVudGlhbGx5IHJlc3VsdCBpbiBkb3VibGUgc2Nyb2xsYmFycy4gSXQgc2hvdWxkbid0IGJlIGFuIGlzc3VlLCBiZWNhdXNlIHdlIHdvbid0XG4gICAgLy8gYmxvY2sgc2Nyb2xsaW5nIG9uIGEgcGFnZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhIHNjcm9sbGJhciBpbiB0aGUgZmlyc3QgcGxhY2UuXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICB9XG59XG5cbkBtaXhpbiBjZGstYTExeSB7XG4gIC5jZGstdmlzdWFsbHktaGlkZGVuIHtcbiAgICBib3JkZXI6IDA7XG4gICAgY2xpcDogcmVjdCgwIDAgMCAwKTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IC0xcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMXB4O1xuXG4gICAgLy8gQXZvaWQgYnJvd3NlcnMgcmVuZGVyaW5nIHRoZSBmb2N1cyByaW5nIGluIHNvbWUgY2FzZXMuXG4gICAgb3V0bGluZTogMDtcblxuICAgIC8vIEF2b2lkIHNvbWUgY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIgd2lsbCBzdGlsbCByZW5kZXIgdGhlIG5hdGl2ZSBjb250cm9scyAoc2VlICM5MDQ5KS5cbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuICB9XG59XG5cbi8vLyBFbWl0cyB0aGUgbWl4aW4ncyBjb250ZW50IG5lc3RlZCB1bmRlciBgJHNlbGVjdG9yLWNvbnRleHRgIGlmIGAkc2VsZWN0b3ItY29udGV4dGBcbi8vLyBpcyBub24tZW1wdHkuXG4vLy8gQHBhcmFtIHNlbGVjdG9yLWNvbnRleHQgVGhlIHNlbGVjdG9yIHVuZGVyIHdoaWNoIHRvIG5lc3QgdGhlIG1peGluJ3MgY29udGVudC5cbkBtaXhpbiBfY2RrLW9wdGlvbmFsbHktbmVzdC1jb250ZW50KCRzZWxlY3Rvci1jb250ZXh0KSB7XG4gIEBpZiAoJHNlbGVjdG9yLWNvbnRleHQgPT0gJycpIHtcbiAgICBAY29udGVudDtcbiAgfVxuICBAZWxzZSB7XG4gICAgI3skc2VsZWN0b3ItY29udGV4dH0ge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbi8vLyBBcHBsaWVzIHN0eWxlcyBmb3IgdXNlcnMgaW4gaGlnaCBjb250cmFzdCBtb2RlLiBOb3RlIHRoYXQgdGhpcyBvbmx5IGFwcGxpZXNcbi8vLyB0byBNaWNyb3NvZnQgYnJvd3NlcnMuIENocm9tZSBjYW4gYmUgaW5jbHVkZWQgYnkgY2hlY2tpbmcgZm9yIHRoZSBgaHRtbFtoY11gXG4vLy8gYXR0cmlidXRlLCBob3dldmVyIENocm9tZSBoYW5kbGVzIGhpZ2ggY29udHJhc3QgZGlmZmVyZW50bHkuXG4vLy9cbi8vLyBAcGFyYW0gdGFyZ2V0IFdoaWNoIGtpbmQgb2YgaGlnaCBjb250cmFzdCBzZXR0aW5nIHRvIHRhcmdldC4gRGVmYXVsdHMgdG8gYGFjdGl2ZWAsIGNhbiBiZVxuLy8vICAgIGB3aGl0ZS1vbi1ibGFja2Agb3IgYGJsYWNrLW9uLXdoaXRlYC5cbi8vLyBAcGFyYW0gZW5jYXBzdWxhdGlvbiBXaGV0aGVyIHRvIGVtaXQgc3R5bGVzIGZvciB2aWV3IGVuY2Fwc3VsYXRpb24uIFZhbHVlcyBhcmU6XG4vLy8gICAgICogYG9uYCAtIHdvcmtzIGZvciBgRW11bGF0ZWRgLCBgTmF0aXZlYCwgYW5kIGBTaGFkb3dEb21gXG4vLy8gICAgICogYG9mZmAgLSB3b3JrcyBmb3IgYE5vbmVgXG4vLy8gICAgICogYGFueWAgLSB3b3JrcyBmb3IgYWxsIGVuY2Fwc3VsYXRpb24gbW9kZXMgYnkgZW1pdHRpbmcgdGhlIENTUyB0d2ljZSAoZGVmYXVsdCkuXG5AbWl4aW4gY2RrLWhpZ2gtY29udHJhc3QoJHRhcmdldDogYWN0aXZlLCAkZW5jYXBzdWxhdGlvbjogJ2FueScpIHtcbiAgQGlmICgkdGFyZ2V0ICE9ICdhY3RpdmUnIGFuZCAkdGFyZ2V0ICE9ICdibGFjay1vbi13aGl0ZScgYW5kICR0YXJnZXQgIT0gJ3doaXRlLW9uLWJsYWNrJykge1xuICAgIEBlcnJvciAnVW5rbm93biBjZGstaGlnaC1jb250cmFzdCB2YWx1ZSBcIiN7JHRhcmdldH1cIiBwcm92aWRlZC4gJyArXG4gICAgICAgICAgICdBbGxvd2VkIHZhbHVlcyBhcmUgXCJhY3RpdmVcIiwgXCJibGFjay1vbi13aGl0ZVwiLCBhbmQgXCJ3aGl0ZS1vbi1ibGFja1wiJztcbiAgfVxuXG4gIEBpZiAoJGVuY2Fwc3VsYXRpb24gIT0gJ29uJyBhbmQgJGVuY2Fwc3VsYXRpb24gIT0gJ29mZicgYW5kICRlbmNhcHN1bGF0aW9uICE9ICdhbnknKSB7XG4gICAgQGVycm9yICdVbmtub3duIGNkay1oaWdoLWNvbnRyYXN0IGVuY2Fwc3VsYXRpb24gXCIjeyRlbmNhcHN1bGF0aW9ufVwiIHByb3ZpZGVkLiAnICtcbiAgICAgICAgICAgJ0FsbG93ZWQgdmFsdWVzIGFyZSBcIm9uXCIsIFwib2ZmXCIsIGFuZCBcImFueVwiJztcbiAgfVxuXG4gIC8vIElmIHRoZSBzZWxlY3RvciBjb250ZXh0IGhhcyBtdWx0aXBsZSBwYXJ0cywgc3VjaCBhcyBgLnNlY3Rpb24sIC5yZWdpb25gLCBqdXN0IGRvaW5nXG4gIC8vIGAuY2RrLWhpZ2gtY29udHJhc3QteHh4ICN7Jn1gIHdpbGwgb25seSBhcHBseSB0aGUgcGFyZW50IHNlbGVjdG9yIHRvIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZVxuICAvLyBjb250ZXh0LiBXZSBhZGRyZXNzIHRoaXMgYnkgbmVzdGluZyB0aGUgc2VsZWN0b3IgY29udGV4dCB1bmRlciAuY2RrLWhpZ2gtY29udHJhc3QuXG4gIEBhdC1yb290IHtcbiAgICAkc2VsZWN0b3ItY29udGV4dDogI3smfTtcblxuICAgIEBpZiAoJGVuY2Fwc3VsYXRpb24gIT0gJ29uJykge1xuICAgICAgLmNkay1oaWdoLWNvbnRyYXN0LSN7JHRhcmdldH0ge1xuICAgICAgICBAaW5jbHVkZSBfY2RrLW9wdGlvbmFsbHktbmVzdC1jb250ZW50KCRzZWxlY3Rvci1jb250ZXh0KSB7XG4gICAgICAgICAgQGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgKCRlbmNhcHN1bGF0aW9uICE9ICdvZmYnKSB7XG4gICAgICAuY2RrLWhpZ2gtY29udHJhc3QtI3skdGFyZ2V0fSA6aG9zdCB7XG4gICAgICAgIEBpbmNsdWRlIF9jZGstb3B0aW9uYWxseS1uZXN0LWNvbnRlbnQoJHNlbGVjdG9yLWNvbnRleHQpIHtcbiAgICAgICAgICBAY29udGVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBDb3JlIHN0eWxlcyB0aGF0IGVuYWJsZSBtb25pdG9yaW5nIGF1dG9maWxsIHN0YXRlIG9mIHRleHQgZmllbGRzLlxuQG1peGluIGNkay10ZXh0LWZpZWxkIHtcbiAgLy8gS2V5ZnJhbWVzIHRoYXQgYXBwbHkgbm8gc3R5bGVzLCBidXQgYWxsb3cgdXMgdG8gbW9uaXRvciB3aGVuIGFuIHRleHQgZmllbGQgYmVjb21lcyBhdXRvZmlsbGVkXG4gIC8vIGJ5IHdhdGNoaW5nIGZvciB0aGUgYW5pbWF0aW9uIGV2ZW50cyB0aGF0IGFyZSBmaXJlZCB3aGVuIHRoZXkgc3RhcnQuIE5vdGU6IHRoZSAvKiEqLyBjb21tZW50IGlzXG4gIC8vIG5lZWRlZCB0byBwcmV2ZW50IExpYlNhc3MgZnJvbSBzdHJpcHBpbmcgdGhlIGtleWZyYW1lcyBvdXQuXG4gIC8vIEJhc2VkIG9uOiBodHRwczovL21lZGl1bS5jb20vQGJydW5uL2RldGVjdGluZy1hdXRvZmlsbGVkLWZpZWxkcy1pbi1qYXZhc2NyaXB0LWFlZDU5OGQyNWRhN1xuICBAa2V5ZnJhbWVzIGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLXN0YXJ0IHsvKiEqL31cbiAgQGtleWZyYW1lcyBjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1lbmQgey8qISovfVxuXG4gIC5jZGstdGV4dC1maWVsZC1hdXRvZmlsbC1tb25pdG9yZWQ6LXdlYmtpdC1hdXRvZmlsbCB7XG4gICAgLy8gU2luY2UgQ2hyb21lIDgwIHdlIG5lZWQgYSAxbXMgZGVsYXksIG9yIHRoZSBhbmltYXRpb25zdGFydCBldmVudCB3b24ndCBmaXJlLlxuICAgIGFuaW1hdGlvbjogY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtc3RhcnQgMHMgMW1zO1xuICB9XG5cbiAgLmNkay10ZXh0LWZpZWxkLWF1dG9maWxsLW1vbml0b3JlZDpub3QoOi13ZWJraXQtYXV0b2ZpbGwpIHtcbiAgICAvLyBTaW5jZSBDaHJvbWUgODAgd2UgbmVlZCBhIDFtcyBkZWxheSwgb3IgdGhlIGFuaW1hdGlvbnN0YXJ0IGV2ZW50IHdvbid0IGZpcmUuXG4gICAgYW5pbWF0aW9uOiBjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1lbmQgMHMgMW1zO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHRoZSByZXNpemUgaGFuZGxlIG9uIGF1dG9zaXppbmcgdGV4dGFyZWFzLCBiZWNhdXNlIHdoYXRldmVyIGhlaWdodFxuICAvLyB0aGUgdXNlciByZXNpemVkIHRvIHdpbGwgYmUgb3ZlcndyaXR0ZW4gb25jZSB0aGV5IHN0YXJ0IHR5cGluZyBhZ2Fpbi5cbiAgdGV4dGFyZWEuY2RrLXRleHRhcmVhLWF1dG9zaXplIHtcbiAgICByZXNpemU6IG5vbmU7XG4gIH1cblxuICAvLyBUaGlzIGNsYXNzIGlzIHRlbXBvcmFyaWx5IGFwcGxpZWQgdG8gdGhlIHRleHRhcmVhIHdoZW4gaXQgaXMgYmVpbmcgbWVhc3VyZWQuIEl0IGlzIGltbWVkaWF0ZWx5XG4gIC8vIHJlbW92ZWQgd2hlbiBtZWFzdXJpbmcgaXMgY29tcGxldGUuIFdlIHVzZSBgIWltcG9ydGFudGAgcnVsZXMgaGVyZSB0byBtYWtlIHN1cmUgdXNlci1zcGVjaWZpZWRcbiAgLy8gcnVsZXMgZG8gbm90IGludGVyZmVyZSB3aXRoIHRoZSBtZWFzdXJlbWVudC5cbiAgdGV4dGFyZWEuY2RrLXRleHRhcmVhLWF1dG9zaXplLW1lYXN1cmluZyB7XG4gICAgQGluY2x1ZGUgX2Nkay10ZXh0YXJlYS1hdXRvc2l6ZS1tZWFzdXJpbmctYmFzZTtcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcbiAgICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIH1cblxuICAvLyBTaW1pbGFyIHRvIHRoZSBgY2RrLXRleHRhcmVhLWF1dG9zaXplLW1lYXN1cmluZ2AgY2xhc3MsIGJ1dCBvbmx5IGFwcGxpZWQgb24gRmlyZWZveC4gV2UgbmVlZFxuICAvLyB0byB1c2UgdGhpcyBjbGFzcywgYmVjYXVzZSBGaXJlZm94IGhhcyBhIGJ1ZyB3aGVyZSBjaGFuZ2luZyB0aGUgYG92ZXJmbG93YCBicmVha3MgdGhlIHVzZXInc1xuICAvLyBhYmlsaXR5IHRvIHVuZG8vcmVkbyB3aGF0IHRoZXkgd2VyZSB0eXBpbmcgKHNlZSAjMTY2MjkpLiBUaGlzIGNsYXNzIGlzIG9ubHkgc2NvcGVkIHRvIEZpcmVmb3gsXG4gIC8vIGJlY2F1c2UgdGhlIG1lYXN1cmVtZW50cyB0aGVyZSBkb24ndCBzZWVtIHRvIGJlIGFmZmVjdGVkIGJ5IHRoZSBgaGVpZ2h0OiAwYCwgd2hlcmVhcyBvbiBvdGhlclxuICAvLyBicm93c2VycyB0aGV5IGFyZSwgZS5nLiBDaHJvbWUgZGV0ZWN0cyBsb25nZXIgdGV4dCBhbmQgSUUgZG9lcyd0IHJlc2l6ZSBiYWNrIHRvIG5vcm1hbC5cbiAgLy8gSWRlbnRpY2FsIGlzc3VlIHJlcG9ydDogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDQ4Nzg0XG4gIHRleHRhcmVhLmNkay10ZXh0YXJlYS1hdXRvc2l6ZS1tZWFzdXJpbmctZmlyZWZveCB7XG4gICAgQGluY2x1ZGUgX2Nkay10ZXh0YXJlYS1hdXRvc2l6ZS1tZWFzdXJpbmctYmFzZTtcbiAgICBoZWlnaHQ6IDAgIWltcG9ydGFudDtcbiAgfVxufVxuXG5AbWl4aW4gX2Nkay10ZXh0YXJlYS1hdXRvc2l6ZS1tZWFzdXJpbmctYmFzZSB7XG4gIC8vIEhhdmluZyAycHggdG9wIGFuZCBib3R0b20gcGFkZGluZyBzZWVtcyB0byBmaXggYSBidWcgd2hlcmUgQ2hyb21lIGdldHMgYW4gaW5jb3JyZWN0XG4gIC8vIG1lYXN1cmVtZW50LiBXZSBqdXN0IGhhdmUgdG8gYWNjb3VudCBmb3IgaXQgbGF0ZXIgYW5kIHN1YnRyYWN0IGl0IG9mZiB0aGUgZmluYWwgcmVzdWx0LlxuICBwYWRkaW5nOiAycHggMCAhaW1wb3J0YW50O1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveCAhaW1wb3J0YW50O1xufVxuXG4vLyBVc2VkIHRvIGdlbmVyYXRlIFVJRHMgZm9yIGtleWZyYW1lcyB1c2VkIHRvIGNoYW5nZSB0aGUgdGV4dCBmaWVsZCBhdXRvZmlsbCBzdHlsZXMuXG4kY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtY29sb3ItZnJhbWUtY291bnQ6IDA7XG5cbi8vIE1peGluIHVzZWQgdG8gYXBwbHkgY3VzdG9tIGJhY2tncm91bmQgYW5kIGZvcmVncm91bmQgY29sb3JzIHRvIGFuIGF1dG9maWxsZWQgdGV4dCBmaWVsZC5cbi8vIEJhc2VkIG9uOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNzgxNTQ5L1xuLy8gcmVtb3ZpbmctaW5wdXQtYmFja2dyb3VuZC1jb2xvdXItZm9yLWNocm9tZS1hdXRvY29tcGxldGUjYW5zd2VyLTM3NDMyMjYwXG5AbWl4aW4gY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtY29sb3IoJGJhY2tncm91bmQsICRmb3JlZ3JvdW5kOicnKSB7XG4gIEBrZXlmcmFtZXMgY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtY29sb3ItI3skY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtY29sb3ItZnJhbWUtY291bnR9IHtcbiAgICB0byB7XG4gICAgICBiYWNrZ3JvdW5kOiAkYmFja2dyb3VuZDtcbiAgICAgIEBpZiAkZm9yZWdyb3VuZCAhPSAnJyB7IGNvbG9yOiAkZm9yZWdyb3VuZDsgfVxuICAgIH1cbiAgfVxuXG4gICY6LXdlYmtpdC1hdXRvZmlsbCB7XG4gICAgYW5pbWF0aW9uOiBjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1jb2xvci0jeyRjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1jb2xvci1mcmFtZS1jb3VudH0gYm90aDtcbiAgfVxuXG4gICYuY2RrLXRleHQtZmllbGQtYXV0b2ZpbGwtbW9uaXRvcmVkOi13ZWJraXQtYXV0b2ZpbGwge1xuICAgIC8vIFNpbmNlIENocm9tZSA4MCB3ZSBuZWVkIGEgMW1zIGRlbGF5IGZvciBjZGstdGV4dC1maWVsZC1hdXRvZmlsbC1zdGFydCwgb3IgdGhlIGFuaW1hdGlvbnN0YXJ0XG4gICAgLy8gZXZlbnQgd29uJ3QgZmlyZS5cbiAgICBhbmltYXRpb246IGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLXN0YXJ0IDBzIDFtcyxcbiAgICAgICAgICAgICAgIGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yLSN7JGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yLWZyYW1lLWNvdW50fSBib3RoO1xuICB9XG5cbiAgJGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yLWZyYW1lLWNvdW50OlxuICAgICAgJGNkay10ZXh0LWZpZWxkLWF1dG9maWxsLWNvbG9yLWZyYW1lLWNvdW50ICsgMSAhZ2xvYmFsO1xufVxuXG5cbi8vIENvcmUgc3R5bGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXBwbHkgbWF0ZXJpYWwgZGVzaWduIHRyZWF0bWVudHMgdG8gYW55IGVsZW1lbnQuXG4vLyBNZWRpYSBxdWVyaWVzXG4vLyBUT0RPKGpvc2VwaHBlcnJvdHQpOiBDaGFuZ2UgJG1hdC14c21hbGwgYW5kICRtYXQtc21hbGwgdXNhZ2VzIHRvIHJlbHkgb24gQnJlYWtwb2ludE9ic2VydmVyLFxuJG1hdC14c21hbGw6ICdtYXgtd2lkdGg6IDU5OXB4JztcbiRtYXQtc21hbGw6ICdtYXgtd2lkdGg6IDk1OXB4JztcblxuLy8gVE9ETzogUmV2aXNpdCBhbGwgei1pbmRpY2VzIGJlZm9yZSBiZXRhXG4vLyB6LWluZGV4IG1hc3RlciBsaXN0XG5cbiR6LWluZGV4LWZhYjogMjAgIWRlZmF1bHQ7XG4kei1pbmRleC1kcmF3ZXI6IDEwMCAhZGVmYXVsdDtcblxuLy8gR2xvYmFsIGNvbnN0YW50c1xuJHBpOiAzLjE0MTU5MjY1O1xuXG4vLyBQYWRkaW5nIGJldHdlZW4gaW5wdXQgdG9nZ2xlcyBhbmQgdGhlaXIgbGFiZWxzXG4kbWF0LXRvZ2dsZS1wYWRkaW5nOiA4cHggIWRlZmF1bHQ7XG4vLyBXaWR0aCBhbmQgaGVpZ2h0IG9mIGlucHV0IHRvZ2dsZXNcbiRtYXQtdG9nZ2xlLXNpemU6IDIwcHggIWRlZmF1bHQ7XG5cbi8vIEVhc2luZyBDdXJ2ZXNcbi8vIFRPRE8oamVsYm91cm4pOiBhbGwgb2YgdGhlc2UgbmVlZCB0byBiZSByZXZpc2l0ZWRcblxuLy8gVGhlIGRlZmF1bHQgYW5pbWF0aW9uIGN1cnZlcyB1c2VkIGJ5IG1hdGVyaWFsIGRlc2lnbi5cbiRtYXQtbGluZWFyLW91dC1zbG93LWluLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMC4xKSAhZGVmYXVsdDtcbiRtYXQtZmFzdC1vdXQtc2xvdy1pbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSkgIWRlZmF1bHQ7XG4kbWF0LWZhc3Qtb3V0LWxpbmVhci1pbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIDAsIDEsIDEpICFkZWZhdWx0O1xuXG4kZWFzZS1pbi1vdXQtY3VydmUtZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM1LCAwLCAwLjI1LCAxKSAhZGVmYXVsdDtcblxuJHN3aWZ0LWVhc2Utb3V0LWR1cmF0aW9uOiA0MDBtcyAhZGVmYXVsdDtcbiRzd2lmdC1lYXNlLW91dC10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuMjUsIDEpICFkZWZhdWx0O1xuJHN3aWZ0LWVhc2Utb3V0OiBhbGwgJHN3aWZ0LWVhc2Utb3V0LWR1cmF0aW9uICRzd2lmdC1lYXNlLW91dC10aW1pbmctZnVuY3Rpb24gIWRlZmF1bHQ7XG5cbiRzd2lmdC1lYXNlLWluLWR1cmF0aW9uOiAzMDBtcyAhZGVmYXVsdDtcbiRzd2lmdC1lYXNlLWluLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNTUsIDAsIDAuNTUsIDAuMikgIWRlZmF1bHQ7XG4kc3dpZnQtZWFzZS1pbjogYWxsICRzd2lmdC1lYXNlLWluLWR1cmF0aW9uICRzd2lmdC1lYXNlLWluLXRpbWluZy1mdW5jdGlvbiAhZGVmYXVsdDtcblxuJHN3aWZ0LWVhc2UtaW4tb3V0LWR1cmF0aW9uOiA1MDBtcyAhZGVmYXVsdDtcbiRzd2lmdC1lYXNlLWluLW91dC10aW1pbmctZnVuY3Rpb246ICRlYXNlLWluLW91dC1jdXJ2ZS1mdW5jdGlvbiAhZGVmYXVsdDtcbiRzd2lmdC1lYXNlLWluLW91dDogYWxsICRzd2lmdC1lYXNlLWluLW91dC1kdXJhdGlvbiAkc3dpZnQtZWFzZS1pbi1vdXQtdGltaW5nLWZ1bmN0aW9uICFkZWZhdWx0O1xuXG4kc3dpZnQtbGluZWFyLWR1cmF0aW9uOiA4MG1zICFkZWZhdWx0O1xuJHN3aWZ0LWxpbmVhci10aW1pbmctZnVuY3Rpb246IGxpbmVhciAhZGVmYXVsdDtcbiRzd2lmdC1saW5lYXI6IGFsbCAkc3dpZnQtbGluZWFyLWR1cmF0aW9uICRzd2lmdC1saW5lYXItdGltaW5nLWZ1bmN0aW9uICFkZWZhdWx0O1xuXG5cblxuLy8gQSBjb2xsZWN0aW9uIG9mIG1peGlucyBhbmQgQ1NTIGNsYXNzZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBhcHBseSBlbGV2YXRpb24gdG8gYSBtYXRlcmlhbFxuLy8gZWxlbWVudC5cbi8vIFNlZTogaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vZW52aXJvbm1lbnQvZWxldmF0aW9uLmh0bWxcbi8vIEV4YW1wbGVzOlxuLy9cbi8vXG4vLyAubWF0LWZvbyB7XG4vLyAgIEBpbmNsdWRlICRtYXQtZWxldmF0aW9uKDIpO1xuLy9cbi8vICAgJjphY3RpdmUge1xuLy8gICAgIEBpbmNsdWRlICRtYXQtZWxldmF0aW9uKDgpO1xuLy8gICB9XG4vLyB9XG4vL1xuLy8gPGRpdiBpZD1cImV4dGVybmFsLWNhcmRcIiBjbGFzcz1cIm1hdC1lbGV2YXRpb24tejJcIj48cD5Tb21lIGNvbnRlbnQ8L3A+PC9kaXY+XG4vL1xuLy8gRm9yIGFuIGV4cGxhbmF0aW9uIG9mIHRoZSBkZXNpZ24gYmVoaW5kIGhvdyBlbGV2YXRpb24gaXMgaW1wbGVtZW50ZWQsIHNlZSB0aGUgZGVzaWduIGRvYyBhdFxuLy8gaHR0cHM6Ly9nb28uZ2wvS3EwazlaLlxuXG4vLyBDb2xvcnMgZm9yIHVtYnJhLCBwZW51bWJyYSwgYW5kIGFtYmllbnQgc2hhZG93cy4gQXMgZGVzY3JpYmVkIGluIHRoZSBkZXNpZ24gZG9jLCBlYWNoIGVsZXZhdGlvblxuLy8gbGV2ZWwgaXMgY3JlYXRlZCB1c2luZyBhIHNldCBvZiAzIHNoYWRvdyB2YWx1ZXMsIG9uZSBmb3IgdW1icmEgKHRoZSBzaGFkb3cgcmVwcmVzZW50aW5nIHRoZVxuLy8gc3BhY2UgY29tcGxldGVseSBvYnNjdXJlZCBieSBhbiBvYmplY3QgcmVsYXRpdmUgdG8gaXRzIGxpZ2h0IHNvdXJjZSksIG9uZSBmb3IgcGVudW1icmEgKHRoZVxuLy8gc3BhY2UgcGFydGlhbGx5IG9ic2N1cmVkIGJ5IGFuIG9iamVjdCksIGFuZCBvbmUgZm9yIGFtYmllbnQgKHRoZSBzcGFjZSB3aGljaCBjb250YWlucyB0aGUgb2JqZWN0XG4vLyBpdHNlbGYpLiBGb3IgYSBmdXJ0aGVyIGV4cGxhbmF0aW9uIG9mIHRoZXNlIHRlcm1zIGFuZCB0aGVpciBtZWFuaW5ncywgc2VlXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VbWJyYSxfcGVudW1icmFfYW5kX2FudHVtYnJhLlxuXG4vLyBNYXBzIGZvciB0aGUgZGlmZmVyZW50IHNoYWRvdyBzZXRzIGFuZCB0aGVpciB2YWx1ZXMgd2l0aGluIGVhY2ggei1zcGFjZS4gVGhlc2UgdmFsdWVzIHdlcmVcbi8vIGNyZWF0ZWQgYnkgdGFraW5nIGEgZmV3IHJlZmVyZW5jZSBzaGFkb3cgc2V0cyBjcmVhdGVkIGJ5IEdvb2dsZSdzIERlc2lnbmVycyBhbmQgaW50ZXJwb2xhdGluZ1xuLy8gYWxsIG9mIHRoZSB2YWx1ZXMgYmV0d2VlbiB0aGVtLlxuXG5AZnVuY3Rpb24gX2dldC11bWJyYS1tYXAoJGNvbG9yLCAkb3BhY2l0eSkge1xuICAkc2hhZG93LWNvbG9yOiBpZih0eXBlLW9mKCRjb2xvcikgPT0gY29sb3IsIHJnYmEoJGNvbG9yLCAkb3BhY2l0eSAqIDAuMiksICRjb2xvcik7XG5cbiAgQHJldHVybiAoXG4gICAgMDogJzBweCAwcHggMHB4IDBweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxOiAnMHB4IDJweCAxcHggLTFweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyOiAnMHB4IDNweCAxcHggLTJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAzOiAnMHB4IDNweCAzcHggLTJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA0OiAnMHB4IDJweCA0cHggLTFweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA1OiAnMHB4IDNweCA1cHggLTFweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA2OiAnMHB4IDNweCA1cHggLTFweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA3OiAnMHB4IDRweCA1cHggLTJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA4OiAnMHB4IDVweCA1cHggLTNweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA5OiAnMHB4IDVweCA2cHggLTNweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxMDogJzBweCA2cHggNnB4IC0zcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTE6ICcwcHggNnB4IDdweCAtNHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDEyOiAnMHB4IDdweCA4cHggLTRweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxMzogJzBweCA3cHggOHB4IC00cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTQ6ICcwcHggN3B4IDlweCAtNHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE1OiAnMHB4IDhweCA5cHggLTVweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNjogJzBweCA4cHggMTBweCAtNXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE3OiAnMHB4IDhweCAxMXB4IC01cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTg6ICcwcHggOXB4IDExcHggLTVweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxOTogJzBweCA5cHggMTJweCAtNnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIwOiAnMHB4IDEwcHggMTNweCAtNnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIxOiAnMHB4IDEwcHggMTNweCAtNnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIyOiAnMHB4IDEwcHggMTRweCAtNnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIzOiAnMHB4IDExcHggMTRweCAtN3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDI0OiAnMHB4IDExcHggMTVweCAtN3B4ICN7JHNoYWRvdy1jb2xvcn0nXG4gICk7XG59XG5cbkBmdW5jdGlvbiBfZ2V0LXBlbnVtYnJhLW1hcCgkY29sb3IsICRvcGFjaXR5KSB7XG4gICRzaGFkb3ctY29sb3I6IGlmKHR5cGUtb2YoJGNvbG9yKSA9PSBjb2xvciwgcmdiYSgkY29sb3IsICRvcGFjaXR5ICogMC4xNCksICRjb2xvcik7XG5cbiAgQHJldHVybiAoXG4gICAgMDogJzBweCAwcHggMHB4IDBweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxOiAnMHB4IDFweCAxcHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDI6ICcwcHggMnB4IDJweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMzogJzBweCAzcHggNHB4IDBweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICA0OiAnMHB4IDRweCA1cHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDU6ICcwcHggNXB4IDhweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNjogJzBweCA2cHggMTBweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNzogJzBweCA3cHggMTBweCAxcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgODogJzBweCA4cHggMTBweCAxcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgOTogJzBweCA5cHggMTJweCAxcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTA6ICcwcHggMTBweCAxNHB4IDFweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxMTogJzBweCAxMXB4IDE1cHggMXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDEyOiAnMHB4IDEycHggMTdweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTM6ICcwcHggMTNweCAxOXB4IDJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNDogJzBweCAxNHB4IDIxcHggMnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE1OiAnMHB4IDE1cHggMjJweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTY6ICcwcHggMTZweCAyNHB4IDJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNzogJzBweCAxN3B4IDI2cHggMnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE4OiAnMHB4IDE4cHggMjhweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTk6ICcwcHggMTlweCAyOXB4IDJweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMDogJzBweCAyMHB4IDMxcHggM3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIxOiAnMHB4IDIxcHggMzNweCAzcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjI6ICcwcHggMjJweCAzNXB4IDNweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMzogJzBweCAyM3B4IDM2cHggM3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDI0OiAnMHB4IDI0cHggMzhweCAzcHggI3skc2hhZG93LWNvbG9yfSdcbiAgKTtcbn1cblxuQGZ1bmN0aW9uIF9nZXQtYW1iaWVudC1tYXAoJGNvbG9yLCAkb3BhY2l0eSkge1xuICAkc2hhZG93LWNvbG9yOiBpZih0eXBlLW9mKCRjb2xvcikgPT0gY29sb3IsIHJnYmEoJGNvbG9yLCAkb3BhY2l0eSAqIDAuMTIpLCAkY29sb3IpO1xuXG4gIEByZXR1cm4gKFxuICAgIDA6ICcwcHggMHB4IDBweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTogJzBweCAxcHggM3B4IDBweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyOiAnMHB4IDFweCA1cHggMHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDM6ICcwcHggMXB4IDhweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNDogJzBweCAxcHggMTBweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNTogJzBweCAxcHggMTRweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNjogJzBweCAxcHggMThweCAwcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgNzogJzBweCAycHggMTZweCAxcHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgODogJzBweCAzcHggMTRweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgOTogJzBweCAzcHggMTZweCAycHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTA6ICcwcHggNHB4IDE4cHggM3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDExOiAnMHB4IDRweCAyMHB4IDNweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxMjogJzBweCA1cHggMjJweCA0cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTM6ICcwcHggNXB4IDI0cHggNHB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE0OiAnMHB4IDVweCAyNnB4IDRweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxNTogJzBweCA2cHggMjhweCA1cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTY6ICcwcHggNnB4IDMwcHggNXB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDE3OiAnMHB4IDZweCAzMnB4IDVweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAxODogJzBweCA3cHggMzRweCA2cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMTk6ICcwcHggN3B4IDM2cHggNnB4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIwOiAnMHB4IDhweCAzOHB4IDdweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyMTogJzBweCA4cHggNDBweCA3cHggI3skc2hhZG93LWNvbG9yfScsXG4gICAgMjI6ICcwcHggOHB4IDQycHggN3B4ICN7JHNoYWRvdy1jb2xvcn0nLFxuICAgIDIzOiAnMHB4IDlweCA0NHB4IDhweCAjeyRzaGFkb3ctY29sb3J9JyxcbiAgICAyNDogJzBweCA5cHggNDZweCA4cHggI3skc2hhZG93LWNvbG9yfSdcbiAgKTtcbn1cblxuLy8gVGhlIGRlZmF1bHQgZHVyYXRpb24gdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiRtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tZHVyYXRpb246IDI4MG1zICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBlYXNpbmcgdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiRtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkbWF0LWZhc3Qtb3V0LXNsb3ctaW4tdGltaW5nLWZ1bmN0aW9uO1xuXG4vLyBUaGUgZGVmYXVsdCBjb2xvciBmb3IgZWxldmF0aW9uIHNoYWRvd3MuXG4kbWF0LWVsZXZhdGlvbi1jb2xvcjogYmxhY2sgIWRlZmF1bHQ7XG5cbi8vIFRoZSBkZWZhdWx0IG9wYWNpdHkgc2NhbGluZyB2YWx1ZSBmb3IgZWxldmF0aW9uIHNoYWRvd3MuXG4kbWF0LWVsZXZhdGlvbi1vcGFjaXR5OiAxICFkZWZhdWx0O1xuXG4vLyBQcmVmaXggZm9yIGVsZXZhdGlvbi1yZWxhdGVkIHNlbGVjdG9ycy5cbiRfbWF0LWVsZXZhdGlvbi1wcmVmaXg6ICdtYXQtZWxldmF0aW9uLXonO1xuXG4vLyBBcHBsaWVzIHRoZSBjb3JyZWN0IGNzcyBydWxlcyB0byBhbiBlbGVtZW50IHRvIGdpdmUgaXQgdGhlIGVsZXZhdGlvbiBzcGVjaWZpZWQgYnkgJHpWYWx1ZS5cbi8vIFRoZSAkelZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNC5cbkBtaXhpbiBtYXQtZWxldmF0aW9uKCR6VmFsdWUsICRjb2xvcjogJG1hdC1lbGV2YXRpb24tY29sb3IsICRvcGFjaXR5OiAkbWF0LWVsZXZhdGlvbi1vcGFjaXR5KSB7XG4gIEBpZiB0eXBlLW9mKCR6VmFsdWUpICE9IG51bWJlciBvciBub3QgdW5pdGxlc3MoJHpWYWx1ZSkge1xuICAgIEBlcnJvciAnJHpWYWx1ZSBtdXN0IGJlIGEgdW5pdGxlc3MgbnVtYmVyJztcbiAgfVxuICBAaWYgJHpWYWx1ZSA8IDAgb3IgJHpWYWx1ZSA+IDI0IHtcbiAgICBAZXJyb3IgJyR6VmFsdWUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDI0JztcbiAgfVxuXG4gIGJveC1zaGFkb3c6ICN7bWFwLWdldChfZ2V0LXVtYnJhLW1hcCgkY29sb3IsICRvcGFjaXR5KSwgJHpWYWx1ZSl9LFxuICAgICAgICAgICAgICAje21hcC1nZXQoX2dldC1wZW51bWJyYS1tYXAoJGNvbG9yLCAkb3BhY2l0eSksICR6VmFsdWUpfSxcbiAgICAgICAgICAgICAgI3ttYXAtZ2V0KF9nZXQtYW1iaWVudC1tYXAoJGNvbG9yLCAkb3BhY2l0eSksICR6VmFsdWUpfTtcbn1cblxuQG1peGluIF9tYXQtdGhlbWUtZWxldmF0aW9uKCR6VmFsdWUsICRjb25maWcsICRvcGFjaXR5OiAkbWF0LWVsZXZhdGlvbi1vcGFjaXR5KSB7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkZWxldmF0aW9uLWNvbG9yOiBtYXAtZ2V0KCRmb3JlZ3JvdW5kLCBlbGV2YXRpb24pO1xuICAkZWxldmF0aW9uLWNvbG9yLW9yLWRlZmF1bHQ6IGlmKCRlbGV2YXRpb24tY29sb3IgPT0gbnVsbCwgJG1hdC1lbGV2YXRpb24tY29sb3IsICRlbGV2YXRpb24tY29sb3IpO1xuXG4gIEBpbmNsdWRlIG1hdC1lbGV2YXRpb24oJHpWYWx1ZSwgJGVsZXZhdGlvbi1jb2xvci1vci1kZWZhdWx0LCAkb3BhY2l0eSk7XG59XG5cbi8vIEFwcGxpZXMgdGhlIGVsZXZhdGlvbiB0byBhbiBlbGVtZW50IGluIGEgbWFubmVyIHRoYXQgYWxsb3dzXG4vLyBjb25zdW1lcnMgdG8gb3ZlcnJpZGUgaXQgdmlhIHRoZSBNYXRlcmlhbCBlbGV2YXRpb24gY2xhc3Nlcy5cbkBtaXhpbiBtYXQtb3ZlcnJpZGFibGUtZWxldmF0aW9uKFxuICAgICR6VmFsdWUsXG4gICAgJGNvbG9yOiAkbWF0LWVsZXZhdGlvbi1jb2xvcixcbiAgICAkb3BhY2l0eTogJG1hdC1lbGV2YXRpb24tb3BhY2l0eSkge1xuICAmOm5vdChbY2xhc3MqPScjeyRfbWF0LWVsZXZhdGlvbi1wcmVmaXh9J10pIHtcbiAgICBAaW5jbHVkZSBtYXQtZWxldmF0aW9uKCR6VmFsdWUsICRjb2xvciwgJG9wYWNpdHkpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbigkelZhbHVlLCAkY29uZmlnLCAkb3BhY2l0eTogJG1hdC1lbGV2YXRpb24tb3BhY2l0eSkge1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGVsZXZhdGlvbi1jb2xvcjogbWFwLWdldCgkZm9yZWdyb3VuZCwgZWxldmF0aW9uKTtcbiAgJGVsZXZhdGlvbi1jb2xvci1vci1kZWZhdWx0OiBpZigkZWxldmF0aW9uLWNvbG9yID09IG51bGwsICRtYXQtZWxldmF0aW9uLWNvbG9yLCAkZWxldmF0aW9uLWNvbG9yKTtcblxuICBAaW5jbHVkZSBtYXQtb3ZlcnJpZGFibGUtZWxldmF0aW9uKCR6VmFsdWUsICRlbGV2YXRpb24tY29sb3Itb3ItZGVmYXVsdCwgJG9wYWNpdHkpO1xufVxuXG4vLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGZvciBhIHRyYW5zaXRpb24gcHJvcGVydHkgZm9yIGVsZXZhdGlvbi5cbi8vIENhbGxpbmcgdGhpcyBmdW5jdGlvbiBkaXJlY3RseSBpcyB1c2VmdWwgaW4gc2l0dWF0aW9ucyB3aGVyZSBhIGNvbXBvbmVudCBuZWVkcyB0byB0cmFuc2l0aW9uXG4vLyBtb3JlIHRoYW4gb25lIHByb3BlcnR5LlxuLy9cbi8vIC5mb28ge1xuLy8gICB0cmFuc2l0aW9uOiBtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tcHJvcGVydHktdmFsdWUoKSwgb3BhY2l0eSAxMDBtcyBlYXNlO1xuLy8gfVxuQGZ1bmN0aW9uIG1hdC1lbGV2YXRpb24tdHJhbnNpdGlvbi1wcm9wZXJ0eS12YWx1ZShcbiAgICAkZHVyYXRpb246ICRtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tZHVyYXRpb24sXG4gICAgJGVhc2luZzogJG1hdC1lbGV2YXRpb24tdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24pIHtcbiAgQHJldHVybiBib3gtc2hhZG93ICN7JGR1cmF0aW9ufSAjeyRlYXNpbmd9O1xufVxuXG4vLyBBcHBsaWVzIHRoZSBjb3JyZWN0IGNzcyBydWxlcyBuZWVkZWQgdG8gaGF2ZSBhbiBlbGVtZW50IHRyYW5zaXRpb24gYmV0d2VlbiBlbGV2YXRpb25zLlxuLy8gVGhpcyBtaXhpbiBzaG91bGQgYmUgYXBwbGllZCB0byBlbGVtZW50cyB3aG9zZSBlbGV2YXRpb24gdmFsdWVzIHdpbGwgY2hhbmdlIGRlcGVuZGluZyBvbiB0aGVpclxuLy8gY29udGV4dCAoZS5nLiB3aGVuIGFjdGl2ZSBvciBkaXNhYmxlZCkuXG4vL1xuLy8gTk9URSh0cmF2aXNrYXVmbWFuKTogQm90aCB0aGlzIG1peGluIGFuZCB0aGUgYWJvdmUgZnVuY3Rpb24gdXNlIGRlZmF1bHQgcGFyYW1ldGVycyBzbyB0aGV5IGNhblxuLy8gYmUgdXNlZCBpbiB0aGUgc2FtZSB3YXkgYnkgY2xpZW50cy5cbkBtaXhpbiBtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24oXG4gICAgJGR1cmF0aW9uOiAkbWF0LWVsZXZhdGlvbi10cmFuc2l0aW9uLWR1cmF0aW9uLFxuICAgICRlYXNpbmc6ICRtYXQtZWxldmF0aW9uLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uKSB7XG4gIHRyYW5zaXRpb246IG1hdC1lbGV2YXRpb24tdHJhbnNpdGlvbi1wcm9wZXJ0eS12YWx1ZSgkZHVyYXRpb24sICRlYXNpbmcpO1xufVxuXG4vLyBDb2xvciBwYWxldHRlcyBmcm9tIHRoZSBNYXRlcmlhbCBEZXNpZ24gc3BlYy5cbi8vIFNlZSBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9jb2xvci9cbi8vXG4vLyBDb250cmFzdCBjb2xvcnMgYXJlIGhhcmQtY29kZWQgYmVjYXVzZSBpdCBpcyB0b28gZGlmZmljdWx0IChwcm9iYWJseSBpbXBvc3NpYmxlKSB0b1xuLy8gY2FsY3VsYXRlIHRoZW0uIFRoZXNlIGNvbnRyYXN0IGNvbG9ycyBhcmUgcHVsbGVkIGZyb20gdGhlIHB1YmxpYyBNYXRlcmlhbCBEZXNpZ24gc3BlYyBzd2F0Y2hlcy5cbi8vIFdoaWxlIHRoZSBjb250cmFzdCBjb2xvcnMgaW4gdGhlIHNwZWMgYXJlIG5vdCBwcmVzY3JpcHRpdmUsIHdlIHVzZSB0aGVtIGZvciBjb252ZW5pZW5jZS5cblxuXG4vLyBAZGVwcmVjYXRlZCByZW5hbWVkIHRvICRkYXJrLXByaW1hcnktdGV4dC5cbi8vIEBicmVha2luZy1jaGFuZ2UgOC4wLjBcbiRibGFjay04Ny1vcGFjaXR5OiByZ2JhKGJsYWNrLCAwLjg3KTtcbi8vIEBkZXByZWNhdGVkIHJlbmFtZWQgdG8gJGxpZ2h0LXByaW1hcnktdGV4dC5cbi8vIEBicmVha2luZy1jaGFuZ2UgOC4wLjBcbiR3aGl0ZS04Ny1vcGFjaXR5OiByZ2JhKHdoaXRlLCAwLjg3KTtcbi8vIEBkZXByZWNhdGVkIHVzZSAkZGFyay1bc2Vjb25kYXJ5LXRleHQsZGlzYWJsZWQtdGV4dCxkaXZpZGVycyxmb2N1c2VkXSBpbnN0ZWFkLlxuLy8gQGJyZWFraW5nLWNoYW5nZSA4LjAuMFxuJGJsYWNrLTEyLW9wYWNpdHk6IHJnYmEoYmxhY2ssIDAuMTIpO1xuLy8gQGRlcHJlY2F0ZWQgdXNlICRsaWdodC1bc2Vjb25kYXJ5LXRleHQsZGlzYWJsZWQtdGV4dCxkaXZpZGVycyxmb2N1c2VkXSBpbnN0ZWFkLlxuLy8gQGJyZWFraW5nLWNoYW5nZSA4LjAuMFxuJHdoaXRlLTEyLW9wYWNpdHk6IHJnYmEod2hpdGUsIDAuMTIpO1xuLy8gQGRlcHJlY2F0ZWQgdXNlICRkYXJrLVtzZWNvbmRhcnktdGV4dCxkaXNhYmxlZC10ZXh0LGRpdmlkZXJzLGZvY3VzZWRdIGluc3RlYWQuXG4vLyBAYnJlYWtpbmctY2hhbmdlIDguMC4wXG4kYmxhY2stNi1vcGFjaXR5OiByZ2JhKGJsYWNrLCAwLjA2KTtcbi8vIEBkZXByZWNhdGVkIHVzZSAkbGlnaHQtW3NlY29uZGFyeS10ZXh0LGRpc2FibGVkLXRleHQsZGl2aWRlcnMsZm9jdXNlZF0gaW5zdGVhZC5cbi8vIEBicmVha2luZy1jaGFuZ2UgOC4wLjBcbiR3aGl0ZS02LW9wYWNpdHk6IHJnYmEod2hpdGUsIDAuMDYpO1xuXG4kZGFyay1wcmltYXJ5LXRleHQ6IHJnYmEoYmxhY2ssIDAuODcpO1xuJGRhcmstc2Vjb25kYXJ5LXRleHQ6IHJnYmEoYmxhY2ssIDAuNTQpO1xuJGRhcmstZGlzYWJsZWQtdGV4dDogcmdiYShibGFjaywgMC4zOCk7XG4kZGFyay1kaXZpZGVyczogcmdiYShibGFjaywgMC4xMik7XG4kZGFyay1mb2N1c2VkOiByZ2JhKGJsYWNrLCAwLjEyKTtcbiRsaWdodC1wcmltYXJ5LXRleHQ6IHdoaXRlO1xuJGxpZ2h0LXNlY29uZGFyeS10ZXh0OiByZ2JhKHdoaXRlLCAwLjcpO1xuJGxpZ2h0LWRpc2FibGVkLXRleHQ6IHJnYmEod2hpdGUsIDAuNSk7XG4kbGlnaHQtZGl2aWRlcnM6IHJnYmEod2hpdGUsIDAuMTIpO1xuJGxpZ2h0LWZvY3VzZWQ6IHJnYmEod2hpdGUsIDAuMTIpO1xuXG4kbWF0LXJlZDogKFxuICA1MDogI2ZmZWJlZSxcbiAgMTAwOiAjZmZjZGQyLFxuICAyMDA6ICNlZjlhOWEsXG4gIDMwMDogI2U1NzM3MyxcbiAgNDAwOiAjZWY1MzUwLFxuICA1MDA6ICNmNDQzMzYsXG4gIDYwMDogI2U1MzkzNSxcbiAgNzAwOiAjZDMyZjJmLFxuICA4MDA6ICNjNjI4MjgsXG4gIDkwMDogI2I3MWMxYyxcbiAgQTEwMDogI2ZmOGE4MCxcbiAgQTIwMDogI2ZmNTI1MixcbiAgQTQwMDogI2ZmMTc0NCxcbiAgQTcwMDogI2Q1MDAwMCxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LXBpbms6IChcbiAgNTA6ICNmY2U0ZWMsXG4gIDEwMDogI2Y4YmJkMCxcbiAgMjAwOiAjZjQ4ZmIxLFxuICAzMDA6ICNmMDYyOTIsXG4gIDQwMDogI2VjNDA3YSxcbiAgNTAwOiAjZTkxZTYzLFxuICA2MDA6ICNkODFiNjAsXG4gIDcwMDogI2MyMTg1YixcbiAgODAwOiAjYWQxNDU3LFxuICA5MDA6ICM4ODBlNGYsXG4gIEExMDA6ICNmZjgwYWIsXG4gIEEyMDA6ICNmZjQwODEsXG4gIEE0MDA6ICNmNTAwNTcsXG4gIEE3MDA6ICNjNTExNjIsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1wdXJwbGU6IChcbiAgNTA6ICNmM2U1ZjUsXG4gIDEwMDogI2UxYmVlNyxcbiAgMjAwOiAjY2U5M2Q4LFxuICAzMDA6ICNiYTY4YzgsXG4gIDQwMDogI2FiNDdiYyxcbiAgNTAwOiAjOWMyN2IwLFxuICA2MDA6ICM4ZTI0YWEsXG4gIDcwMDogIzdiMWZhMixcbiAgODAwOiAjNmExYjlhLFxuICA5MDA6ICM0YTE0OGMsXG4gIEExMDA6ICNlYTgwZmMsXG4gIEEyMDA6ICNlMDQwZmIsXG4gIEE0MDA6ICNkNTAwZjksXG4gIEE3MDA6ICNhYTAwZmYsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LWRlZXAtcHVycGxlOiAoXG4gIDUwOiAjZWRlN2Y2LFxuICAxMDA6ICNkMWM0ZTksXG4gIDIwMDogI2IzOWRkYixcbiAgMzAwOiAjOTU3NWNkLFxuICA0MDA6ICM3ZTU3YzIsXG4gIDUwMDogIzY3M2FiNyxcbiAgNjAwOiAjNWUzNWIxLFxuICA3MDA6ICM1MTJkYTgsXG4gIDgwMDogIzQ1MjdhMCxcbiAgOTAwOiAjMzExYjkyLFxuICBBMTAwOiAjYjM4OGZmLFxuICBBMjAwOiAjN2M0ZGZmLFxuICBBNDAwOiAjNjUxZmZmLFxuICBBNzAwOiAjNjIwMGVhLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1pbmRpZ286IChcbiAgNTA6ICNlOGVhZjYsXG4gIDEwMDogI2M1Y2FlOSxcbiAgMjAwOiAjOWZhOGRhLFxuICAzMDA6ICM3OTg2Y2IsXG4gIDQwMDogIzVjNmJjMCxcbiAgNTAwOiAjM2Y1MWI1LFxuICA2MDA6ICMzOTQ5YWIsXG4gIDcwMDogIzMwM2Y5ZixcbiAgODAwOiAjMjgzNTkzLFxuICA5MDA6ICMxYTIzN2UsXG4gIEExMDA6ICM4YzllZmYsXG4gIEEyMDA6ICM1MzZkZmUsXG4gIEE0MDA6ICMzZDVhZmUsXG4gIEE3MDA6ICMzMDRmZmUsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LWJsdWU6IChcbiAgNTA6ICNlM2YyZmQsXG4gIDEwMDogI2JiZGVmYixcbiAgMjAwOiAjOTBjYWY5LFxuICAzMDA6ICM2NGI1ZjYsXG4gIDQwMDogIzQyYTVmNSxcbiAgNTAwOiAjMjE5NmYzLFxuICA2MDA6ICMxZTg4ZTUsXG4gIDcwMDogIzE5NzZkMixcbiAgODAwOiAjMTU2NWMwLFxuICA5MDA6ICMwZDQ3YTEsXG4gIEExMDA6ICM4MmIxZmYsXG4gIEEyMDA6ICM0NDhhZmYsXG4gIEE0MDA6ICMyOTc5ZmYsXG4gIEE3MDA6ICMyOTYyZmYsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1saWdodC1ibHVlOiAoXG4gIDUwOiAjZTFmNWZlLFxuICAxMDA6ICNiM2U1ZmMsXG4gIDIwMDogIzgxZDRmYSxcbiAgMzAwOiAjNGZjM2Y3LFxuICA0MDA6ICMyOWI2ZjYsXG4gIDUwMDogIzAzYTlmNCxcbiAgNjAwOiAjMDM5YmU1LFxuICA3MDA6ICMwMjg4ZDEsXG4gIDgwMDogIzAyNzdiZCxcbiAgOTAwOiAjMDE1NzliLFxuICBBMTAwOiAjODBkOGZmLFxuICBBMjAwOiAjNDBjNGZmLFxuICBBNDAwOiAjMDBiMGZmLFxuICBBNzAwOiAjMDA5MWVhLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LWN5YW46IChcbiAgNTA6ICNlMGY3ZmEsXG4gIDEwMDogI2IyZWJmMixcbiAgMjAwOiAjODBkZWVhLFxuICAzMDA6ICM0ZGQwZTEsXG4gIDQwMDogIzI2YzZkYSxcbiAgNTAwOiAjMDBiY2Q0LFxuICA2MDA6ICMwMGFjYzEsXG4gIDcwMDogIzAwOTdhNyxcbiAgODAwOiAjMDA4MzhmLFxuICA5MDA6ICMwMDYwNjQsXG4gIEExMDA6ICM4NGZmZmYsXG4gIEEyMDA6ICMxOGZmZmYsXG4gIEE0MDA6ICMwMGU1ZmYsXG4gIEE3MDA6ICMwMGI4ZDQsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC10ZWFsOiAoXG4gIDUwOiAjZTBmMmYxLFxuICAxMDA6ICNiMmRmZGIsXG4gIDIwMDogIzgwY2JjNCxcbiAgMzAwOiAjNGRiNmFjLFxuICA0MDA6ICMyNmE2OWEsXG4gIDUwMDogIzAwOTY4OCxcbiAgNjAwOiAjMDA4OTdiLFxuICA3MDA6ICMwMDc5NmIsXG4gIDgwMDogIzAwNjk1YyxcbiAgOTAwOiAjMDA0ZDQwLFxuICBBMTAwOiAjYTdmZmViLFxuICBBMjAwOiAjNjRmZmRhLFxuICBBNDAwOiAjMWRlOWI2LFxuICBBNzAwOiAjMDBiZmE1LFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbiRtYXQtZ3JlZW46IChcbiAgNTA6ICNlOGY1ZTksXG4gIDEwMDogI2M4ZTZjOSxcbiAgMjAwOiAjYTVkNmE3LFxuICAzMDA6ICM4MWM3ODQsXG4gIDQwMDogIzY2YmI2YSxcbiAgNTAwOiAjNGNhZjUwLFxuICA2MDA6ICM0M2EwNDcsXG4gIDcwMDogIzM4OGUzYyxcbiAgODAwOiAjMmU3ZDMyLFxuICA5MDA6ICMxYjVlMjAsXG4gIEExMDA6ICNiOWY2Y2EsXG4gIEEyMDA6ICM2OWYwYWUsXG4gIEE0MDA6ICMwMGU2NzYsXG4gIEE3MDA6ICMwMGM4NTMsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LWxpZ2h0LWdyZWVuOiAoXG4gIDUwOiAjZjFmOGU5LFxuICAxMDA6ICNkY2VkYzgsXG4gIDIwMDogI2M1ZTFhNSxcbiAgMzAwOiAjYWVkNTgxLFxuICA0MDA6ICM5Y2NjNjUsXG4gIDUwMDogIzhiYzM0YSxcbiAgNjAwOiAjN2NiMzQyLFxuICA3MDA6ICM2ODlmMzgsXG4gIDgwMDogIzU1OGIyZixcbiAgOTAwOiAjMzM2OTFlLFxuICBBMTAwOiAjY2NmZjkwLFxuICBBMjAwOiAjYjJmZjU5LFxuICBBNDAwOiAjNzZmZjAzLFxuICBBNzAwOiAjNjRkZDE3LFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNzAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LWxpbWU6IChcbiAgNTA6ICNmOWZiZTcsXG4gIDEwMDogI2YwZjRjMyxcbiAgMjAwOiAjZTZlZTljLFxuICAzMDA6ICNkY2U3NzUsXG4gIDQwMDogI2Q0ZTE1NyxcbiAgNTAwOiAjY2RkYzM5LFxuICA2MDA6ICNjMGNhMzMsXG4gIDcwMDogI2FmYjQyYixcbiAgODAwOiAjOWU5ZDI0LFxuICA5MDA6ICM4Mjc3MTcsXG4gIEExMDA6ICNmNGZmODEsXG4gIEEyMDA6ICNlZWZmNDEsXG4gIEE0MDA6ICNjNmZmMDAsXG4gIEE3MDA6ICNhZWVhMDAsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA5MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEEyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICApXG4pO1xuXG4kbWF0LXllbGxvdzogKFxuICA1MDogI2ZmZmRlNyxcbiAgMTAwOiAjZmZmOWM0LFxuICAyMDA6ICNmZmY1OWQsXG4gIDMwMDogI2ZmZjE3NixcbiAgNDAwOiAjZmZlZTU4LFxuICA1MDA6ICNmZmViM2IsXG4gIDYwMDogI2ZkZDgzNSxcbiAgNzAwOiAjZmJjMDJkLFxuICA4MDA6ICNmOWE4MjUsXG4gIDkwMDogI2Y1N2YxNyxcbiAgQTEwMDogI2ZmZmY4ZCxcbiAgQTIwMDogI2ZmZmYwMCxcbiAgQTQwMDogI2ZmZWEwMCxcbiAgQTcwMDogI2ZmZDYwMCxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1hbWJlcjogKFxuICA1MDogI2ZmZjhlMSxcbiAgMTAwOiAjZmZlY2IzLFxuICAyMDA6ICNmZmUwODIsXG4gIDMwMDogI2ZmZDU0ZixcbiAgNDAwOiAjZmZjYTI4LFxuICA1MDA6ICNmZmMxMDcsXG4gIDYwMDogI2ZmYjMwMCxcbiAgNzAwOiAjZmZhMDAwLFxuICA4MDA6ICNmZjhmMDAsXG4gIDkwMDogI2ZmNmYwMCxcbiAgQTEwMDogI2ZmZTU3ZixcbiAgQTIwMDogI2ZmZDc0MCxcbiAgQTQwMDogI2ZmYzQwMCxcbiAgQTcwMDogI2ZmYWIwMCxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDUwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDgwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1vcmFuZ2U6IChcbiAgNTA6ICNmZmYzZTAsXG4gIDEwMDogI2ZmZTBiMixcbiAgMjAwOiAjZmZjYzgwLFxuICAzMDA6ICNmZmI3NGQsXG4gIDQwMDogI2ZmYTcyNixcbiAgNTAwOiAjZmY5ODAwLFxuICA2MDA6ICNmYjhjMDAsXG4gIDcwMDogI2Y1N2MwMCxcbiAgODAwOiAjZWY2YzAwLFxuICA5MDA6ICNlNjUxMDAsXG4gIEExMDA6ICNmZmQxODAsXG4gIEEyMDA6ICNmZmFiNDAsXG4gIEE0MDA6ICNmZjkxMDAsXG4gIEE3MDA6ICNmZjZkMDAsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA1MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA2MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6IGJsYWNrLFxuICApXG4pO1xuXG4kbWF0LWRlZXAtb3JhbmdlOiAoXG4gIDUwOiAjZmJlOWU3LFxuICAxMDA6ICNmZmNjYmMsXG4gIDIwMDogI2ZmYWI5MSxcbiAgMzAwOiAjZmY4YTY1LFxuICA0MDA6ICNmZjcwNDMsXG4gIDUwMDogI2ZmNTcyMixcbiAgNjAwOiAjZjQ1MTFlLFxuICA3MDA6ICNlNjRhMTksXG4gIDgwMDogI2Q4NDMxNSxcbiAgOTAwOiAjYmYzNjBjLFxuICBBMTAwOiAjZmY5ZTgwLFxuICBBMjAwOiAjZmY2ZTQwLFxuICBBNDAwOiAjZmYzZDAwLFxuICBBNzAwOiAjZGQyYzAwLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1icm93bjogKFxuICA1MDogI2VmZWJlOSxcbiAgMTAwOiAjZDdjY2M4LFxuICAyMDA6ICNiY2FhYTQsXG4gIDMwMDogI2ExODg3ZixcbiAgNDAwOiAjOGQ2ZTYzLFxuICA1MDA6ICM3OTU1NDgsXG4gIDYwMDogIzZkNGM0MSxcbiAgNzAwOiAjNWQ0MDM3LFxuICA4MDA6ICM0ZTM0MmUsXG4gIDkwMDogIzNlMjcyMyxcbiAgQTEwMDogI2Q3Y2NjOCxcbiAgQTIwMDogI2JjYWFhNCxcbiAgQTQwMDogIzhkNmU2MyxcbiAgQTcwMDogIzVkNDAzNyxcbiAgY29udHJhc3Q6IChcbiAgICA1MDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDEwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIDMwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuJG1hdC1ncmV5OiAoXG4gIDUwOiAjZmFmYWZhLFxuICAxMDA6ICNmNWY1ZjUsXG4gIDIwMDogI2VlZWVlZSxcbiAgMzAwOiAjZTBlMGUwLFxuICA0MDA6ICNiZGJkYmQsXG4gIDUwMDogIzllOWU5ZSxcbiAgNjAwOiAjNzU3NTc1LFxuICA3MDA6ICM2MTYxNjEsXG4gIDgwMDogIzQyNDI0MixcbiAgOTAwOiAjMjEyMTIxLFxuICBBMTAwOiAjZmZmZmZmLFxuICBBMjAwOiAjZWVlZWVlLFxuICBBNDAwOiAjYmRiZGJkLFxuICBBNzAwOiAjNjE2MTYxLFxuICBjb250cmFzdDogKFxuICAgIDUwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgMzAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNDAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgNjAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA4MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgOTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIEExMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICBBMjAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTQwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gIClcbik7XG5cbi8vIEFsaWFzIGZvciBhbHRlcm5hdGUgc3BlbGxpbmcuXG4kbWF0LWdyYXk6ICRtYXQtZ3JleTtcblxuJG1hdC1ibHVlLWdyZXk6IChcbiAgNTA6ICNlY2VmZjEsXG4gIDEwMDogI2NmZDhkYyxcbiAgMjAwOiAjYjBiZWM1LFxuICAzMDA6ICM5MGE0YWUsXG4gIDQwMDogIzc4OTA5YyxcbiAgNTAwOiAjNjA3ZDhiLFxuICA2MDA6ICM1NDZlN2EsXG4gIDcwMDogIzQ1NWE2NCxcbiAgODAwOiAjMzc0NzRmLFxuICA5MDA6ICMyNjMyMzgsXG4gIEExMDA6ICNjZmQ4ZGMsXG4gIEEyMDA6ICNiMGJlYzUsXG4gIEE0MDA6ICM3ODkwOWMsXG4gIEE3MDA6ICM0NTVhNjQsXG4gIGNvbnRyYXN0OiAoXG4gICAgNTA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAxMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAyMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICAzMDA6ICRkYXJrLXByaW1hcnktdGV4dCxcbiAgICA0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgNTAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDYwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICA3MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgODAwOiAkbGlnaHQtcHJpbWFyeS10ZXh0LFxuICAgIDkwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgICBBMTAwOiAkZGFyay1wcmltYXJ5LXRleHQsXG4gICAgQTIwMDogJGRhcmstcHJpbWFyeS10ZXh0LFxuICAgIEE0MDA6ICRsaWdodC1wcmltYXJ5LXRleHQsXG4gICAgQTcwMDogJGxpZ2h0LXByaW1hcnktdGV4dCxcbiAgKVxuKTtcblxuLy8gQWxpYXMgZm9yIGFsdGVybmF0ZSBzcGVsbGluZy5cbiRtYXQtYmx1ZS1ncmF5OiAkbWF0LWJsdWUtZ3JleTtcblxuXG4vLyBCYWNrZ3JvdW5kIHBhbGV0dGUgZm9yIGxpZ2h0IHRoZW1lcy5cbiRtYXQtbGlnaHQtdGhlbWUtYmFja2dyb3VuZDogKFxuICBzdGF0dXMtYmFyOiBtYXBfZ2V0KCRtYXQtZ3JleSwgMzAwKSxcbiAgYXBwLWJhcjogICAgbWFwX2dldCgkbWF0LWdyZXksIDEwMCksXG4gIGJhY2tncm91bmQ6IG1hcF9nZXQoJG1hdC1ncmV5LCA1MCksXG4gIGhvdmVyOiAgICAgIHJnYmEoYmxhY2ssIDAuMDQpLCAvLyBUT0RPKGthcmEpOiBjaGVjayBzdHlsZSB3aXRoIE1hdGVyaWFsIERlc2lnbiBVWFxuICBjYXJkOiAgICAgICB3aGl0ZSxcbiAgZGlhbG9nOiAgICAgd2hpdGUsXG4gIGRpc2FibGVkLWJ1dHRvbjogcmdiYShibGFjaywgMC4xMiksXG4gIHJhaXNlZC1idXR0b246IHdoaXRlLFxuICBmb2N1c2VkLWJ1dHRvbjogJGRhcmstZm9jdXNlZCxcbiAgc2VsZWN0ZWQtYnV0dG9uOiBtYXBfZ2V0KCRtYXQtZ3JleSwgMzAwKSxcbiAgc2VsZWN0ZWQtZGlzYWJsZWQtYnV0dG9uOiBtYXBfZ2V0KCRtYXQtZ3JleSwgNDAwKSxcbiAgZGlzYWJsZWQtYnV0dG9uLXRvZ2dsZTogbWFwX2dldCgkbWF0LWdyZXksIDIwMCksXG4gIHVuc2VsZWN0ZWQtY2hpcDogbWFwX2dldCgkbWF0LWdyZXksIDMwMCksXG4gIGRpc2FibGVkLWxpc3Qtb3B0aW9uOiBtYXBfZ2V0KCRtYXQtZ3JleSwgMjAwKSxcbiAgdG9vbHRpcDogbWFwX2dldCgkbWF0LWdyZXksIDcwMCksXG4pO1xuXG4vLyBCYWNrZ3JvdW5kIHBhbGV0dGUgZm9yIGRhcmsgdGhlbWVzLlxuJG1hdC1kYXJrLXRoZW1lLWJhY2tncm91bmQ6IChcbiAgc3RhdHVzLWJhcjogYmxhY2ssXG4gIGFwcC1iYXI6ICAgIG1hcF9nZXQoJG1hdC1ncmV5LCA5MDApLFxuICBiYWNrZ3JvdW5kOiAjMzAzMDMwLFxuICBob3ZlcjogICAgICByZ2JhKHdoaXRlLCAwLjA0KSwgLy8gVE9ETyhrYXJhKTogY2hlY2sgc3R5bGUgd2l0aCBNYXRlcmlhbCBEZXNpZ24gVVhcbiAgY2FyZDogICAgICAgbWFwX2dldCgkbWF0LWdyZXksIDgwMCksXG4gIGRpYWxvZzogICAgIG1hcF9nZXQoJG1hdC1ncmV5LCA4MDApLFxuICBkaXNhYmxlZC1idXR0b246IHJnYmEod2hpdGUsIDAuMTIpLFxuICByYWlzZWQtYnV0dG9uOiBtYXAtZ2V0KCRtYXQtZ3JleSwgODAwKSxcbiAgZm9jdXNlZC1idXR0b246ICRsaWdodC1mb2N1c2VkLFxuICBzZWxlY3RlZC1idXR0b246IG1hcF9nZXQoJG1hdC1ncmV5LCA5MDApLFxuICBzZWxlY3RlZC1kaXNhYmxlZC1idXR0b246IG1hcF9nZXQoJG1hdC1ncmV5LCA4MDApLFxuICBkaXNhYmxlZC1idXR0b24tdG9nZ2xlOiBibGFjayxcbiAgdW5zZWxlY3RlZC1jaGlwOiBtYXBfZ2V0KCRtYXQtZ3JleSwgNzAwKSxcbiAgZGlzYWJsZWQtbGlzdC1vcHRpb246IGJsYWNrLFxuICB0b29sdGlwOiBtYXBfZ2V0KCRtYXQtZ3JleSwgNzAwKSxcbik7XG5cbi8vIEZvcmVncm91bmQgcGFsZXR0ZSBmb3IgbGlnaHQgdGhlbWVzLlxuJG1hdC1saWdodC10aGVtZS1mb3JlZ3JvdW5kOiAoXG4gIGJhc2U6ICAgICAgICAgICAgICBibGFjayxcbiAgZGl2aWRlcjogICAgICAgICAgICRkYXJrLWRpdmlkZXJzLFxuICBkaXZpZGVyczogICAgICAgICAgJGRhcmstZGl2aWRlcnMsXG4gIGRpc2FibGVkOiAgICAgICAgICAkZGFyay1kaXNhYmxlZC10ZXh0LFxuICBkaXNhYmxlZC1idXR0b246ICAgcmdiYShibGFjaywgMC4yNiksXG4gIGRpc2FibGVkLXRleHQ6ICAgICAkZGFyay1kaXNhYmxlZC10ZXh0LFxuICBlbGV2YXRpb246ICAgICAgICAgYmxhY2ssXG4gIGhpbnQtdGV4dDogICAgICAgICAkZGFyay1kaXNhYmxlZC10ZXh0LFxuICBzZWNvbmRhcnktdGV4dDogICAgJGRhcmstc2Vjb25kYXJ5LXRleHQsXG4gIGljb246ICAgICAgICAgICAgICByZ2JhKGJsYWNrLCAwLjU0KSxcbiAgaWNvbnM6ICAgICAgICAgICAgIHJnYmEoYmxhY2ssIDAuNTQpLFxuICB0ZXh0OiAgICAgICAgICAgICAgcmdiYShibGFjaywgMC44NyksXG4gIHNsaWRlci1taW46ICAgICAgICByZ2JhKGJsYWNrLCAwLjg3KSxcbiAgc2xpZGVyLW9mZjogICAgICAgIHJnYmEoYmxhY2ssIDAuMjYpLFxuICBzbGlkZXItb2ZmLWFjdGl2ZTogcmdiYShibGFjaywgMC4zOCksXG4pO1xuXG4vLyBGb3JlZ3JvdW5kIHBhbGV0dGUgZm9yIGRhcmsgdGhlbWVzLlxuJG1hdC1kYXJrLXRoZW1lLWZvcmVncm91bmQ6IChcbiAgYmFzZTogICAgICAgICAgICAgIHdoaXRlLFxuICBkaXZpZGVyOiAgICAgICAgICAgJGxpZ2h0LWRpdmlkZXJzLFxuICBkaXZpZGVyczogICAgICAgICAgJGxpZ2h0LWRpdmlkZXJzLFxuICBkaXNhYmxlZDogICAgICAgICAgJGxpZ2h0LWRpc2FibGVkLXRleHQsXG4gIGRpc2FibGVkLWJ1dHRvbjogICByZ2JhKHdoaXRlLCAwLjMpLFxuICBkaXNhYmxlZC10ZXh0OiAgICAgJGxpZ2h0LWRpc2FibGVkLXRleHQsXG4gIGVsZXZhdGlvbjogICAgICAgICBibGFjayxcbiAgaGludC10ZXh0OiAgICAgICAgICRsaWdodC1kaXNhYmxlZC10ZXh0LFxuICBzZWNvbmRhcnktdGV4dDogICAgJGxpZ2h0LXNlY29uZGFyeS10ZXh0LFxuICBpY29uOiAgICAgICAgICAgICAgd2hpdGUsXG4gIGljb25zOiAgICAgICAgICAgICB3aGl0ZSxcbiAgdGV4dDogICAgICAgICAgICAgIHdoaXRlLFxuICBzbGlkZXItbWluOiAgICAgICAgd2hpdGUsXG4gIHNsaWRlci1vZmY6ICAgICAgICByZ2JhKHdoaXRlLCAwLjMpLFxuICBzbGlkZXItb2ZmLWFjdGl2ZTogcmdiYSh3aGl0ZSwgMC4zKSxcbik7XG5cblxuLy8gV2hldGhlciBkZW5zaXR5IHNob3VsZCBiZSBnZW5lcmF0ZWQgYnkgZGVmYXVsdC5cbiRfbWF0LXRoZW1lLWdlbmVyYXRlLWRlZmF1bHQtZGVuc2l0eTogdHJ1ZSAhZGVmYXVsdDtcblxuLy8gRm9yIGEgZ2l2ZW4gaHVlIGluIGEgcGFsZXR0ZSwgcmV0dXJuIHRoZSBjb250cmFzdCBjb2xvciBmcm9tIHRoZSBtYXAgb2YgY29udHJhc3QgcGFsZXR0ZXMuXG4vLyBAcGFyYW0gJGNvbG9yLW1hcFxuLy8gQHBhcmFtICRodWVcbkBmdW5jdGlvbiBtYXQtY29udHJhc3QoJHBhbGV0dGUsICRodWUpIHtcbiAgQHJldHVybiBtYXAtZ2V0KG1hcC1nZXQoJHBhbGV0dGUsIGNvbnRyYXN0KSwgJGh1ZSk7XG59XG5cblxuLy8gQ3JlYXRlcyBhIG1hcCBvZiBodWVzIHRvIGNvbG9ycyBmb3IgYSB0aGVtZS4gVGhpcyBpcyB1c2VkIHRvIGRlZmluZSBhIHRoZW1lIHBhbGV0dGUgaW4gdGVybXNcbi8vIG9mIHRoZSBNYXRlcmlhbCBEZXNpZ24gaHVlcy5cbi8vIEBwYXJhbSAkY29sb3ItbWFwXG4vLyBAcGFyYW0gJHByaW1hcnlcbi8vIEBwYXJhbSAkbGlnaHRlclxuQGZ1bmN0aW9uIG1hdC1wYWxldHRlKCRiYXNlLXBhbGV0dGUsICRkZWZhdWx0OiA1MDAsICRsaWdodGVyOiAxMDAsICRkYXJrZXI6IDcwMCwgJHRleHQ6ICRkZWZhdWx0KSB7XG4gICRyZXN1bHQ6IG1hcF9tZXJnZSgkYmFzZS1wYWxldHRlLCAoXG4gICAgZGVmYXVsdDogbWFwLWdldCgkYmFzZS1wYWxldHRlLCAkZGVmYXVsdCksXG4gICAgbGlnaHRlcjogbWFwLWdldCgkYmFzZS1wYWxldHRlLCAkbGlnaHRlciksXG4gICAgZGFya2VyOiBtYXAtZ2V0KCRiYXNlLXBhbGV0dGUsICRkYXJrZXIpLFxuICAgIHRleHQ6IG1hcC1nZXQoJGJhc2UtcGFsZXR0ZSwgJHRleHQpLFxuXG4gICAgZGVmYXVsdC1jb250cmFzdDogbWF0LWNvbnRyYXN0KCRiYXNlLXBhbGV0dGUsICRkZWZhdWx0KSxcbiAgICBsaWdodGVyLWNvbnRyYXN0OiBtYXQtY29udHJhc3QoJGJhc2UtcGFsZXR0ZSwgJGxpZ2h0ZXIpLFxuICAgIGRhcmtlci1jb250cmFzdDogbWF0LWNvbnRyYXN0KCRiYXNlLXBhbGV0dGUsICRkYXJrZXIpXG4gICkpO1xuXG4gIC8vIEZvciBlYWNoIGh1ZSBpbiB0aGUgcGFsZXR0ZSwgYWRkIGEgXCItY29udHJhc3RcIiBjb2xvciB0byB0aGUgbWFwLlxuICBAZWFjaCAkaHVlLCAkY29sb3IgaW4gJGJhc2UtcGFsZXR0ZSB7XG4gICAgJHJlc3VsdDogbWFwX21lcmdlKCRyZXN1bHQsIChcbiAgICAgICcjeyRodWV9LWNvbnRyYXN0JzogbWF0LWNvbnRyYXN0KCRiYXNlLXBhbGV0dGUsICRodWUpXG4gICAgKSk7XG4gIH1cblxuICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cblxuLy8gR2V0cyBhIGNvbG9yIGZyb20gYSB0aGVtZSBwYWxldHRlICh0aGUgb3V0cHV0IG9mIG1hdC1wYWxldHRlKS5cbi8vIFRoZSBodWUgY2FuIGJlIG9uZSBvZiB0aGUgc3RhbmRhcmQgdmFsdWVzICg1MDAsIEE0MDAsIGV0Yy4pLCBvbmUgb2YgdGhlIHRocmVlIHByZWNvbmZpZ3VyZWRcbi8vIGh1ZXMgKGRlZmF1bHQsIGxpZ2h0ZXIsIGRhcmtlciksIG9yIGFueSBvZiB0aGUgYWZvcmVtZW50aW9uZWQgcHJlZml4ZWQgd2l0aCBcIi1jb250cmFzdFwiLlxuLy9cbi8vIEBwYXJhbSAkY29sb3ItbWFwIFRoZSB0aGVtZSBwYWxldHRlIChvdXRwdXQgb2YgbWF0LXBhbGV0dGUpLlxuLy8gQHBhcmFtICRodWUgVGhlIGh1ZSBmcm9tIHRoZSBwYWxldHRlIHRvIHVzZS4gSWYgdGhpcyBpcyBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMSwgaXQgd2lsbFxuLy8gICAgIGJlIHRyZWF0ZWQgYXMgb3BhY2l0eS5cbi8vIEBwYXJhbSAkb3BhY2l0eSBUaGUgYWxwaGEgY2hhbm5lbCB2YWx1ZSBmb3IgdGhlIGNvbG9yLlxuQGZ1bmN0aW9uIG1hdC1jb2xvcigkcGFsZXR0ZSwgJGh1ZTogZGVmYXVsdCwgJG9wYWNpdHk6IG51bGwpIHtcbiAgLy8gSWYgaHVlS2V5IGlzIGEgbnVtYmVyIGJldHdlZW4gemVybyBhbmQgb25lLCB0aGVuIGl0IGFjdHVhbGx5IGNvbnRhaW5zIGFuXG4gIC8vIG9wYWNpdHkgdmFsdWUsIHNvIHJlY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggdGhlIGRlZmF1bHQgaHVlIGFuZCB0aGF0IGdpdmVuIG9wYWNpdHkuXG4gIEBpZiB0eXBlLW9mKCRodWUpID09IG51bWJlciBhbmQgJGh1ZSA+PSAwIGFuZCAkaHVlIDw9IDEge1xuICAgIEByZXR1cm4gbWF0LWNvbG9yKCRwYWxldHRlLCBkZWZhdWx0LCAkaHVlKTtcbiAgfVxuXG4gICRjb2xvcjogbWFwLWdldCgkcGFsZXR0ZSwgJGh1ZSk7XG5cbiAgQGlmICh0eXBlLW9mKCRjb2xvcikgIT0gY29sb3IpIHtcbiAgICAvLyBJZiB0aGUgJGNvbG9yIHJlc29sdmVkIHRvIHNvbWV0aGluZyBkaWZmZXJlbnQgZnJvbSBhIGNvbG9yIChlLmcuIGEgQ1NTIHZhcmlhYmxlKSxcbiAgICAvLyB3ZSBjYW4ndCBhcHBseSB0aGUgb3BhY2l0eSBhbnl3YXkgc28gd2UgcmV0dXJuIHRoZSB2YWx1ZSBhcyBpcywgb3RoZXJ3aXNlIFNhc3MgY2FuXG4gICAgLy8gdGhyb3cgYW4gZXJyb3Igb3Igb3V0cHV0IHNvbWV0aGluZyBpbnZhbGlkLlxuICAgIEByZXR1cm4gJGNvbG9yO1xuICB9XG5cbiAgQHJldHVybiByZ2JhKCRjb2xvciwgaWYoJG9wYWNpdHkgPT0gbnVsbCwgb3BhY2l0eSgkY29sb3IpLCAkb3BhY2l0eSkpO1xufVxuXG4vLyBWYWxpZGF0ZXMgdGhlIHNwZWNpZmllZCB0aGVtZSBieSBlbnN1cmluZyB0aGF0IHRoZSBvcHRpb25hbCBjb2xvciBjb25maWcgZGVmaW5lc1xuLy8gYSBwcmltYXJ5LCBhY2NlbnQgYW5kIHdhcm4gcGFsZXR0ZS4gUmV0dXJucyB0aGUgdGhlbWUgaWYgbm8gZmFpbHVyZXMgd2VyZSBmb3VuZC5cbkBmdW5jdGlvbiBfbWF0LXZhbGlkYXRlLXRoZW1lKCR0aGVtZSkge1xuICBAaWYgbWFwX2dldCgkdGhlbWUsIGNvbG9yKSB7XG4gICAgJGNvbG9yOiBtYXBfZ2V0KCR0aGVtZSwgY29sb3IpO1xuICAgIEBpZiBub3QgbWFwX2dldCgkY29sb3IsIHByaW1hcnkpIHtcbiAgICAgIEBlcnJvciAnVGhlbWUgZG9lcyBub3QgZGVmaW5lIGEgdmFsaWQgXCJwcmltYXJ5XCIgcGFsZXR0ZS4nO1xuICAgIH1cbiAgICBAZWxzZSBpZiBub3QgbWFwX2dldCgkY29sb3IsIGFjY2VudCkge1xuICAgICAgQGVycm9yICdUaGVtZSBkb2VzIG5vdCBkZWZpbmUgYSB2YWxpZCBcImFjY2VudFwiIHBhbGV0dGUuJztcbiAgICB9XG4gICAgQGVsc2UgaWYgbm90IG1hcF9nZXQoJGNvbG9yLCB3YXJuKSB7XG4gICAgICBAZXJyb3IgJ1RoZW1lIGRvZXMgbm90IGRlZmluZSBhIHZhbGlkIFwid2FyblwiIHBhbGV0dGUuJztcbiAgICB9XG4gIH1cbiAgQHJldHVybiAkdGhlbWU7XG59XG5cbi8vIENyZWF0ZXMgYSBiYWNrd2FyZHMgY29tcGF0aWJsZSB0aGVtZS4gUHJldmlvdXNseSBpbiBBbmd1bGFyIE1hdGVyaWFsLCB0aGVtZSBvYmplY3RzXG4vLyBjb250YWluZWQgdGhlIGNvbG9yIGNvbmZpZ3VyYXRpb24gZGlyZWN0bHkuIFdpdGggdGhlIHJlY2VudCByZWZhY3RvcmluZyBvZiB0aGUgdGhlbWluZ1xuLy8gc3lzdGVtIHRvIGFsbG93IGZvciBkZW5zaXR5IGFuZCB0eXBvZ3JhcGh5IGNvbmZpZ3VyYXRpb25zLCB0aGlzIGlzIG5vIGxvbmdlciB0aGUgY2FzZS5cbi8vIFRvIGVuc3VyZSB0aGF0IGNvbnN0cnVjdGVkIHRoZW1lcyB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBjdXN0b20gdGhlbWUgbWl4aW5zIGRvIG5vdCBicmVhayxcbi8vIHdlIGNvcHkgdGhlIGNvbG9yIGNvbmZpZ3VyYXRpb24gYW5kIHB1dCBpdHMgcHJvcGVydGllcyBhdCB0aGUgdG9wLWxldmVsIG9mIHRoZSB0aGVtZSBvYmplY3QuXG4vLyBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBwYXR0ZXJuIHRoYXQgc2hvdWxkIHN0aWxsIHdvcmsgdW50aWwgaXQncyBvZmZpY2lhbGx5IG1hcmtlZCBhcyBhXG4vLyBicmVha2luZyBjaGFuZ2U6XG4vL1xuLy8gICAgQG1peGluIG15LWN1c3RvbS1jb21wb25lbnQtdGhlbWUoJHRoZW1lKSB7XG4vLyAgICAgIC5teS1jb21wIHtcbi8vICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IobWFwX2dldCgkdGhlbWUsIHByaW1hcnkpKTtcbi8vICAgICAgfVxuLy8gICAgfVxuLy9cbi8vIE5vdGUgdGhhdCB0aGUgYCR0aGVtZS5wcmltYXJ5YCBrZXkgZG9lcyB1c3VhbGx5IG5vdCBleGlzdCBzaW5jZSB0aGUgY29sb3IgY29uZmlndXJhdGlvblxuLy8gaXMgc3RvcmVkIGluIGAkdGhlbWUuY29sb3JgIHdoaWNoIGNvbnRhaW5zIGEgcHJvcGVydHkgZm9yIGBwcmltYXJ5YC4gVGhpcyBtZXRob2QgY29waWVzXG4vLyB0aGUgbWFwIGZyb20gYCR0aGVtZS5jb2xvcmAgdG8gYCR0aGVtZWAgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuQGZ1bmN0aW9uIF9tYXQtY3JlYXRlLWJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LXRoZW1lKCR0aGVtZSkge1xuICBAaWYgbm90IG1hcF9nZXQoJHRoZW1lLCBjb2xvcikge1xuICAgIEByZXR1cm4gJHRoZW1lO1xuICB9XG4gICRjb2xvcjogbWFwX2dldCgkdGhlbWUsIGNvbG9yKTtcbiAgQHJldHVybiBtYXBfbWVyZ2UoJHRoZW1lLCAkY29sb3IpO1xufVxuXG4vLyBDcmVhdGVzIGEgbGlnaHQtdGhlbWVkIGNvbG9yIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgc3BlY2lmaWVkXG4vLyBwcmltYXJ5LCBhY2NlbnQgYW5kIHdhcm4gcGFsZXR0ZXMuXG5AZnVuY3Rpb24gX21hdC1jcmVhdGUtbGlnaHQtY29sb3ItY29uZmlnKCRwcmltYXJ5LCAkYWNjZW50LCAkd2FybjogbnVsbCkge1xuICBAcmV0dXJuIChcbiAgICBwcmltYXJ5OiAkcHJpbWFyeSxcbiAgICBhY2NlbnQ6ICRhY2NlbnQsXG4gICAgd2FybjogaWYoJHdhcm4gIT0gbnVsbCwgJHdhcm4sIG1hdC1wYWxldHRlKCRtYXQtcmVkKSksXG4gICAgaXMtZGFyazogZmFsc2UsXG4gICAgZm9yZWdyb3VuZDogJG1hdC1saWdodC10aGVtZS1mb3JlZ3JvdW5kLFxuICAgIGJhY2tncm91bmQ6ICRtYXQtbGlnaHQtdGhlbWUtYmFja2dyb3VuZCxcbiAgKTtcbn1cblxuLy8gQ3JlYXRlcyBhIGRhcmstdGhlbWVkIGNvbG9yIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgc3BlY2lmaWVkXG4vLyBwcmltYXJ5LCBhY2NlbnQgYW5kIHdhcm4gcGFsZXR0ZXMuXG5AZnVuY3Rpb24gX21hdC1jcmVhdGUtZGFyay1jb2xvci1jb25maWcoJHByaW1hcnksICRhY2NlbnQsICR3YXJuOiBudWxsKSB7XG4gIEByZXR1cm4gKFxuICAgIHByaW1hcnk6ICRwcmltYXJ5LFxuICAgIGFjY2VudDogJGFjY2VudCxcbiAgICB3YXJuOiBpZigkd2FybiAhPSBudWxsLCAkd2FybiwgbWF0LXBhbGV0dGUoJG1hdC1yZWQpKSxcbiAgICBpcy1kYXJrOiB0cnVlLFxuICAgIGZvcmVncm91bmQ6ICRtYXQtZGFyay10aGVtZS1mb3JlZ3JvdW5kLFxuICAgIGJhY2tncm91bmQ6ICRtYXQtZGFyay10aGVtZS1iYWNrZ3JvdW5kLFxuICApO1xufVxuXG4vLyBDcmVhdGVzIGEgY29udGFpbmVyIG9iamVjdCBmb3IgYSBsaWdodCB0aGVtZSB0byBiZSBnaXZlbiB0byBpbmRpdmlkdWFsIGNvbXBvbmVudCB0aGVtZSBtaXhpbnMuXG4vLyBUT0RPOiBSZW1vdmUgbGVnYWN5IEFQSSBhbmQgcmVuYW1lIGAkcHJpbWFyeWAgdG8gYCRjb25maWdgLiBDdXJyZW50bHkgaXQgY2Fubm90IGJlIHJlbmFtZWRcbi8vIGFzIGl0IHdvdWxkIGJyZWFrIGV4aXN0aW5nIGFwcHMgdGhhdCBzZXQgdGhlIHBhcmFtZXRlciBieSBuYW1lLlxuQGZ1bmN0aW9uIG1hdC1saWdodC10aGVtZSgkcHJpbWFyeSwgJGFjY2VudDogbnVsbCwgJHdhcm46IG1hdC1wYWxldHRlKCRtYXQtcmVkKSkge1xuICAvLyBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBjb250YWluZXIgb2JqZWN0IGZvciB0aGUgaW5kaXZpZHVhbCBjb21wb25lbnQgdGhlbWUgbWl4aW5zLiBDb25zdW1lcnNcbiAgLy8gY2FuIGNvbnN0cnVjdCBzdWNoIGFuIG9iamVjdCBieSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIG9yIGJ5IGJ1aWxkaW5nIHRoZSBvYmplY3QgbWFudWFsbHkuXG4gIC8vIFRoZXJlIGFyZSB0d28gcG9zc2libGUgd2F5cyB0byBpbnZva2UgdGhpcyBmdW5jdGlvbiBpbiBvcmRlciB0byBjcmVhdGUgc3VjaCBhbiBvYmplY3Q6XG4gIC8vXG4gIC8vICAgICgxKSBQYXNzaW5nIGluIGEgbWFwIHRoYXQgaG9sZHMgb3B0aW9uYWwgY29uZmlndXJhdGlvbnMgZm9yIGluZGl2aWR1YWwgcGFydHMgb2YgdGhlXG4gIC8vICAgICAgICB0aGVtaW5nIHN5c3RlbS4gRm9yIGBjb2xvcmAgY29uZmlndXJhdGlvbnMsIHRoZSBmdW5jdGlvbiBvbmx5IGV4cGVjdHMgdGhlIHBhbGV0dGVzXG4gIC8vICAgICAgICBmb3IgYHByaW1hcnlgIGFuZCBgYWNjZW50YCAoYW5kIG9wdGlvbmFsbHkgYHdhcm5gKS4gVGhlIGZ1bmN0aW9uIHdpbGwgZXhwYW5kIHRoZVxuICAvLyAgICAgICAgc2hvcnRoYW5kIGludG8gYW4gYWN0dWFsIGNvbmZpZ3VyYXRpb24gdGhhdCBjYW4gYmUgY29uc3VtZWQgaW4gYC1jb2xvcmAgbWl4aW5zLlxuICAvLyAgICAoMikgTGVnYWN5IHBhdHRlcm46IFBhc3NpbmcgaW4gdGhlIHBhbGV0dGVzIGFzIHBhcmFtZXRlcnMuIFRoaXMgaXMgbm90IGFzIGZsZXhpYmxlXG4gIC8vICAgICAgICBhcyBwYXNzaW5nIGluIGEgY29uZmlndXJhdGlvbiBtYXAgYmVjYXVzZSBvbmx5IHRoZSBgY29sb3JgIHN5c3RlbSBjYW4gYmUgY29uZmlndXJlZC5cbiAgLy9cbiAgLy8gSWYgdGhlIGxlZ2FjeSBwYXR0ZXJuIGlzIHVzZWQsIHdlIGdlbmVyYXRlIGEgY29udGFpbmVyIG9iamVjdCBvbmx5IHdpdGggYSBsaWdodC10aGVtZWRcbiAgLy8gY29uZmlndXJhdGlvbiBmb3IgdGhlIGBjb2xvcmAgdGhlbWluZyBwYXJ0LlxuICBAaWYgJGFjY2VudCAhPSBudWxsIHtcbiAgICBAcmV0dXJuIF9tYXQtY3JlYXRlLWJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LXRoZW1lKF9tYXQtdmFsaWRhdGUtdGhlbWUoKFxuICAgICAgX2lzLWxlZ2FjeS10aGVtZTogdHJ1ZSxcbiAgICAgIGNvbG9yOiBfbWF0LWNyZWF0ZS1saWdodC1jb2xvci1jb25maWcoJHByaW1hcnksICRhY2NlbnQsICR3YXJuKSxcbiAgICApKSk7XG4gIH1cbiAgLy8gSWYgdGhlIG1hcCBwYXR0ZXJuIGlzIHVzZWQgKDEpLCB3ZSBqdXN0IHBhc3MtdGhyb3VnaCB0aGUgY29uZmlndXJhdGlvbnMgZm9yIGluZGl2aWR1YWxcbiAgLy8gcGFydHMgb2YgdGhlIHRoZW1pbmcgc3lzdGVtLCBidXQgdXBkYXRlIHRoZSBgY29sb3JgIGNvbmZpZ3VyYXRpb24gaWYgc2V0LiBBcyBleHBsYWluZWRcbiAgLy8gYWJvdmUsIHRoZSBjb2xvciBzaG9ydGhhbmQgd2lsbCBiZSBleHBhbmRlZCB0byBhbiBhY3R1YWwgbGlnaHQtdGhlbWVkIGNvbG9yIGNvbmZpZ3VyYXRpb24uXG4gICRyZXN1bHQ6ICRwcmltYXJ5O1xuICBAaWYgbWFwX2dldCgkcHJpbWFyeSwgY29sb3IpIHtcbiAgICAkY29sb3Itc2V0dGluZ3M6IG1hcF9nZXQoJHByaW1hcnksIGNvbG9yKTtcbiAgICAkcHJpbWFyeTogbWFwX2dldCgkY29sb3Itc2V0dGluZ3MsIHByaW1hcnkpO1xuICAgICRhY2NlbnQ6IG1hcF9nZXQoJGNvbG9yLXNldHRpbmdzLCBhY2NlbnQpO1xuICAgICR3YXJuOiBtYXBfZ2V0KCRjb2xvci1zZXR0aW5ncywgd2Fybik7XG4gICAgJHJlc3VsdDogbWFwX21lcmdlKCRyZXN1bHQsIChjb2xvcjogX21hdC1jcmVhdGUtbGlnaHQtY29sb3ItY29uZmlnKCRwcmltYXJ5LCAkYWNjZW50LCAkd2FybikpKTtcbiAgfVxuICBAcmV0dXJuIF9tYXQtY3JlYXRlLWJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LXRoZW1lKF9tYXQtdmFsaWRhdGUtdGhlbWUoJHJlc3VsdCkpO1xufVxuXG4vLyBDcmVhdGVzIGEgY29udGFpbmVyIG9iamVjdCBmb3IgYSBkYXJrIHRoZW1lIHRvIGJlIGdpdmVuIHRvIGluZGl2aWR1YWwgY29tcG9uZW50IHRoZW1lIG1peGlucy5cbi8vIFRPRE86IFJlbW92ZSBsZWdhY3kgQVBJIGFuZCByZW5hbWUgYCRwcmltYXJ5YCB0byBgJGNvbmZpZ2AuIEN1cnJlbnRseSBpdCBjYW5ub3QgYmUgcmVuYW1lZFxuLy8gYXMgaXQgd291bGQgYnJlYWsgZXhpc3RpbmcgYXBwcyB0aGF0IHNldCB0aGUgcGFyYW1ldGVyIGJ5IG5hbWUuXG5AZnVuY3Rpb24gbWF0LWRhcmstdGhlbWUoJHByaW1hcnksICRhY2NlbnQ6IG51bGwsICR3YXJuOiBtYXQtcGFsZXR0ZSgkbWF0LXJlZCkpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgY29udGFpbmVyIG9iamVjdCBmb3IgdGhlIGluZGl2aWR1YWwgY29tcG9uZW50IHRoZW1lIG1peGlucy4gQ29uc3VtZXJzXG4gIC8vIGNhbiBjb25zdHJ1Y3Qgc3VjaCBhbiBvYmplY3QgYnkgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBvciBieSBidWlsZGluZyB0aGUgb2JqZWN0IG1hbnVhbGx5LlxuICAvLyBUaGVyZSBhcmUgdHdvIHBvc3NpYmxlIHdheXMgdG8gaW52b2tlIHRoaXMgZnVuY3Rpb24gaW4gb3JkZXIgdG8gY3JlYXRlIHN1Y2ggYW4gb2JqZWN0OlxuICAvL1xuICAvLyAgICAoMSkgUGFzc2luZyBpbiBhIG1hcCB0aGF0IGhvbGRzIG9wdGlvbmFsIGNvbmZpZ3VyYXRpb25zIGZvciBpbmRpdmlkdWFsIHBhcnRzIG9mIHRoZVxuICAvLyAgICAgICAgdGhlbWluZyBzeXN0ZW0uIEZvciBgY29sb3JgIGNvbmZpZ3VyYXRpb25zLCB0aGUgZnVuY3Rpb24gb25seSBleHBlY3RzIHRoZSBwYWxldHRlc1xuICAvLyAgICAgICAgZm9yIGBwcmltYXJ5YCBhbmQgYGFjY2VudGAgKGFuZCBvcHRpb25hbGx5IGB3YXJuYCkuIFRoZSBmdW5jdGlvbiB3aWxsIGV4cGFuZCB0aGVcbiAgLy8gICAgICAgIHNob3J0aGFuZCBpbnRvIGFuIGFjdHVhbCBjb25maWd1cmF0aW9uIHRoYXQgY2FuIGJlIGNvbnN1bWVkIGluIGAtY29sb3JgIG1peGlucy5cbiAgLy8gICAgKDIpIExlZ2FjeSBwYXR0ZXJuOiBQYXNzaW5nIGluIHRoZSBwYWxldHRlcyBhcyBwYXJhbWV0ZXJzLiBUaGlzIGlzIG5vdCBhcyBmbGV4aWJsZVxuICAvLyAgICAgICAgYXMgcGFzc2luZyBpbiBhIGNvbmZpZ3VyYXRpb24gbWFwIGJlY2F1c2Ugb25seSB0aGUgYGNvbG9yYCBzeXN0ZW0gY2FuIGJlIGNvbmZpZ3VyZWQuXG4gIC8vXG4gIC8vIElmIHRoZSBsZWdhY3kgcGF0dGVybiBpcyB1c2VkLCB3ZSBnZW5lcmF0ZSBhIGNvbnRhaW5lciBvYmplY3Qgb25seSB3aXRoIGEgZGFyay10aGVtZWRcbiAgLy8gY29uZmlndXJhdGlvbiBmb3IgdGhlIGBjb2xvcmAgdGhlbWluZyBwYXJ0LlxuICBAaWYgJGFjY2VudCAhPSBudWxsIHtcbiAgICBAcmV0dXJuIF9tYXQtY3JlYXRlLWJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LXRoZW1lKF9tYXQtdmFsaWRhdGUtdGhlbWUoKFxuICAgICAgX2lzLWxlZ2FjeS10aGVtZTogdHJ1ZSxcbiAgICAgIGNvbG9yOiBfbWF0LWNyZWF0ZS1kYXJrLWNvbG9yLWNvbmZpZygkcHJpbWFyeSwgJGFjY2VudCwgJHdhcm4pLFxuICAgICkpKTtcbiAgfVxuICAvLyBJZiB0aGUgbWFwIHBhdHRlcm4gaXMgdXNlZCAoMSksIHdlIGp1c3QgcGFzcy10aHJvdWdoIHRoZSBjb25maWd1cmF0aW9ucyBmb3IgaW5kaXZpZHVhbFxuICAvLyBwYXJ0cyBvZiB0aGUgdGhlbWluZyBzeXN0ZW0sIGJ1dCB1cGRhdGUgdGhlIGBjb2xvcmAgY29uZmlndXJhdGlvbiBpZiBzZXQuIEFzIGV4cGxhaW5lZFxuICAvLyBhYm92ZSwgdGhlIGNvbG9yIHNob3J0aGFuZCB3aWxsIGJlIGV4cGFuZGVkIHRvIGFuIGFjdHVhbCBkYXJrLXRoZW1lZCBjb2xvciBjb25maWd1cmF0aW9uLlxuICAkcmVzdWx0OiAkcHJpbWFyeTtcbiAgQGlmIG1hcF9nZXQoJHByaW1hcnksIGNvbG9yKSB7XG4gICAgJGNvbG9yLXNldHRpbmdzOiBtYXBfZ2V0KCRwcmltYXJ5LCBjb2xvcik7XG4gICAgJHByaW1hcnk6IG1hcF9nZXQoJGNvbG9yLXNldHRpbmdzLCBwcmltYXJ5KTtcbiAgICAkYWNjZW50OiBtYXBfZ2V0KCRjb2xvci1zZXR0aW5ncywgYWNjZW50KTtcbiAgICAkd2FybjogbWFwX2dldCgkY29sb3Itc2V0dGluZ3MsIHdhcm4pO1xuICAgICRyZXN1bHQ6IG1hcF9tZXJnZSgkcmVzdWx0LCAoY29sb3I6IF9tYXQtY3JlYXRlLWRhcmstY29sb3ItY29uZmlnKCRwcmltYXJ5LCAkYWNjZW50LCAkd2FybikpKTtcbiAgfVxuICBAcmV0dXJuIF9tYXQtY3JlYXRlLWJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LXRoZW1lKF9tYXQtdmFsaWRhdGUtdGhlbWUoJHJlc3VsdCkpO1xufVxuXG4vLy8gR2V0cyB0aGUgY29sb3IgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBnaXZlbiB0aGVtZSBvciBjb25maWd1cmF0aW9uLlxuQGZ1bmN0aW9uIG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSwgJGRlZmF1bHQ6IG51bGwpIHtcbiAgLy8gSWYgYSBjb25maWd1cmF0aW9uIGhhcyBiZWVuIHBhc3NlZCwgcmV0dXJuIHRoZSBjb25maWcgZGlyZWN0bHkuXG4gIEBpZiBub3QgX21hdC1pcy10aGVtZS1vYmplY3QoJHRoZW1lKSB7XG4gICAgQHJldHVybiAkdGhlbWU7XG4gIH1cbiAgLy8gSWYgdGhlIHRoZW1lIGhhcyBiZWVuIGNvbnN0cnVjdGVkIHRocm91Z2ggdGhlIGxlZ2FjeSB0aGVtaW5nIEFQSSwgd2UgdXNlIHRoZSB0aGVtZSBvYmplY3RcbiAgLy8gYXMgY29sb3IgY29uZmlndXJhdGlvbiBpbnN0ZWFkIG9mIHRoZSBkZWRpY2F0ZWQgYGNvbG9yYCBwcm9wZXJ0eS4gV2UgZG8gdGhpcyBiZWNhdXNlIGZvclxuICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgY29waWVkIHRoZSBjb2xvciBjb25maWd1cmF0aW9uIGZyb20gYCR0aGVtZS5jb2xvcmAgdG8gYCR0aGVtZWAuXG4gIC8vIEhlbmNlIGRldmVsb3BlcnMgY291bGQgY3VzdG9taXplIHRoZSBjb2xvcnMgYXQgdG9wLWxldmVsIGFuZCB3YW50IHRvIHJlc3BlY3QgdGhlc2UgY2hhbmdlc1xuICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBsZWdhY3kgdGhlbWluZyBBUEkgaXMgcmVtb3ZlZC5cbiAgQGlmIF9tYXQtaXMtbGVnYWN5LWNvbnN0cnVjdGVkLXRoZW1lKCR0aGVtZSkge1xuICAgIEByZXR1cm4gJHRoZW1lO1xuICB9XG4gIEBpZiBtYXBfaGFzX2tleSgkdGhlbWUsIGNvbG9yKSB7XG4gICAgQHJldHVybiBtYXBfZ2V0KCR0aGVtZSwgY29sb3IpO1xuICB9XG4gIEByZXR1cm4gJGRlZmF1bHQ7XG59XG5cbi8vLyBHZXRzIHRoZSBkZW5zaXR5IGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgZ2l2ZW4gdGhlbWUgb3IgY29uZmlndXJhdGlvbi5cbkBmdW5jdGlvbiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZS1vci1jb25maWcsICRkZWZhdWx0OiAwKSB7XG4gIC8vIElmIGEgY29uZmlndXJhdGlvbiBoYXMgYmVlbiBwYXNzZWQsIHJldHVybiB0aGUgY29uZmlnIGRpcmVjdGx5LlxuICBAaWYgbm90IF9tYXQtaXMtdGhlbWUtb2JqZWN0KCR0aGVtZS1vci1jb25maWcpIHtcbiAgICBAcmV0dXJuICR0aGVtZS1vci1jb25maWc7XG4gIH1cbiAgLy8gSW4gY2FzZSBhIHRoZW1lIGhhcyBiZWVuIHBhc3NlZCwgZXh0cmFjdCB0aGUgY29uZmlndXJhdGlvbiBpZiBwcmVzZW50LFxuICAvLyBvciBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgZGVuc2l0eSBjb25maWcuXG4gIEBpZiBtYXBfaGFzX2tleSgkdGhlbWUtb3ItY29uZmlnLCBkZW5zaXR5KSB7XG4gICAgQHJldHVybiBtYXBfZ2V0KCR0aGVtZS1vci1jb25maWcsIGRlbnNpdHkpO1xuICB9XG4gIEByZXR1cm4gJGRlZmF1bHQ7XG59XG5cbi8vLyBHZXRzIHRoZSB0eXBvZ3JhcGh5IGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgZ2l2ZW4gdGhlbWUgb3IgY29uZmlndXJhdGlvbi5cbi8vLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHR5cG9ncmFwaHkgaXMgbm90IGluY2x1ZGVkIGJ5IGRlZmF1bHQuXG5AZnVuY3Rpb24gbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUtb3ItY29uZmlnLCAkZGVmYXVsdDogbnVsbCkge1xuICAvLyBJZiBhIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gcGFzc2VkLCByZXR1cm4gdGhlIGNvbmZpZyBkaXJlY3RseS5cbiAgQGlmIG5vdCBfbWF0LWlzLXRoZW1lLW9iamVjdCgkdGhlbWUtb3ItY29uZmlnKSB7XG4gICAgQHJldHVybiAkdGhlbWUtb3ItY29uZmlnO1xuICB9XG4gIC8vIEluIGNhc2UgYSB0aGVtZSBoYXMgYmVlbiBwYXNzZWQsIGV4dHJhY3QgdGhlIGNvbmZpZ3VyYXRpb24gaWYgcHJlc2VudCxcbiAgLy8gb3IgZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IHR5cG9ncmFwaHkgY29uZmlnLlxuICBAaWYgKG1hcF9oYXNfa2V5KCR0aGVtZS1vci1jb25maWcsIHR5cG9ncmFwaHkpKSB7XG4gICAgQHJldHVybiBtYXBfZ2V0KCR0aGVtZS1vci1jb25maWcsIHR5cG9ncmFwaHkpO1xuICB9XG4gIEByZXR1cm4gJGRlZmF1bHQ7XG59XG5cbi8vIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSByZXNvbHZlcyB0byBhIHRoZW1lIG9iamVjdC4gVGhlbWUgb2JqZWN0cyBhcmUgYWx3YXlzXG4vLyBvZiB0eXBlIGBtYXBgIGFuZCBjYW4gb3B0aW9uYWxseSBvbmx5IHNwZWNpZnkgYGNvbG9yYCwgYGRlbnNpdHlgIG9yIGB0eXBvZ3JhcGh5YC5cbkBmdW5jdGlvbiBfbWF0LWlzLXRoZW1lLW9iamVjdCgkdmFsdWUpIHtcbiAgQHJldHVybiB0eXBlLW9mKCR2YWx1ZSkgPT0gJ21hcCcgYW5kIChcbiAgICBtYXBfaGFzX2tleSgkdmFsdWUsIGNvbG9yKSBvclxuICAgIG1hcF9oYXNfa2V5KCR2YWx1ZSwgZGVuc2l0eSkgb3JcbiAgICBtYXBfaGFzX2tleSgkdmFsdWUsIHR5cG9ncmFwaHkpIG9yXG4gICAgbGVuZ3RoKCR2YWx1ZSkgPT0gMFxuICApO1xufVxuXG4vLyBDaGVja3Mgd2hldGhlciBhIGdpdmVuIHZhbHVlIGNvcnJlc3BvbmRzIHRvIGEgbGVnYWN5IGNvbnN0cnVjdGVkIHRoZW1lLlxuQGZ1bmN0aW9uIF9tYXQtaXMtbGVnYWN5LWNvbnN0cnVjdGVkLXRoZW1lKCR2YWx1ZSkge1xuICBAcmV0dXJuIHR5cGUtb2YoJHZhbHVlKSA9PSAnbWFwJyBhbmQgbWFwX2dldCgkdmFsdWUsICdfaXMtbGVnYWN5LXRoZW1lJyk7XG59XG5cbi8vIEdldHMgdGhlIHRoZW1lIGZyb20gdGhlIGdpdmVuIHZhbHVlIHRoYXQgaXMgZWl0aGVyIGFscmVhZHkgYSB0aGVtZSwgb3IgYSBjb2xvciBjb25maWd1cmF0aW9uLlxuLy8gVGhpcyBoYW5kbGVzIHRoZSBsZWdhY3kgY2FzZSB3aGVyZSBkZXZlbG9wZXJzIHBhc3MgYSBjb2xvciBjb25maWd1cmF0aW9uIGRpcmVjdGx5IHRvIHRoZVxuLy8gdGhlbWUgbWl4aW4uIEJlZm9yZSB3ZSBpbnRyb2R1Y2VkIHRoZSBuZXcgcGF0dGVybiBmb3IgY29uc3RydWN0aW5nIGEgdGhlbWUsIGRldmVsb3BlcnMgcGFzc2VkXG4vLyB0aGUgY29sb3IgY29uZmlndXJhdGlvbiBkaXJlY3RseSB0byB0aGUgdGhlbWUgbWl4aW5zLiBUaGlzIGNhbiBiZSBzdGlsbCB0aGUgY2FzZSBpZiBkZXZlbG9wZXJzXG4vLyBjb25zdHJ1Y3QgYSB0aGVtZSBtYW51YWxseSBhbmQgcGFzcyBpdCB0byBhIHRoZW1lLiBXZSBzdXBwb3J0IHRoaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuLy8gVE9ETyhkZXZ2ZXJzaW9uKTogcmVtb3ZlIHRoaXMgaW4gdGhlIGZ1dHVyZS4gQ29uc3RydWN0aW5nIHRoZW1lcyBtYW51YWxseSBpcyByYXJlLFxuLy8gYW5kIHRoZSBjb2RlIGNhbiBiZSBlYXNpbHkgdXBkYXRlZCB0byB0aGUgbmV3IEFQSS5cbkBmdW5jdGlvbiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICBAaWYgX21hdC1pcy10aGVtZS1vYmplY3QoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAgIEByZXR1cm4gJHRoZW1lLW9yLWNvbG9yLWNvbmZpZztcbiAgfVxuICBAcmV0dXJuIF9tYXQtY3JlYXRlLWJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LXRoZW1lKChcbiAgICBfaXMtbGVnYWN5LXRoZW1lOiB0cnVlLFxuICAgIGNvbG9yOiAkdGhlbWUtb3ItY29sb3ItY29uZmlnXG4gICkpO1xufVxuXG5cblxuLy8gV2hldGhlciBkdXBsaWNhdGlvbiB3YXJuaW5ncyBzaG91bGQgYmUgZGlzYWJsZWQuIFdhcm5pbmdzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiRtYXQtdGhlbWUtaWdub3JlLWR1cGxpY2F0aW9uLXdhcm5pbmdzOiBmYWxzZSAhZGVmYXVsdDtcblxuLy8gV2FybmluZyB0aGF0IHdpbGwgYmUgcHJpbnRlZCBpZiBkdXBsaWNhdGVkIHN0eWxlcyBhcmUgZ2VuZXJhdGVkIGJ5IGEgdGhlbWUuXG4kX21hdC10aGVtZS1kdXBsaWNhdGUtd2FybmluZzogJ1JlYWQgbW9yZSBhYm91dCBob3cgc3R5bGUgZHVwbGljYXRpb24gY2FuIGJlIGF2b2lkZWQgaW4gYSAnICtcbiAgJ2RlZGljYXRlZCBndWlkZS4gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvY29tcG9uZW50cy9ibG9iL21hc3Rlci9ndWlkZXMvZHVwbGljYXRlLXRoZW1pbmctc3R5bGVzLm1kJztcblxuLy8gVGhlc2UgdmFyaWFibGUgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuIGV4dGVybmFsbHkuIFRoZXkgdXNlIGAhZGVmYXVsdGAgdG9cbi8vIGF2b2lkIGJlaW5nIHJlc2V0IGV2ZXJ5IHRpbWUgdGhpcyBmaWxlIGlzIGltcG9ydGVkLlxuJF9tYXQtdGhlbWUtZW1pdHRlZC1jb2xvcjogKCkgIWRlZmF1bHQ7XG4kX21hdC10aGVtZS1lbWl0dGVkLXR5cG9ncmFwaHk6ICgpICFkZWZhdWx0O1xuJF9tYXQtdGhlbWUtZW1pdHRlZC1kZW5zaXR5OiAoKSAhZGVmYXVsdDtcblxuLy8gQ2hlY2tzIGlmIGNvbmZpZ3VyYXRpb25zIHRoYXQgaGF2ZSBiZWVuIGRlY2xhcmVkIGluIHRoZSBnaXZlbiB0aGVtZSBoYXZlIGJlZW4gZ2VuZXJhdGVkXG4vLyBiZWZvcmUuIElmIHNvLCB3YXJuaW5ncyB3aWxsIGJlIHJlcG9ydGVkLiBUaGlzIHNob3VsZCBub3RpZnkgZGV2ZWxvcGVycyBpbiBjYXNlIGR1cGxpY2F0ZVxuLy8gc3R5bGVzIGFyZSBhY2NpZGVudGFsbHkgZ2VuZXJhdGVkIGR1ZSB0byB3cm9uZyB1c2FnZSBvZiB0aGUgYWxsLXRoZW1lIG1peGlucy5cbi8vXG4vLyBBZGRpdGlvbmFsbHksIHRoaXMgbWl4aW4gY29udHJvbHMgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBkZW5zaXR5IGNvbmZpZ3VyYXRpb24uIEJ5XG4vLyBkZWZhdWx0LCBkZW5zaXR5IHN0eWxlcyBhcmUgZ2VuZXJhdGVkIGF0IHNjYWxlIHplcm8uIElmIHRoZSBzYW1lIGRlbnNpdHkgc3R5bGVzIHdvdWxkIGJlXG4vLyBnZW5lcmF0ZWQgYSBzZWNvbmQgdGltZSB0aG91Z2gsIHRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgY2hhbmdlIHRvIGF2b2lkIGR1cGxpY2F0ZSBzdHlsZXMuXG4vL1xuLy8gVGhlIG1peGluIGtlZXBzIHRyYWNrIG9mIGFsbCBjb25maWd1cmF0aW9ucyBpbiBhIGxpc3QgdGhhdCBpcyBzY29wZWQgdG8gdGhlIHNwZWNpZmllZFxuLy8gaWQuIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYSBnaXZlbiB0aGVtZSBjYW4gYmUgcGFzc2VkIHRvIG11bHRpcGxlIGRpc2pvaW50IHRoZW1lIG1peGluc1xuLy8gKGUuZy4gYGFuZ3VsYXItbWF0ZXJpYWwtdGhlbWVgIGFuZCBgYW5ndWxhci1tYXRlcmlhbC1tZGMtdGhlbWVgKSB3aXRob3V0IGNhdXNpbmcgYW55XG4vLyBzdHlsZSBkdXBsaWNhdGlvbi5cbkBtaXhpbiBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZywgJGlkKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAkY29sb3ItY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAkZGVuc2l0eS1jb25maWc6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgJHR5cG9ncmFwaHktY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG4gIC8vIExpc3RzIG9mIHByZXZpb3VzIGBjb2xvcmAsIGBkZW5zaXR5YCBhbmQgYHR5cG9ncmFwaHlgIGNvbmZpZ3VyYXRpb25zLlxuICAkcHJldmlvdXMtY29sb3I6IG1hcF9nZXQoJF9tYXQtdGhlbWUtZW1pdHRlZC1jb2xvciwgJGlkKSBvciAoKTtcbiAgJHByZXZpb3VzLXR5cG9ncmFwaHk6IG1hcF9nZXQoJF9tYXQtdGhlbWUtZW1pdHRlZC10eXBvZ3JhcGh5LCAkaWQpIG9yICgpO1xuICAkcHJldmlvdXMtZGVuc2l0eTogbWFwX2dldCgkX21hdC10aGVtZS1lbWl0dGVkLWRlbnNpdHksICRpZCkgb3IgKCk7XG4gIC8vIFdoZXRoZXIgZHVwbGljYXRlIGxlZ2FjeSBkZW5zaXR5IHN0eWxlcyB3b3VsZCBiZSBnZW5lcmF0ZWQuXG4gICRkdXBsaWNhdGUtbGVnYWN5LWRlbnNpdHk6IGZhbHNlO1xuXG4gIC8vIENoZWNrIGlmIHRoZSBjb2xvciBjb25maWd1cmF0aW9uIGhhcyBiZWVuIGdlbmVyYXRlZCBiZWZvcmUuXG4gIEBpZiAkY29sb3ItY29uZmlnICE9IG51bGwge1xuICAgIEBpZiBpbmRleCgkcHJldmlvdXMtY29sb3IsICRjb2xvci1jb25maWcpICE9IG51bGwgYW5kXG4gICAgICAgIG5vdCAkbWF0LXRoZW1lLWlnbm9yZS1kdXBsaWNhdGlvbi13YXJuaW5ncyB7XG4gICAgICBAd2FybiAnVGhlIHNhbWUgY29sb3Igc3R5bGVzIGFyZSBnZW5lcmF0ZWQgbXVsdGlwbGUgdGltZXMuICcgK1xuICAgICAgICAgICRfbWF0LXRoZW1lLWR1cGxpY2F0ZS13YXJuaW5nO1xuICAgIH1cbiAgICAkcHJldmlvdXMtY29sb3I6IGFwcGVuZCgkcHJldmlvdXMtY29sb3IsICRjb2xvci1jb25maWcpO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIHR5cG9ncmFwaHkgY29uZmlndXJhdGlvbiBoYXMgYmVlbiBnZW5lcmF0ZWQgYmVmb3JlLlxuICBAaWYgJHR5cG9ncmFwaHktY29uZmlnICE9IG51bGwge1xuICAgIEBpZiBpbmRleCgkcHJldmlvdXMtdHlwb2dyYXBoeSwgJHR5cG9ncmFwaHktY29uZmlnKSAhPSBudWxsIGFuZFxuICAgICAgICBub3QgJG1hdC10aGVtZS1pZ25vcmUtZHVwbGljYXRpb24td2FybmluZ3Mge1xuICAgICAgQHdhcm4gJ1RoZSBzYW1lIHR5cG9ncmFwaHkgc3R5bGVzIGFyZSBnZW5lcmF0ZWQgbXVsdGlwbGUgdGltZXMuICcgK1xuICAgICAgICAgICRfbWF0LXRoZW1lLWR1cGxpY2F0ZS13YXJuaW5nO1xuICAgIH1cbiAgICAkcHJldmlvdXMtdHlwb2dyYXBoeTogYXBwZW5kKCRwcmV2aW91cy10eXBvZ3JhcGh5LCAkdHlwb2dyYXBoeS1jb25maWcpO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIGRlbnNpdHkgY29uZmlndXJhdGlvbiBoYXMgYmVlbiBnZW5lcmF0ZWQgYmVmb3JlLlxuICBAaWYgJGRlbnNpdHktY29uZmlnICE9IG51bGwge1xuICAgIEBpZiBpbmRleCgkcHJldmlvdXMtZGVuc2l0eSwgJGRlbnNpdHktY29uZmlnKSAhPSBudWxsIHtcbiAgICAgIC8vIE9ubHkgcmVwb3J0IGEgd2FybmluZyBpZiBkZW5zaXR5IHN0eWxlcyB3b3VsZCBiZSBkdXBsaWNhdGVkIGZvciBub24tbGVnYWN5IHRoZW1lXG4gICAgICAvLyBkZWZpbml0aW9ucy4gRm9yIGxlZ2FjeSB0aGVtZXMsIHdlIGhhdmUgY29tcGF0aWJpbGl0eSBsb2dpYyB0aGF0IGF2b2lkcyBkdXBsaWNhdGlvblxuICAgICAgLy8gb2YgZGVmYXVsdCBkZW5zaXR5IHN0eWxlcy4gV2UgZG9uJ3Qgd2FudCB0byByZXBvcnQgYSB3YXJuaW5nIGluIHRob3NlIGNhc2VzLlxuICAgICAgQGlmIF9tYXQtaXMtbGVnYWN5LWNvbnN0cnVjdGVkLXRoZW1lKCR0aGVtZSkge1xuICAgICAgICAkZHVwbGljYXRlLWxlZ2FjeS1kZW5zaXR5OiB0cnVlO1xuICAgICAgfVxuICAgICAgQGVsc2UgaWYgbm90ICRtYXQtdGhlbWUtaWdub3JlLWR1cGxpY2F0aW9uLXdhcm5pbmdzIHtcbiAgICAgICAgQHdhcm4gJ1RoZSBzYW1lIGRlbnNpdHkgc3R5bGVzIGFyZSBnZW5lcmF0ZWQgbXVsdGlwbGUgdGltZXMuICcgK1xuICAgICAgICAgICAkX21hdC10aGVtZS1kdXBsaWNhdGUtd2FybmluZztcbiAgICAgIH1cbiAgICB9XG4gICAgJHByZXZpb3VzLWRlbnNpdHk6IGFwcGVuZCgkcHJldmlvdXMtZGVuc2l0eSwgJGRlbnNpdHktY29uZmlnKTtcbiAgfVxuXG4gICRfbWF0LXRoZW1lLWVtaXR0ZWQtY29sb3I6IG1hcF9tZXJnZShcbiAgICAgICRfbWF0LXRoZW1lLWVtaXR0ZWQtY29sb3IsICgkaWQ6ICRwcmV2aW91cy1jb2xvcikpICFnbG9iYWw7XG4gICRfbWF0LXRoZW1lLWVtaXR0ZWQtZGVuc2l0eTogbWFwX21lcmdlKFxuICAgICAgJF9tYXQtdGhlbWUtZW1pdHRlZC1kZW5zaXR5LCAoJGlkOiAkcHJldmlvdXMtZGVuc2l0eSkpICFnbG9iYWw7XG4gICRfbWF0LXRoZW1lLWVtaXR0ZWQtdHlwb2dyYXBoeTogbWFwX21lcmdlKFxuICAgICAgJF9tYXQtdGhlbWUtZW1pdHRlZC10eXBvZ3JhcGh5LCAoJGlkOiAkcHJldmlvdXMtdHlwb2dyYXBoeSkpICFnbG9iYWw7XG5cbiAgLy8gT3B0aW9uYWxseSwgY29uc3VtZXJzIG9mIHRoaXMgbWl4aW4gY2FuIHdyYXAgY29udGVudHMgaW5zaWRlIHNvIHRoYXQgbmVzdGVkXG4gIC8vIGR1cGxpY2F0ZSBzdHlsZSBjaGVja3MgZG8gbm90IHJlcG9ydCBhbm90aGVyIHdhcm5pbmcuIGUuZy4gaWYgZGV2ZWxvcGVycyBpbmNsdWRlXG4gIC8vIHRoZSBgYW5ndWxhci1tYXRlcmlhbC10aGVtZWAgbWl4aW4gdHdpY2UsIG9ubHkgdGhlIHRvcC1sZXZlbCBkdXBsaWNhdGUgc3R5bGVzIGNoZWNrXG4gIC8vIHNob3VsZCByZXBvcnQgYSB3YXJuaW5nLiBOb3QgYWxsIGluZGl2aWR1YWwgY29tcG9uZW50cyBzaG91bGQgcmVwb3J0IGEgd2FybmluZyB0b28uXG4gICRvcmlnLW1hdC10aGVtZS1pZ25vcmUtZHVwbGljYXRpb24td2FybmluZ3M6ICRtYXQtdGhlbWUtaWdub3JlLWR1cGxpY2F0aW9uLXdhcm5pbmdzO1xuICAkbWF0LXRoZW1lLWlnbm9yZS1kdXBsaWNhdGlvbi13YXJuaW5nczogdHJ1ZSAhZ2xvYmFsO1xuXG4gIC8vIElmIGR1cGxpY2F0ZSBkZWZhdWx0IGRlbnNpdHkgc3R5bGVzIHdvdWxkIGJlIGdlbmVyYXRlZCBmb3IgYSBsZWdhY3kgY29uc3RydWN0ZWQgdGhlbWUsXG4gIC8vIHdlIGFkanVzdCB0aGUgZGVuc2l0eSBnZW5lcmF0aW9uIHNvIHRoYXQgbm8gZGVuc2l0eSBzdHlsZXMgYXJlIGdlbmVyYXRlZCBieSBkZWZhdWx0LlxuICAvLyBJZiBubyBkZWZhdWx0IGRlbnNpdHkgc3R5bGVzIGhhdmUgYmVlbiBnZW5lcmF0ZWQgeWV0LCB3ZSBlbnN1cmUgdGhhdCB0aGUgc3R5bGVzXG4gIC8vIGFyZSBnZW5lcmF0ZWQgYXQgcm9vdC4gRm9yIGxlZ2FjeSB0aGVtZXMgb3VyIGdvYWwgaXMgdG8gZ2VuZXJhdGUgZGVmYXVsdCBkZW5zaXR5XG4gIC8vIHN0eWxlcyAqKm9uY2UqKiBhbmQgYXQgcm9vdC4gVGhpcyBtYXRjaGVzIHRoZSBvbGQgYmVoYXZpb3Igd2hlcmUgZGVuc2l0eSBzdHlsZXMgd2VyZVxuICAvLyBwYXJ0IG9mIHRoZSBiYXNlIGNvbXBvbmVudCBzdHlsZXMgKHRoYXQgZGlkIG5vdCB1c2UgdmlldyBlbmNhcHN1bGF0aW9uKS5cbiAgLy8gVE9ETzogUmVtb3ZlIHRoaXMgY29tcGF0aWJpbGl0eSBsb2dpYyB3aGVuIHRoZSBsZWdhY3kgdGhlbWluZyBBUEkgaXMgcmVtb3ZlZC5cbiAgJF9tYXQtZGVuc2l0eS1nZW5lcmF0ZS1hdC1yb290OiBfbWF0LWlzLWxlZ2FjeS1jb25zdHJ1Y3RlZC10aGVtZSgkdGhlbWUpICFnbG9iYWw7XG4gICRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtc3R5bGVzOiBub3QgJGR1cGxpY2F0ZS1sZWdhY3ktZGVuc2l0eSAhZ2xvYmFsO1xuXG4gIEBjb250ZW50O1xuICAkbWF0LXRoZW1lLWlnbm9yZS1kdXBsaWNhdGlvbi13YXJuaW5nczogJG9yaWctbWF0LXRoZW1lLWlnbm9yZS1kdXBsaWNhdGlvbi13YXJuaW5ncyAhZ2xvYmFsO1xuXG4gICRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtYXQtcm9vdDogZmFsc2UgIWdsb2JhbDtcbiAgJF9tYXQtZGVuc2l0eS1nZW5lcmF0ZS1zdHlsZXM6IHRydWUgIWdsb2JhbDtcbn1cblxuXG5cbiRtYXQtcmlwcGxlLWNvbG9yLW9wYWNpdHk6IDAuMTtcblxuQG1peGluIG1hdC1yaXBwbGUoKSB7XG5cbiAgLy8gVGhlIGhvc3QgZWxlbWVudCBvZiBhbiBtYXQtcmlwcGxlIGRpcmVjdGl2ZSBzaG91bGQgYWx3YXlzIGhhdmUgYSBwb3NpdGlvbiBvZiBcImFic29sdXRlXCIgb3JcbiAgLy8gXCJyZWxhdGl2ZVwiIHNvIHRoYXQgdGhlIHJpcHBsZXMgaW5zaWRlIGFyZSBjb3JyZWN0bHkgcG9zaXRpb25lZCByZWxhdGl2ZWx5IHRvIHRoZSBjb250YWluZXIuXG4gIC5tYXQtcmlwcGxlIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgLy8gQnkgZGVmYXVsdCwgZXZlcnkgcmlwcGxlIGNvbnRhaW5lciBzaG91bGQgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgaW4gZmF2b3Igb2YgY3JlYXRpbmcgYW5cbiAgICAvLyBlYXN5IEFQSSBmb3IgZGV2ZWxvcGVycyB1c2luZyB0aGUgTWF0UmlwcGxlIGRpcmVjdGl2ZS5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAvLyBQcm9tb3RlIGNvbnRhaW5lcnMgdGhhdCBoYXZlIHJpcHBsZXMgdG8gYSBuZXcgbGF5ZXIuIFdlIHdhbnQgdG8gdGFyZ2V0IGA6bm90KDplbXB0eSlgLFxuICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCBhbGwgcmlwcGxlIGNvbnRhaW5lcnMgdG8gaGF2ZSB0aGVpciBvd24gbGF5ZXIgc2luY2UgdGhleSdyZSB1c2VkIGluIGFcbiAgICAvLyBsb3Qgb2YgcGxhY2VzIGFuZCB0aGUgbGF5ZXIgaXMgb25seSByZWxldmFudCB3aGlsZSBhbmltYXRpbmcuIE5vdGUgdGhhdCBpZGVhbGx5IHdlJ2QgdXNlXG4gICAgLy8gdGhlIGBjb250YWluYCBwcm9wZXJ0eSBoZXJlIChzZWUgIzEzMTc1KSwgYmVjYXVzZSBgOmVtcHR5YCBjYW4gYmUgYnJva2VuIGJ5IGhhdmluZyBleHRyYVxuICAgIC8vIHRleHQgaW5zaWRlIHRoZSBlbGVtZW50LCBidXQgaXQgaXNuJ3QgdmVyeSB3ZWxsIHN1cHBvcnRlZCB5ZXQuXG4gICAgJjpub3QoOmVtcHR5KSB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1yaXBwbGUubWF0LXJpcHBsZS11bmJvdW5kZWQge1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG5cbiAgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcblxuICAgIHRyYW5zaXRpb246IG9wYWNpdHksIHRyYW5zZm9ybSAwbXMgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcblxuICAgIC8vIEluIGhpZ2ggY29udHJhc3QgbW9kZSB0aGUgcmlwcGxlIGlzIG9wYXF1ZSwgY2F1c2luZyBpdCB0byBvYnN0cnVjdCB0aGUgY29udGVudC5cbiAgICBAaW5jbHVkZSBjZGstaGlnaC1jb250cmFzdChhY3RpdmUsIG9mZikge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuLyogQ29sb3JzIGZvciB0aGUgcmlwcGxlIGVsZW1lbnRzLiovXG5AbWl4aW4gbWF0LXJpcHBsZS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwX2dldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQtYmFzZTogbWFwX2dldCgkZm9yZWdyb3VuZCwgYmFzZSk7XG5cbiAgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgLy8gSWYgdGhlIHJpcHBsZSBjb2xvciBpcyByZXNvbHZlcyB0byBhIGNvbG9yICp0eXBlKiwgd2UgY2FuIHVzZSBpdCBkaXJlY3RseSwgb3RoZXJ3aXNlXG4gICAgLy8gKGUuZy4gaXQgcmVzb2x2ZXMgdG8gYSBDU1MgdmFyaWFibGUpIHdlIGZhbGwgYmFjayB0byB1c2luZyB0aGUgY29sb3IgYW5kIHNldHRpbmcgYW4gb3BhY2l0eS5cbiAgICBAaWYgKHR5cGUtb2YoJGZvcmVncm91bmQtYmFzZSkgPT0gY29sb3IpIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoJGZvcmVncm91bmQtYmFzZSwgJG1hdC1yaXBwbGUtY29sb3Itb3BhY2l0eSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRmb3JlZ3JvdW5kLWJhc2U7XG4gICAgICBvcGFjaXR5OiAkbWF0LXJpcHBsZS1jb2xvci1vcGFjaXR5O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXJpcHBsZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXJpcHBsZScpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1yaXBwbGUtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFRoaXMgbWl4aW4gZW5zdXJlcyBhbiBlbGVtZW50IHNwYW5zIHRvIGZpbGwgdGhlIG5lYXJlc3QgYW5jZXN0b3Igd2l0aCBkZWZpbmVkIHBvc2l0aW9uaW5nLlxuQG1peGluIG1hdC1maWxsIHtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG5cblxuLy8vIE1peGluIHRoYXQgdHVybnMgb24gc3Ryb25nIGZvY3VzIGluZGljYXRvcnMuXG4vLy9cbi8vLyBAZXhhbXBsZVxuLy8vICAgLm15LWFwcCB7XG4vLy8gICAgIEBpbmNsdWRlIG1hdC1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycygkY29uZmlnKTtcbi8vLyAgIH1cbkBtaXhpbiBtYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMoJGNvbmZpZzogKCkpIHtcbiAgLy8gRGVmYXVsdCBmb2N1cyBpbmRpY2F0b3IgY29uZmlnLlxuICAkZGVmYXVsdC1jb25maWc6IChcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkLFxuICAgIGJvcmRlci13aWR0aDogM3B4LFxuICAgIGJvcmRlci1yYWRpdXM6IDRweCxcbiAgKTtcblxuICAvLyBNZXJnZSBkZWZhdWx0IGNvbmZpZyB3aXRoIHVzZXIgY29uZmlnLlxuICAkY29uZmlnOiBtYXAtbWVyZ2UoJGRlZmF1bHQtY29uZmlnLCAkY29uZmlnKTtcbiAgJGJvcmRlci1zdHlsZTogbWFwLWdldCgkY29uZmlnLCBib3JkZXItc3R5bGUpO1xuICAkYm9yZGVyLXdpZHRoOiBtYXAtZ2V0KCRjb25maWcsIGJvcmRlci13aWR0aCk7XG4gICRib3JkZXItcmFkaXVzOiBtYXAtZ2V0KCRjb25maWcsIGJvcmRlci1yYWRpdXMpO1xuXG4gIC8vIEJhc2Ugc3R5bGVzIGZvciBmb2N1cyBpbmRpY2F0b3JzLlxuICAubWF0LWZvY3VzLWluZGljYXRvcjo6YmVmb3JlIHtcbiAgICBAaW5jbHVkZSBtYXQtZmlsbCgpO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgYm9yZGVyOiAkYm9yZGVyLXdpZHRoICRib3JkZXItc3R5bGUgdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXM7XG4gIH1cblxuICAvLyBCeSBkZWZhdWx0LCBhbGwgZm9jdXMgaW5kaWNhdG9ycyBhcmUgZmx1c2ggd2l0aCB0aGUgYm91bmRpbmcgYm94IG9mIHRoZWlyXG4gIC8vIGhvc3QgZWxlbWVudC4gRm9yIHBhcnRpY3VsYXIgZWxlbWVudHMgKGxpc3RlZCBiZWxvdyksIGRlZmF1bHQgaW5zZXQvb2Zmc2V0XG4gIC8vIHZhbHVlcyBhcmUgbmVjZXNzYXJ5IHRvIGVuc3VyZSB0aGF0IHRoZSBmb2N1cyBpbmRpY2F0b3IgaXMgc3VmZmljaWVudGx5XG4gIC8vIGNvbnRyYXN0aXZlIGFuZCByZW5kZXJzIGFwcHJvcHJpYXRlbHkuXG5cbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3IubWF0LWZsYXQtYnV0dG9uOjpiZWZvcmUsXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1yYWlzZWQtYnV0dG9uOjpiZWZvcmUsXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1mYWI6OmJlZm9yZSxcbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3IubWF0LW1pbmktZmFiOjpiZWZvcmUsXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1jaGlwOjpiZWZvcmUsXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1zb3J0LWhlYWRlci1jb250YWluZXI6OmJlZm9yZSB7XG4gICAgbWFyZ2luOiAtKCRib3JkZXItd2lkdGggKyAycHgpO1xuICB9XG5cbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3IubWF0LXN0cm9rZWQtYnV0dG9uOjpiZWZvcmUsXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yLm1hdC1jYWxlbmRhci1ib2R5LWNlbGwtY29udGVudDo6YmVmb3JlIHtcbiAgICBtYXJnaW46IC0oJGJvcmRlci13aWR0aCArIDNweCk7XG4gIH1cblxuICAubWF0LWZvY3VzLWluZGljYXRvci5tYXQtdGFiLWxpbms6OmJlZm9yZSxcbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3IubWF0LXRhYi1sYWJlbDo6YmVmb3JlIHtcbiAgICBtYXJnaW46IDVweDtcbiAgfVxuXG4gIC8vIFJlbmRlciB0aGUgZm9jdXMgaW5kaWNhdG9yIG9uIGZvY3VzLiBEZWZpbmluZyBhIHBzZXVkbyBlbGVtZW50J3NcbiAgLy8gY29udGVudCB3aWxsIGNhdXNlIGl0IHRvIHJlbmRlci5cblxuICAvLyBDaGVja2JveGVzLCByYWRpb3MsIGFuZCBzbGlkZSB0b2dnbGVzIHJlbmRlciBmb2N1cyBpbmRpY2F0b3JzIHdoZW4gdGhlXG4gIC8vIGFzc29jaWF0ZWQgdmlzdWFsbHktaGlkZGVuIGlucHV0IGlzIGZvY3VzZWQuXG4gIC5tYXQtY2hlY2tib3gtaW5wdXQ6Zm9jdXMgfiAubWF0LWZvY3VzLWluZGljYXRvcjo6YmVmb3JlLFxuICAubWF0LXJhZGlvLWlucHV0OmZvY3VzIH4gLm1hdC1mb2N1cy1pbmRpY2F0b3I6OmJlZm9yZSxcbiAgLm1hdC1zbGlkZS10b2dnbGUtaW5wdXQ6Zm9jdXMgfiAubWF0LXNsaWRlLXRvZ2dsZS10aHVtYi1jb250YWluZXIgLm1hdC1mb2N1cy1pbmRpY2F0b3I6OmJlZm9yZSxcblxuICAvLyBGb3Igb3B0aW9ucywgcmVuZGVyIHRoZSBmb2N1cyBpbmRpY2F0b3Igd2hlbiB0aGUgY2xhc3MgLm1hdC1hY3RpdmVcbiAgLy8gaXMgcHJlc2VudC5cbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3IubWF0LW9wdGlvbi5tYXQtYWN0aXZlOjpiZWZvcmUsXG5cbiAgLy8gRm9yIGNhbGVuZGFyIGNlbGxzLCByZW5kZXIgdGhlIGZvY3VzIGluZGljYXRvciB3aGVuIHRoZSBwYXJlbnQgY2VsbCBpc1xuICAvLyBmb2N1c2VkLlxuICAubWF0LWNhbGVuZGFyLWJvZHktY2VsbDpmb2N1cyAubWF0LWZvY3VzLWluZGljYXRvcjo6YmVmb3JlLFxuXG4gIC8vIEZvciBhbGwgb3RoZXIgY29tcG9uZW50cywgcmVuZGVyIHRoZSBmb2N1cyBpbmRpY2F0b3Igb24gZm9jdXMuXG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yOmZvY3VzOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICB9XG59XG5cbi8vIE1peGluIHRoYXQgYXBwbGllcyB0aGUgYm9yZGVyIGNvbG9yIGZvciB0aGUgZm9jdXMgaW5kaWNhdG9ycy5cbkBtaXhpbiBfbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLWJvcmRlci1jb2xvcigkY29sb3IpIHtcbiAgLm1hdC1mb2N1cy1pbmRpY2F0b3I6OmJlZm9yZSB7XG4gICAgYm9yZGVyLWNvbG9yOiAkY29sb3I7XG4gIH1cbn1cblxuQG1peGluIG1hdC1zdHJvbmctZm9jdXMtaW5kaWNhdG9ycy1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICBAaW5jbHVkZSBfbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLWJvcmRlci1jb2xvcihtYXQtY29sb3IobWFwX2dldCgkY29uZmlnLCBwcmltYXJ5KSkpO1xufVxuXG4vLy8gTWl4aW4gdGhhdCBzZXRzIHRoZSBjb2xvciBvZiB0aGUgZm9jdXMgaW5kaWNhdG9ycy5cbi8vL1xuLy8vIEBwYXJhbSB7Y29sb3J8bWFwfSAkdGhlbWUtb3ItY29sb3Jcbi8vLyAgIElmIHRoZW1lLCBmb2N1cyBpbmRpY2F0b3JzIGFyZSBzZXQgdG8gdGhlIHByaW1hcnkgY29sb3Igb2YgdGhlIHRoZW1lLiBJZlxuLy8vICAgY29sb3IsIGZvY3VzIGluZGljYXRvcnMgYXJlIHNldCB0byB0aGF0IGNvbG9yLlxuLy8vXG4vLy8gQGV4YW1wbGVcbi8vLyAgIC5kZW1vLWRhcmstdGhlbWUge1xuLy8vICAgICBAaW5jbHVkZSBtYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMtdGhlbWUoJGRhcmstdGhlbWUtbWFwKTtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlXG4vLy8gICAuZGVtby1yZWQtdGhlbWUge1xuLy8vICAgICBAaW5jbHVkZSBtYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMtdGhlbWUoI2YwMCk7XG4vLy8gICB9XG4vKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF0ZXJpYWwvdGhlbWUtbWl4aW4tYXBpICovXG5AbWl4aW4gbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLXRoZW1lKCR0aGVtZS1vci1jb2xvcikge1xuICBAaWYgdHlwZS1vZigkdGhlbWUtb3ItY29sb3IpICE9ICdtYXAnIHtcbiAgICBAaW5jbHVkZSBfbWF0LXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLWJvcmRlci1jb2xvcigkdGhlbWUtb3ItY29sb3IpO1xuICB9XG4gIEBlbHNlIHtcbiAgICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3IpO1xuICAgIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMnKSB7XG4gICAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgICBAaW5jbHVkZSBtYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMtY29sb3IoJGNvbG9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gTWl4aW4gdGhhdCBlbnN1cmVzIGZvY3VzIGluZGljYXRvciBob3N0IGVsZW1lbnRzIGFyZSBwb3NpdGlvbmVkIHNvIHRoYXQgdGhlIGZvY3VzIGluZGljYXRvclxuLy8gcHNldWRvIGVsZW1lbnQgd2l0aGluIGlzIHBvc2l0aW9uZWQgcmVsYXRpdmUgdG8gdGhlIGhvc3QuIFByaXZhdGUgbWl4aW4gaW5jbHVkZWQgd2l0aGluXG4vLyBgbWF0LWNvcmVgLlxuQG1peGluIF9tYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMtcG9zaXRpb25pbmcoKSB7XG4gIC5tYXQtZm9jdXMtaW5kaWNhdG9yIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbn1cblxuXG5cblxuLy8gVXRpbGl0eSBmb3IgZmV0Y2hpbmcgYSBuZXN0ZWQgdmFsdWUgZnJvbSBhIHR5cG9ncmFwaHkgY29uZmlnLlxuQGZ1bmN0aW9uIF9tYXQtZ2V0LXR5cGUtdmFsdWUoJGNvbmZpZywgJGxldmVsLCAkbmFtZSkge1xuICBAcmV0dXJuIG1hcC1nZXQobWFwLWdldCgkY29uZmlnLCAkbGV2ZWwpLCAkbmFtZSk7XG59XG5cbi8vIEdldHMgdGhlIGZvbnQgc2l6ZSBmb3IgYSBsZXZlbCBpbnNpZGUgYSB0eXBvZ3JhcGh5IGNvbmZpZy5cbkBmdW5jdGlvbiBtYXQtZm9udC1zaXplKCRjb25maWcsICRsZXZlbCkge1xuICBAcmV0dXJuIF9tYXQtZ2V0LXR5cGUtdmFsdWUoJGNvbmZpZywgJGxldmVsLCBmb250LXNpemUpO1xufVxuXG4vLyBHZXRzIHRoZSBsaW5lIGhlaWdodCBmb3IgYSBsZXZlbCBpbnNpZGUgYSB0eXBvZ3JhcGh5IGNvbmZpZy5cbkBmdW5jdGlvbiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgJGxldmVsKSB7XG4gIEByZXR1cm4gX21hdC1nZXQtdHlwZS12YWx1ZSgkY29uZmlnLCAkbGV2ZWwsIGxpbmUtaGVpZ2h0KTtcbn1cblxuLy8gR2V0cyB0aGUgZm9udCB3ZWlnaHQgZm9yIGEgbGV2ZWwgaW5zaWRlIGEgdHlwb2dyYXBoeSBjb25maWcuXG5AZnVuY3Rpb24gbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsICRsZXZlbCkge1xuICBAcmV0dXJuIF9tYXQtZ2V0LXR5cGUtdmFsdWUoJGNvbmZpZywgJGxldmVsLCBmb250LXdlaWdodCk7XG59XG5cbi8vIEdldHMgdGhlIGxldHRlciBzcGFjaW5nIGZvciBhIGxldmVsIGluc2lkZSBhIHR5cG9ncmFwaHkgY29uZmlnLlxuQGZ1bmN0aW9uIG1hdC1sZXR0ZXItc3BhY2luZygkY29uZmlnLCAkbGV2ZWwpIHtcbiAgQHJldHVybiBfbWF0LWdldC10eXBlLXZhbHVlKCRjb25maWcsICRsZXZlbCwgbGV0dGVyLXNwYWNpbmcpO1xufVxuXG4vLyBHZXRzIHRoZSBmb250LWZhbWlseSBmcm9tIGEgdHlwb2dyYXBoeSBjb25maWcgYW5kIHJlbW92ZXMgdGhlIHF1b3RlcyBhcm91bmQgaXQuXG5AZnVuY3Rpb24gbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsICRsZXZlbDogbnVsbCkge1xuICAkZm9udC1mYW1pbHk6IG1hcC1nZXQoJGNvbmZpZywgZm9udC1mYW1pbHkpO1xuXG4gIEBpZiAkbGV2ZWwgIT0gbnVsbCB7XG4gICAgJGZvbnQtZmFtaWx5OiBfbWF0LWdldC10eXBlLXZhbHVlKCRjb25maWcsICRsZXZlbCwgZm9udC1mYW1pbHkpO1xuICB9XG5cbiAgLy8gR3VhcmQgYWdhaW5zdCB1bnF1b3Rpbmcgbm9uLXN0cmluZyB2YWx1ZXMsIGJlY2F1c2UgaXQncyBkZXByZWNhdGVkLlxuICBAcmV0dXJuIGlmKHR5cGUtb2YoJGZvbnQtZmFtaWx5KSA9PSBzdHJpbmcsIHVucXVvdGUoJGZvbnQtZmFtaWx5KSwgJGZvbnQtZmFtaWx5KTtcbn1cblxuLy8gT3V0cHV0cyB0aGUgc2hvcnRoYW5kIGBmb250YCBDU1MgcHJvcGVydHksIGJhc2VkIG9uIGEgc2V0IG9mIHR5cG9ncmFwaHkgdmFsdWVzLiBGYWxscyBiYWNrIHRvXG4vLyB0aGUgaW5kaXZpZHVhbCBwcm9wZXJ0aWVzIGlmIGEgdmFsdWUgdGhhdCBpc24ndCBhbGxvd2VkIGluIHRoZSBzaG9ydGhhbmQgaXMgcGFzc2VkIGluLlxuQG1peGluIG1hdC10eXBvZ3JhcGh5LWZvbnQtc2hvcnRoYW5kKCRmb250LXNpemUsICRmb250LXdlaWdodCwgJGxpbmUtaGVpZ2h0LCAkZm9udC1mYW1pbHkpIHtcbiAgLy8gSWYgYW55IG9mIHRoZSB2YWx1ZXMgYXJlIHNldCB0byBgaW5oZXJpdGAsIHdlIGNhbid0IHVzZSB0aGUgc2hvcnRoYW5kXG4gIC8vIHNvIHdlIGZhbGwgYmFjayB0byBwYXNzaW5nIGluIHRoZSBpbmRpdmlkdWFsIHByb3BlcnRpZXMuXG4gIEBpZiAoJGZvbnQtc2l6ZSA9PSBpbmhlcml0IG9yXG4gICAgICAgJGZvbnQtd2VpZ2h0ID09IGluaGVyaXQgb3JcbiAgICAgICAkbGluZS1oZWlnaHQgPT0gaW5oZXJpdCBvclxuICAgICAgICRmb250LWZhbWlseSA9PSBpbmhlcml0IG9yXG4gICAgICAgJGZvbnQtc2l6ZSA9PSBudWxsIG9yXG4gICAgICAgJGZvbnQtd2VpZ2h0ID09IG51bGwgb3JcbiAgICAgICAkbGluZS1oZWlnaHQgPT0gbnVsbCBvclxuICAgICAgICRmb250LWZhbWlseSA9PSBudWxsKSB7XG5cbiAgICBmb250LXNpemU6ICRmb250LXNpemU7XG4gICAgZm9udC13ZWlnaHQ6ICRmb250LXdlaWdodDtcbiAgICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0O1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHk7XG4gIH1cbiAgQGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSB1c2UgdGhlIHNob3J0aGFuZCBgZm9udGAsIGJlY2F1c2UgaXQncyB0aGUgbGVhc3QgYW1vdW50IG9mIGJ5dGVzLiBOb3RlXG4gICAgLy8gdGhhdCB3ZSBuZWVkIHRvIHVzZSBpbnRlcnBvbGF0aW9uIGZvciBgZm9udC1zaXplL2xpbmUtaGVpZ2h0YCBpbiBvcmRlciB0byBwcmV2ZW50XG4gICAgLy8gU2FzcyBmcm9tIGRpdmlkaW5nIHRoZSB0d28gdmFsdWVzLlxuICAgIGZvbnQ6ICRmb250LXdlaWdodCAjeyRmb250LXNpemV9LyN7JGxpbmUtaGVpZ2h0fSAkZm9udC1mYW1pbHk7XG4gIH1cbn1cblxuLy8gQ29udmVydHMgYSB0eXBvZ3JhcGh5IGxldmVsIGludG8gQ1NTIHN0eWxlcy5cbkBtaXhpbiBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgJGxldmVsKSB7XG4gICRmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgJGxldmVsKTtcbiAgJGZvbnQtd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgJGxldmVsKTtcbiAgJGxpbmUtaGVpZ2h0OiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgJGxldmVsKTtcbiAgJGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZywgJGxldmVsKTtcblxuICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1mb250LXNob3J0aGFuZCgkZm9udC1zaXplLCAkZm9udC13ZWlnaHQsICRsaW5lLWhlaWdodCwgJGZvbnQtZmFtaWx5KTtcbiAgbGV0dGVyLXNwYWNpbmc6IG1hdC1sZXR0ZXItc3BhY2luZygkY29uZmlnLCAkbGV2ZWwpO1xufVxuXG5cbkBtaXhpbiBtYXQtb3B0aW9uLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG5cbiAgLm1hdC1vcHRpb24ge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuXG4gICAgJjpob3Zlcjpub3QoLm1hdC1vcHRpb24tZGlzYWJsZWQpLFxuICAgICY6Zm9jdXM6bm90KC5tYXQtb3B0aW9uLWRpc2FibGVkKSB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGhvdmVyKTtcbiAgICB9XG5cbiAgICAvLyBJbiBtdWx0aXBsZSBtb2RlIHRoZXJlIGlzIGEgY2hlY2tib3ggdG8gc2hvdyB0aGF0IHRoZSBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAgJi5tYXQtc2VsZWN0ZWQ6bm90KC5tYXQtb3B0aW9uLW11bHRpcGxlKTpub3QoLm1hdC1vcHRpb24tZGlzYWJsZWQpIHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgaG92ZXIpO1xuICAgIH1cblxuICAgICYubWF0LWFjdGl2ZSB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGhvdmVyKTtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICAgIH1cblxuICAgICYubWF0LW9wdGlvbi1kaXNhYmxlZCB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBoaW50LXRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtcHJpbWFyeSAubWF0LW9wdGlvbi5tYXQtc2VsZWN0ZWQ6bm90KC5tYXQtb3B0aW9uLWRpc2FibGVkKSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSwgdGV4dCk7XG4gIH1cblxuICAubWF0LWFjY2VudCAubWF0LW9wdGlvbi5tYXQtc2VsZWN0ZWQ6bm90KC5tYXQtb3B0aW9uLWRpc2FibGVkKSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkYWNjZW50LCB0ZXh0KTtcbiAgfVxuXG4gIC5tYXQtd2FybiAubWF0LW9wdGlvbi5tYXQtc2VsZWN0ZWQ6bm90KC5tYXQtb3B0aW9uLWRpc2FibGVkKSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkd2FybiwgdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1vcHRpb24tdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtb3B0aW9uIHtcbiAgICBmb250OiB7XG4gICAgICBmYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgICAgIHNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgc3ViaGVhZGluZy0yKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtb3B0aW9uLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1vcHRpb24tdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1vcHRpb24nKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtb3B0aW9uLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtb3B0aW9uLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtb3B0aW9uLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuQG1peGluIG1hdC1vcHRncm91cC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LW9wdGdyb3VwLWxhYmVsIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG4gIH1cblxuICAubWF0LW9wdGdyb3VwLWRpc2FibGVkIC5tYXQtb3B0Z3JvdXAtbGFiZWwge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGhpbnQtdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1vcHRncm91cC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1vcHRncm91cC1sYWJlbCB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGJvZHktMik7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtb3B0Z3JvdXAtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LW9wdGdyb3VwLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtb3B0Z3JvdXAnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtb3B0Z3JvdXAtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1vcHRncm91cC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LW9wdGdyb3VwLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5AbWl4aW4gbWF0LXBzZXVkby1jaGVja2JveC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuXG4gIC8vIE5PVEUodHJhdmlza2F1Zm1hbik6IFdoaWxlIHRoZSBzcGVjIGNhbGxzIGZvciB0cmFuc2x1Y2VudCBibGFja3Mvd2hpdGVzIGZvciBkaXNhYmxlZCBjb2xvcnMsXG4gIC8vIHRoaXMgZG9lcyBub3Qgd29yayB3ZWxsIHdpdGggZWxlbWVudHMgbGF5ZXJlZCBvbiB0b3Agb2Ygb25lIGFub3RoZXIuIFRvIGdldCBhcm91bmQgdGhpcyB3ZVxuICAvLyBibGVuZCB0aGUgY29sb3JzIHRvZ2V0aGVyIGJhc2VkIG9uIHRoZSBiYXNlIGNvbG9yIGFuZCB0aGUgdGhlbWUgYmFja2dyb3VuZC5cbiAgJHdoaXRlLTMwcGN0LW9wYWNpdHktb24tZGFyazogIzY4Njg2ODtcbiAgJGJsYWNrLTI2cGN0LW9wYWNpdHktb24tbGlnaHQ6ICNiMGIwYjA7XG4gICRkaXNhYmxlZC1jb2xvcjogaWYoJGlzLWRhcmstdGhlbWUsICR3aGl0ZS0zMHBjdC1vcGFjaXR5LW9uLWRhcmssICRibGFjay0yNnBjdC1vcGFjaXR5LW9uLWxpZ2h0KTtcbiAgJGNvbG9yZWQtYm94LXNlbGVjdG9yOiAnLm1hdC1wc2V1ZG8tY2hlY2tib3gtY2hlY2tlZCwgLm1hdC1wc2V1ZG8tY2hlY2tib3gtaW5kZXRlcm1pbmF0ZSc7XG5cbiAgLm1hdC1wc2V1ZG8tY2hlY2tib3gge1xuICAgIGNvbG9yOiBtYXQtY29sb3IobWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKSwgc2Vjb25kYXJ5LXRleHQpO1xuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgYmFja2dyb3VuZCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1wc2V1ZG8tY2hlY2tib3gtZGlzYWJsZWQge1xuICAgIGNvbG9yOiAkZGlzYWJsZWQtY29sb3I7XG4gIH1cblxuICAubWF0LXByaW1hcnkgLm1hdC1wc2V1ZG8tY2hlY2tib3gtY2hlY2tlZCxcbiAgLm1hdC1wcmltYXJ5IC5tYXQtcHNldWRvLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUge1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcihtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpKTtcbiAgfVxuXG4gIC8vIERlZmF1bHQgdG8gdGhlIGFjY2VudCBjb2xvci4gTm90ZSB0aGF0IHRoZSBwc2V1ZG8gY2hlY2tib3hlcyBhcmUgbWVhbnQgdG8gaW5oZXJpdCB0aGVcbiAgLy8gdGhlbWUgZnJvbSB0aGVpciBwYXJlbnQsIHJhdGhlciB0aGFuIGltcGxlbWVudGluZyB0aGVpciBvd24gdGhlbWluZywgd2hpY2ggaXMgd2h5IHdlXG4gIC8vIGRvbid0IGF0dGFjaCB0byB0aGUgYG1hdC0qYCBjbGFzc2VzLiBBbHNvIG5vdGUgdGhhdCB0aGlzIG5lZWRzIHRvIGJlIGJlbG93IGAubWF0LXByaW1hcnlgXG4gIC8vIGluIG9yZGVyIHRvIGFsbG93IGZvciB0aGUgY29sb3IgdG8gYmUgb3ZlcndyaXR0ZW4gaWYgdGhlIGNoZWNrYm94IGlzIGluc2lkZSBhIHBhcmVudCB0aGF0XG4gIC8vIGhhcyBgbWF0LWFjY2VudGAgYW5kIGlzIHBsYWNlZCBpbnNpZGUgYW5vdGhlciBwYXJlbnQgdGhhdCBoYXMgYG1hdC1wcmltYXJ5YC5cbiAgLm1hdC1wc2V1ZG8tY2hlY2tib3gtY2hlY2tlZCxcbiAgLm1hdC1wc2V1ZG8tY2hlY2tib3gtaW5kZXRlcm1pbmF0ZSxcbiAgLm1hdC1hY2NlbnQgLm1hdC1wc2V1ZG8tY2hlY2tib3gtY2hlY2tlZCxcbiAgLm1hdC1hY2NlbnQgLm1hdC1wc2V1ZG8tY2hlY2tib3gtaW5kZXRlcm1pbmF0ZSB7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KSk7XG4gIH1cblxuICAubWF0LXdhcm4gLm1hdC1wc2V1ZG8tY2hlY2tib3gtY2hlY2tlZCxcbiAgLm1hdC13YXJuIC5tYXQtcHNldWRvLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUge1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcihtYXAtZ2V0KCRjb25maWcsIHdhcm4pKTtcbiAgfVxuXG4gIC5tYXQtcHNldWRvLWNoZWNrYm94LWNoZWNrZWQsXG4gIC5tYXQtcHNldWRvLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUge1xuICAgICYubWF0LXBzZXVkby1jaGVja2JveC1kaXNhYmxlZCB7XG4gICAgICBiYWNrZ3JvdW5kOiAkZGlzYWJsZWQtY29sb3I7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtcHNldWRvLWNoZWNrYm94LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIF9tYXQtcHNldWRvLWNoZWNrYm94LWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1wc2V1ZG8tY2hlY2tib3gtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1wc2V1ZG8tY2hlY2tib3gnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcHNldWRvLWNoZWNrYm94LWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtcHNldWRvLWNoZWNrYm94LWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcHNldWRvLWNoZWNrYm94LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gUmVwcmVzZW50cyBhIHR5cG9ncmFwaHkgbGV2ZWwgZnJvbSB0aGUgTWF0ZXJpYWwgZGVzaWduIHNwZWMuXG5AZnVuY3Rpb24gbWF0LXR5cG9ncmFwaHktbGV2ZWwoXG4gICRmb250LXNpemUsXG4gICRsaW5lLWhlaWdodDogJGZvbnQtc2l6ZSxcbiAgJGZvbnQtd2VpZ2h0OiA0MDAsXG4gICRmb250LWZhbWlseTogbnVsbCxcbiAgJGxldHRlci1zcGFjaW5nOiBub3JtYWwpIHtcblxuICBAcmV0dXJuIChcbiAgICBmb250LXNpemU6ICRmb250LXNpemUsXG4gICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodCxcbiAgICBmb250LXdlaWdodDogJGZvbnQtd2VpZ2h0LFxuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHksXG4gICAgbGV0dGVyLXNwYWNpbmc6ICRsZXR0ZXItc3BhY2luZ1xuICApO1xufVxuXG4vLyBSZXByZXNlbnRzIGEgY29sbGVjdGlvbiBvZiB0eXBvZ3JhcGh5IGxldmVscy5cbi8vIERlZmF1bHRzIGNvbWUgZnJvbSBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvc3R5bGUvdHlwb2dyYXBoeS5odG1sXG4vLyBOb3RlOiBUaGUgc3BlYyBkb2Vzbid0IG1lbnRpb24gbGV0dGVyIHNwYWNpbmcuIFRoZSB2YWx1ZXMgaGVyZSBjb21lIGZyb21cbi8vIGV5ZWJhbGxpbmcgaXQgdW50aWwgaXQgbG9va2VkIGV4YWN0bHkgbGlrZSB0aGUgc3BlYyBleGFtcGxlcy5cbkBmdW5jdGlvbiBtYXQtdHlwb2dyYXBoeS1jb25maWcoXG4gICRmb250LWZhbWlseTogICAnUm9ib3RvLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWYnLFxuICAkZGlzcGxheS00OiAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoMTEycHgsIDExMnB4LCAzMDAsICRsZXR0ZXItc3BhY2luZzogLTAuMDVlbSksXG4gICRkaXNwbGF5LTM6ICAgICBtYXQtdHlwb2dyYXBoeS1sZXZlbCg1NnB4LCA1NnB4LCA0MDAsICRsZXR0ZXItc3BhY2luZzogLTAuMDJlbSksXG4gICRkaXNwbGF5LTI6ICAgICBtYXQtdHlwb2dyYXBoeS1sZXZlbCg0NXB4LCA0OHB4LCA0MDAsICRsZXR0ZXItc3BhY2luZzogLTAuMDA1ZW0pLFxuICAkZGlzcGxheS0xOiAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoMzRweCwgNDBweCwgNDAwKSxcbiAgJGhlYWRsaW5lOiAgICAgIG1hdC10eXBvZ3JhcGh5LWxldmVsKDI0cHgsIDMycHgsIDQwMCksXG4gICR0aXRsZTogICAgICAgICBtYXQtdHlwb2dyYXBoeS1sZXZlbCgyMHB4LCAzMnB4LCA1MDApLFxuICAkc3ViaGVhZGluZy0yOiAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoMTZweCwgMjhweCwgNDAwKSxcbiAgJHN1YmhlYWRpbmctMTogIG1hdC10eXBvZ3JhcGh5LWxldmVsKDE1cHgsIDI0cHgsIDQwMCksXG4gICRib2R5LTI6ICAgICAgICBtYXQtdHlwb2dyYXBoeS1sZXZlbCgxNHB4LCAyNHB4LCA1MDApLFxuICAkYm9keS0xOiAgICAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoMTRweCwgMjBweCwgNDAwKSxcbiAgJGNhcHRpb246ICAgICAgIG1hdC10eXBvZ3JhcGh5LWxldmVsKDEycHgsIDIwcHgsIDQwMCksXG4gICRidXR0b246ICAgICAgICBtYXQtdHlwb2dyYXBoeS1sZXZlbCgxNHB4LCAxNHB4LCA1MDApLFxuICAvLyBMaW5lLWhlaWdodCBtdXN0IGJlIHVuaXQtbGVzcyBmcmFjdGlvbiBvZiB0aGUgZm9udC1zaXplLlxuICAkaW5wdXQ6ICAgICAgICAgbWF0LXR5cG9ncmFwaHktbGV2ZWwoaW5oZXJpdCwgMS4xMjUsIDQwMClcbikge1xuXG4gIC8vIERlY2xhcmUgYW4gaW5pdGlhbCBtYXAgd2l0aCBhbGwgb2YgdGhlIGxldmVscy5cbiAgJGNvbmZpZzogKFxuICAgIGRpc3BsYXktNDogICAgICAkZGlzcGxheS00LFxuICAgIGRpc3BsYXktMzogICAgICAkZGlzcGxheS0zLFxuICAgIGRpc3BsYXktMjogICAgICAkZGlzcGxheS0yLFxuICAgIGRpc3BsYXktMTogICAgICAkZGlzcGxheS0xLFxuICAgIGhlYWRsaW5lOiAgICAgICAkaGVhZGxpbmUsXG4gICAgdGl0bGU6ICAgICAgICAgICR0aXRsZSxcbiAgICBzdWJoZWFkaW5nLTI6ICAgJHN1YmhlYWRpbmctMixcbiAgICBzdWJoZWFkaW5nLTE6ICAgJHN1YmhlYWRpbmctMSxcbiAgICBib2R5LTI6ICAgICAgICAgJGJvZHktMixcbiAgICBib2R5LTE6ICAgICAgICAgJGJvZHktMSxcbiAgICBjYXB0aW9uOiAgICAgICAgJGNhcHRpb24sXG4gICAgYnV0dG9uOiAgICAgICAgICRidXR0b24sXG4gICAgaW5wdXQ6ICAgICAgICAgICRpbnB1dCxcbiAgKTtcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGxldmVscyBhbmQgc2V0IHRoZSBgZm9udC1mYW1pbHlgIG9mIHRoZSBvbmVzIHRoYXQgZG9uJ3QgaGF2ZSBvbmUgdG8gdGhlIGJhc2UuXG4gIC8vIE5vdGUgdGhhdCBTYXNzIGNhbid0IG1vZGlmeSBtYXBzIGluIHBsYWNlLCB3aGljaCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gbWVyZ2UgYW5kIHJlLWFzc2lnbi5cbiAgQGVhY2ggJGtleSwgJGxldmVsIGluICRjb25maWcge1xuICAgIEBpZiBtYXAtZ2V0KCRsZXZlbCwgZm9udC1mYW1pbHkpID09IG51bGwge1xuICAgICAgJG5ldy1sZXZlbDogbWFwLW1lcmdlKCRsZXZlbCwgKGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHkpKTtcbiAgICAgICRjb25maWc6IG1hcC1tZXJnZSgkY29uZmlnLCAoJGtleTogJG5ldy1sZXZlbCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB0aGUgYmFzZSBmb250IGZhbWlseSB0byB0aGUgY29uZmlnLlxuICBAcmV0dXJuIG1hcC1tZXJnZSgkY29uZmlnLCAoZm9udC1mYW1pbHk6ICRmb250LWZhbWlseSkpO1xufVxuXG4vLyBBZGRzIHRoZSBiYXNlIHR5cG9ncmFwaHkgc3R5bGVzLCBiYXNlZCBvbiBhIGNvbmZpZy5cbi8qIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXRlcmlhbC90aGVtZS1taXhpbi1hcGkgKi9cbkBtaXhpbiBtYXQtYmFzZS10eXBvZ3JhcGh5KCRjb25maWcsICRzZWxlY3RvcjogJy5tYXQtdHlwb2dyYXBoeScpIHtcbiAgLm1hdC1oMSwgLm1hdC1oZWFkbGluZSwgI3skc2VsZWN0b3J9IGgxIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgaGVhZGxpbmUpO1xuICAgIG1hcmdpbjogMCAwIDE2cHg7XG4gIH1cblxuICAubWF0LWgyLCAubWF0LXRpdGxlLCAjeyRzZWxlY3Rvcn0gaDIge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCB0aXRsZSk7XG4gICAgbWFyZ2luOiAwIDAgMTZweDtcbiAgfVxuXG4gIC5tYXQtaDMsIC5tYXQtc3ViaGVhZGluZy0yLCAjeyRzZWxlY3Rvcn0gaDMge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCBzdWJoZWFkaW5nLTIpO1xuICAgIG1hcmdpbjogMCAwIDE2cHg7XG4gIH1cblxuICAubWF0LWg0LCAubWF0LXN1YmhlYWRpbmctMSwgI3skc2VsZWN0b3J9IGg0IHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgc3ViaGVhZGluZy0xKTtcbiAgICBtYXJnaW46IDAgMCAxNnB4O1xuICB9XG5cbiAgLy8gTm90ZTogdGhlIHNwZWMgZG9lc24ndCBoYXZlIGFueXRoaW5nIHRoYXQgd291bGQgY29ycmVzcG9uZCB0byBoNSBhbmQgaDYsIGJ1dCB3ZSBhZGQgdGhlc2UgZm9yXG4gIC8vIGNvbnNpc3RlbmN5LiBUaGUgZm9udCBzaXplcyBjb21lIGZyb20gdGhlIENocm9tZSB1c2VyIGFnZW50IHN0eWxlcyB3aGljaCBoYXZlIGg1IGF0IDAuODNlbVxuICAvLyBhbmQgaDYgYXQgMC42N2VtLlxuICAubWF0LWg1LCAjeyRzZWxlY3Rvcn0gaDUge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWZvbnQtc2hvcnRoYW5kKFxuICAgICAgIC8vIGNhbGMgaXMgdXNlZCBoZXJlIHRvIHN1cHBvcnQgY3NzIHZhcmlhYmxlc1xuICAgICAgY2FsYygje21hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0xKX0gKiAwLjgzKSxcbiAgICAgIG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBib2R5LTEpLFxuICAgICAgbWF0LWxpbmUtaGVpZ2h0KCRjb25maWcsIGJvZHktMSksXG4gICAgICBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZywgYm9keS0xKVxuICAgICk7XG5cbiAgICBtYXJnaW46IDAgMCAxMnB4O1xuICB9XG5cbiAgLm1hdC1oNiwgI3skc2VsZWN0b3J9IGg2IHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1mb250LXNob3J0aGFuZChcbiAgICAgICAvLyBjYWxjIGlzIHVzZWQgaGVyZSB0byBzdXBwb3J0IGNzcyB2YXJpYWJsZXNcbiAgICAgIGNhbGMoI3ttYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSl9ICogMC42NyksXG4gICAgICBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0xKSxcbiAgICAgIG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBib2R5LTEpLFxuICAgICAgbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIGJvZHktMSlcbiAgICApO1xuXG4gICAgbWFyZ2luOiAwIDAgMTJweDtcbiAgfVxuXG4gIC5tYXQtYm9keS1zdHJvbmcsIC5tYXQtYm9keS0yIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgYm9keS0yKTtcbiAgfVxuXG4gIC5tYXQtYm9keSwgLm1hdC1ib2R5LTEsICN7JHNlbGVjdG9yfSB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGJvZHktMSk7XG5cbiAgICBwIHtcbiAgICAgIG1hcmdpbjogMCAwIDEycHg7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1zbWFsbCwgLm1hdC1jYXB0aW9uIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgY2FwdGlvbik7XG4gIH1cblxuICAubWF0LWRpc3BsYXktNCwgI3skc2VsZWN0b3J9IC5tYXQtZGlzcGxheS00IHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgZGlzcGxheS00KTtcbiAgICBtYXJnaW46IDAgMCA1NnB4O1xuICB9XG5cbiAgLm1hdC1kaXNwbGF5LTMsICN7JHNlbGVjdG9yfSAubWF0LWRpc3BsYXktMyB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGRpc3BsYXktMyk7XG4gICAgbWFyZ2luOiAwIDAgNjRweDtcbiAgfVxuXG4gIC5tYXQtZGlzcGxheS0yLCAjeyRzZWxlY3Rvcn0gLm1hdC1kaXNwbGF5LTIge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCBkaXNwbGF5LTIpO1xuICAgIG1hcmdpbjogMCAwIDY0cHg7XG4gIH1cblxuICAubWF0LWRpc3BsYXktMSwgI3skc2VsZWN0b3J9IC5tYXQtZGlzcGxheS0xIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgZGlzcGxheS0xKTtcbiAgICBtYXJnaW46IDAgMCA2NHB4O1xuICB9XG59XG5cblxuXG5cblxuQG1peGluIG1hdC1hdXRvY29tcGxldGUtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuXG4gIC5tYXQtYXV0b2NvbXBsZXRlLXBhbmVsIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbig0LCAkY29uZmlnKTtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuXG4gICAgLy8gU2VsZWN0ZWQgb3B0aW9ucyBpbiBhdXRvY29tcGxldGVzIHNob3VsZCBub3QgYmUgZ3JheSwgYnV0IHdlXG4gICAgLy8gb25seSB3YW50IHRvIG92ZXJyaWRlIHRoZSBiYWNrZ3JvdW5kIGZvciBzZWxlY3RlZCBvcHRpb25zIGlmXG4gICAgLy8gdGhleSBhcmUgKm5vdCogaW4gaG92ZXIgb3IgZm9jdXMgc3RhdGUuIFRoaXMgY2hhbmdlIGhhcyB0byBiZVxuICAgIC8vIG1hZGUgaGVyZSBiZWNhdXNlIGJhc2Ugb3B0aW9uIHN0eWxlcyBhcmUgc2hhcmVkIGJldHdlZW4gdGhlXG4gICAgLy8gYXV0b2NvbXBsZXRlIGFuZCB0aGUgc2VsZWN0LlxuICAgIC5tYXQtb3B0aW9uLm1hdC1zZWxlY3RlZDpub3QoLm1hdC1hY3RpdmUpOm5vdCg6aG92ZXIpIHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCk7XG5cbiAgICAgICY6bm90KC5tYXQtb3B0aW9uLWRpc2FibGVkKSB7XG4gICAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LWF1dG9jb21wbGV0ZS10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LWF1dG9jb21wbGV0ZS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtYXV0b2NvbXBsZXRlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtYXV0b2NvbXBsZXRlJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWF1dG9jb21wbGV0ZS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWF1dG9jb21wbGV0ZS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWF1dG9jb21wbGV0ZS10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBjb250YWlucyBhbGwgb2YgdGhlIHN0eWxlcyBmb3IgdGhlIGJhZGdlXG4vLyByYXRoZXIgdGhhbiBqdXN0IHRoZSBjb2xvci90aGVtZSBiZWNhdXNlIG9mXG4vLyBubyBzdHlsZSBzaGVldCBzdXBwb3J0IGZvciBkaXJlY3RpdmVzLlxuXG5cblxuXG5cblxuJG1hdC1iYWRnZS1mb250LXNpemU6IDEycHg7XG4kbWF0LWJhZGdlLWZvbnQtd2VpZ2h0OiA2MDA7XG4kbWF0LWJhZGdlLWRlZmF1bHQtc2l6ZTogMjJweCAhZGVmYXVsdDtcbiRtYXQtYmFkZ2Utc21hbGwtc2l6ZTogJG1hdC1iYWRnZS1kZWZhdWx0LXNpemUgLSA2O1xuJG1hdC1iYWRnZS1sYXJnZS1zaXplOiAkbWF0LWJhZGdlLWRlZmF1bHQtc2l6ZSArIDY7XG5cbi8vIE1peGluIGZvciBidWlsZGluZyBvZmZzZXQgZ2l2ZW4gZGlmZmVyZW50IHNpemVzXG5AbWl4aW4gX21hdC1iYWRnZS1zaXplKCRzaXplKSB7XG4gIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgd2lkdGg6ICRzaXplO1xuICAgIGhlaWdodDogJHNpemU7XG4gICAgbGluZS1oZWlnaHQ6ICRzaXplO1xuICB9XG5cbiAgJi5tYXQtYmFkZ2UtYWJvdmUge1xuICAgIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgICB0b3A6IC0kc2l6ZSAvIDI7XG4gICAgfVxuICB9XG5cbiAgJi5tYXQtYmFkZ2UtYmVsb3cge1xuICAgIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgICBib3R0b206IC0kc2l6ZSAvIDI7XG4gICAgfVxuICB9XG5cbiAgJi5tYXQtYmFkZ2UtYmVmb3JlIHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgbGVmdDogLSRzaXplO1xuICAgIH1cbiAgfVxuXG4gIFtkaXI9J3J0bCddICYubWF0LWJhZGdlLWJlZm9yZSB7XG4gICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgIGxlZnQ6IGF1dG87XG4gICAgICByaWdodDogLSRzaXplO1xuICAgIH1cbiAgfVxuXG4gICYubWF0LWJhZGdlLWFmdGVyIHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgcmlnaHQ6IC0kc2l6ZTtcbiAgICB9XG4gIH1cblxuICBbZGlyPSdydGwnXSAmLm1hdC1iYWRnZS1hZnRlciB7XG4gICAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICAgIHJpZ2h0OiBhdXRvO1xuICAgICAgbGVmdDogLSRzaXplO1xuICAgIH1cbiAgfVxuXG4gICYubWF0LWJhZGdlLW92ZXJsYXAge1xuICAgICYubWF0LWJhZGdlLWJlZm9yZSB7XG4gICAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgICBsZWZ0OiAtJHNpemUgLyAyO1xuICAgICAgfVxuICAgIH1cblxuICAgIFtkaXI9J3J0bCddICYubWF0LWJhZGdlLWJlZm9yZSB7XG4gICAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgICBsZWZ0OiBhdXRvO1xuICAgICAgICByaWdodDogLSRzaXplIC8gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1hdC1iYWRnZS1hZnRlciB7XG4gICAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgICByaWdodDogLSRzaXplIC8gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBbZGlyPSdydGwnXSAmLm1hdC1iYWRnZS1hZnRlciB7XG4gICAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgICByaWdodDogYXV0bztcbiAgICAgICAgbGVmdDogLSRzaXplIC8gMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1iYWRnZS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkcHJpbWFyeSwgZGVmYXVsdC1jb250cmFzdCk7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRwcmltYXJ5KTtcblxuICAgIEBpbmNsdWRlIGNkay1oaWdoLWNvbnRyYXN0KGFjdGl2ZSwgb2ZmKSB7XG4gICAgICBvdXRsaW5lOiBzb2xpZCAxcHg7XG4gICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYmFkZ2UtYWNjZW50IHtcbiAgICAubWF0LWJhZGdlLWNvbnRlbnQge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRhY2NlbnQpO1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkYWNjZW50LCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgICB9XG4gIH1cblxuICAubWF0LWJhZGdlLXdhcm4ge1xuICAgIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCR3YXJuLCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkd2Fybik7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1iYWRnZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG5cbiAgLm1hdC1iYWRnZS1oaWRkZW4ge1xuICAgIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYmFkZ2UtZGlzYWJsZWQge1xuICAgIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgICAkYXBwLWJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgJ2JhY2tncm91bmQnKTtcbiAgICAgICRiYWRnZS1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXNhYmxlZC1idXR0b24pO1xuXG4gICAgICAvLyBUaGUgZGlzYWJsZWQgY29sb3IgdXN1YWxseSBoYXMgc29tZSBraW5kIG9mIG9wYWNpdHksIGJ1dCBiZWNhdXNlIHRoZSBiYWRnZSBpcyBvdmVybGF5ZWRcbiAgICAgIC8vIG9uIHRvcCBvZiBzb21ldGhpbmcgZWxzZSwgaXQgd29uJ3QgbG9vayBnb29kIGlmIGl0J3Mgb3BhcXVlLiBJZiBpdCBpcyBhIGNvbG9yICp0eXBlKixcbiAgICAgIC8vIHdlIGNvbnZlcnQgaXQgaW50byBhIHNvbGlkIGNvbG9yIGJ5IHRha2luZyB0aGUgb3BhY2l0eSBmcm9tIHRoZSByZ2JhIHZhbHVlIGFuZCB1c2luZ1xuICAgICAgLy8gdGhlIHZhbHVlIHRvIGRldGVybWluZSB0aGUgcGVyY2VudGFnZSBvZiB0aGUgYmFja2dyb3VuZCB0byBwdXQgaW50byBmb3JlZ3JvdW5kIHdoZW5cbiAgICAgIC8vIG1peGluZyB0aGUgY29sb3JzIHRvZ2V0aGVyLlxuICAgICAgQGlmICh0eXBlLW9mKCRiYWRnZS1jb2xvcikgPT0gY29sb3IgYW5kIHR5cGUtb2YoJGFwcC1iYWNrZ3JvdW5kKSA9PSBjb2xvcikge1xuICAgICAgICAkYmFkZ2Utb3BhY2l0eTogb3BhY2l0eSgkYmFkZ2UtY29sb3IpO1xuICAgICAgICBiYWNrZ3JvdW5kOiBtaXgoJGFwcC1iYWNrZ3JvdW5kLCByZ2JhKCRiYWRnZS1jb2xvciwgMSksICgxIC0gJGJhZGdlLW9wYWNpdHkpICogMTAwJSk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICRiYWRnZS1jb2xvcjtcbiAgICAgIH1cblxuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDIwMG1zIGVhc2UtaW4tb3V0O1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMC42KTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIH1cblxuICAubmctYW5pbWF0ZS1kaXNhYmxlZCAubWF0LWJhZGdlLWNvbnRlbnQsXG4gIC5tYXQtYmFkZ2UtY29udGVudC5fbWF0LWFuaW1hdGlvbi1ub29wYWJsZSB7XG4gICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgfVxuXG4gIC8vIFRoZSBhY3RpdmUgY2xhc3MgaXMgYWRkZWQgYWZ0ZXIgdGhlIGVsZW1lbnQgaXMgYWRkZWRcbiAgLy8gc28gaXQgY2FuIGFuaW1hdGUgc2NhbGUgdG8gZGVmYXVsdFxuICAubWF0LWJhZGdlLWNvbnRlbnQubWF0LWJhZGdlLWFjdGl2ZSB7XG4gICAgLy8gU2NhbGUgdG8gYG5vbmVgIGluc3RlYWQgb2YgYDFgIHRvIGF2b2lkIGJsdXJyeSB0ZXh0IGluIHNvbWUgYnJvd3NlcnMuXG4gICAgdHJhbnNmb3JtOiBub25lO1xuICB9XG5cbiAgLm1hdC1iYWRnZS1zbWFsbCB7XG4gICAgQGluY2x1ZGUgX21hdC1iYWRnZS1zaXplKCRtYXQtYmFkZ2Utc21hbGwtc2l6ZSk7XG4gIH1cbiAgLm1hdC1iYWRnZS1tZWRpdW0ge1xuICAgIEBpbmNsdWRlIF9tYXQtYmFkZ2Utc2l6ZSgkbWF0LWJhZGdlLWRlZmF1bHQtc2l6ZSk7XG4gIH1cbiAgLm1hdC1iYWRnZS1sYXJnZSB7XG4gICAgQGluY2x1ZGUgX21hdC1iYWRnZS1zaXplKCRtYXQtYmFkZ2UtbGFyZ2Utc2l6ZSk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1iYWRnZS10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICBmb250LXdlaWdodDogJG1hdC1iYWRnZS1mb250LXdlaWdodDtcbiAgICBmb250LXNpemU6ICRtYXQtYmFkZ2UtZm9udC1zaXplO1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LWJhZGdlLXNtYWxsIC5tYXQtYmFkZ2UtY29udGVudCB7XG4gICAgLy8gU2V0IHRoZSBmb250IHNpemUgdG8gNzUlIG9mIHRoZSBvcmlnaW5hbC5cbiAgICBmb250LXNpemU6ICRtYXQtYmFkZ2UtZm9udC1zaXplICogMC43NTtcbiAgfVxuXG4gIC5tYXQtYmFkZ2UtbGFyZ2UgLm1hdC1iYWRnZS1jb250ZW50IHtcbiAgICBmb250LXNpemU6ICRtYXQtYmFkZ2UtZm9udC1zaXplICogMjtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1iYWRnZS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtYmFkZ2UtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1iYWRnZScpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1iYWRnZS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWJhZGdlLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtYmFkZ2UtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtYm90dG9tLXNoZWV0LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LWJvdHRvbS1zaGVldC1jb250YWluZXIge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKDE2LCAkY29uZmlnKTtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGRpYWxvZyk7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1ib3R0b20tc2hlZXQtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtYm90dG9tLXNoZWV0LWNvbnRhaW5lciB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIGJvZHktMSk7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtYm90dG9tLXNoZWV0LWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1ib3R0b20tc2hlZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1ib3R0b20tc2hlZXQnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtYm90dG9tLXNoZWV0LWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtYm90dG9tLXNoZWV0LWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtYm90dG9tLXNoZWV0LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuJF9tYXQtYnV0dG9uLXJpcHBsZS1vcGFjaXR5OiAwLjE7XG5cbi8vIEFwcGxpZXMgYSBmb2N1cyBzdHlsZSB0byBhbiBtYXQtYnV0dG9uIGVsZW1lbnQgZm9yIGVhY2ggb2YgdGhlIHN1cHBvcnRlZCBwYWxldHRlcy5cbkBtaXhpbiBfbWF0LWJ1dHRvbi1mb2N1cy1vdmVybGF5LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuXG4gICYubWF0LXByaW1hcnkgLm1hdC1idXR0b24tZm9jdXMtb3ZlcmxheSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5KTtcbiAgfVxuXG4gICYubWF0LWFjY2VudCAubWF0LWJ1dHRvbi1mb2N1cy1vdmVybGF5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCk7XG4gIH1cblxuICAmLm1hdC13YXJuIC5tYXQtYnV0dG9uLWZvY3VzLW92ZXJsYXkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkd2Fybik7XG4gIH1cblxuICAmLm1hdC1idXR0b24tZGlzYWJsZWQgLm1hdC1idXR0b24tZm9jdXMtb3ZlcmxheSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cbn1cblxuLy8gQXBwbGllcyB0aGUgYmFja2dyb3VuZCBjb2xvciBmb3IgYSByaXBwbGUuIElmIHRoZSB2YWx1ZSBwcm92aWRlZCBpcyBub3QgYSBTYXNzIGNvbG9yLFxuLy8gd2UgYXNzdW1lIHRoYXQgd2UndmUgYmVlbiBnaXZlbiBhIENTUyB2YXJpYWJsZS4gU2luY2Ugd2UgY2FuJ3QgcGVyZm9ybSBhbHBoYS1ibGVuZGluZ1xuLy8gb24gYSBDU1MgdmFyaWFibGUsIHdlIGluc3RlYWQgYWRkIHRoZSBvcGFjaXR5IGRpcmVjdGx5IHRvIHRoZSByaXBwbGUgZWxlbWVudC5cbkBtaXhpbiBfbWF0LWJ1dHRvbi1yaXBwbGUtYmFja2dyb3VuZCgkcGFsZXR0ZSwgJGh1ZSwgJG9wYWNpdHkpIHtcbiAgJGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSwgJGh1ZSwgJG9wYWNpdHkpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZC1jb2xvcjtcbiAgQGlmICh0eXBlLW9mKCRiYWNrZ3JvdW5kLWNvbG9yKSAhPSBjb2xvcikge1xuICAgIG9wYWNpdHk6ICRvcGFjaXR5O1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LWJ1dHRvbi1yaXBwbGUtY29sb3IoJHRoZW1lLCAkaHVlLCAkb3BhY2l0eTogJF9tYXQtYnV0dG9uLXJpcHBsZS1vcGFjaXR5KSB7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCR0aGVtZSwgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJHRoZW1lLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkdGhlbWUsIHdhcm4pO1xuXG4gICYubWF0LXByaW1hcnkgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgQGluY2x1ZGUgX21hdC1idXR0b24tcmlwcGxlLWJhY2tncm91bmQoJHByaW1hcnksICRodWUsICRvcGFjaXR5KTtcbiAgfVxuXG4gICYubWF0LWFjY2VudCAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICBAaW5jbHVkZSBfbWF0LWJ1dHRvbi1yaXBwbGUtYmFja2dyb3VuZCgkYWNjZW50LCAkaHVlLCAkb3BhY2l0eSk7XG4gIH1cblxuICAmLm1hdC13YXJuIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLXJpcHBsZS1iYWNrZ3JvdW5kKCR3YXJuLCAkaHVlLCAkb3BhY2l0eSk7XG4gIH1cbn1cblxuLy8gQXBwbGllcyBhIHByb3BlcnR5IHRvIGFuIG1hdC1idXR0b24gZWxlbWVudCBmb3IgZWFjaCBvZiB0aGUgc3VwcG9ydGVkIHBhbGV0dGVzLlxuQG1peGluIF9tYXQtYnV0dG9uLXRoZW1lLXByb3BlcnR5KCR0aGVtZSwgJHByb3BlcnR5LCAkaHVlKSB7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCR0aGVtZSwgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJHRoZW1lLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkdGhlbWUsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkdGhlbWUsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkdGhlbWUsIGZvcmVncm91bmQpO1xuXG4gICYubWF0LXByaW1hcnkge1xuICAgICN7JHByb3BlcnR5fTogbWF0LWNvbG9yKCRwcmltYXJ5LCAkaHVlKTtcbiAgfVxuICAmLm1hdC1hY2NlbnQge1xuICAgICN7JHByb3BlcnR5fTogbWF0LWNvbG9yKCRhY2NlbnQsICRodWUpO1xuICB9XG4gICYubWF0LXdhcm4ge1xuICAgICN7JHByb3BlcnR5fTogbWF0LWNvbG9yKCR3YXJuLCAkaHVlKTtcbiAgfVxuXG4gICYubWF0LXByaW1hcnksICYubWF0LWFjY2VudCwgJi5tYXQtd2FybiwgJi5tYXQtYnV0dG9uLWRpc2FibGVkIHtcbiAgICAmLm1hdC1idXR0b24tZGlzYWJsZWQge1xuICAgICAgJHBhbGV0dGU6IGlmKCRwcm9wZXJ0eSA9PSAnY29sb3InLCAkZm9yZWdyb3VuZCwgJGJhY2tncm91bmQpO1xuICAgICAgI3skcHJvcGVydHl9OiBtYXQtY29sb3IoJHBhbGV0dGUsIGRpc2FibGVkLWJ1dHRvbik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtYnV0dG9uLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1idXR0b24sIC5tYXQtaWNvbi1idXR0b24sIC5tYXQtc3Ryb2tlZC1idXR0b24ge1xuICAgIC8vIEJ1dHRvbnMgd2l0aG91dCBhIGJhY2tncm91bmQgY29sb3Igc2hvdWxkIGluaGVyaXQgdGhlIGZvbnQgY29sb3IuIFRoaXMgaXMgbmVjZXNzYXJ5IHRvXG4gICAgLy8gZW5zdXJlIHRoYXQgdGhlIGJ1dHRvbiBpcyByZWFkYWJsZSBvbiBjdXN0b20gYmFja2dyb3VuZCBjb2xvcnMuIEl0J3Mgd3JvbmcgdG8gYWx3YXlzIGFzc3VtZVxuICAgIC8vIHRoYXQgdGhvc2UgYnV0dG9ucyBhcmUgYWx3YXlzIHBsYWNlZCBpbnNpZGUgb2YgY29udGFpbmVycyB3aXRoIHRoZSBkZWZhdWx0IGJhY2tncm91bmRcbiAgICAvLyBjb2xvciBvZiB0aGUgdGhlbWUgKGUuZy4gdGhlbWVkIHRvb2xiYXJzKS5cbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblxuICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLXRoZW1lLXByb3BlcnR5KCRjb25maWcsICdjb2xvcicsIHRleHQpO1xuICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLWZvY3VzLW92ZXJsYXktY29sb3IoJGNvbmZpZyk7XG5cbiAgICAvLyBTZXR1cCB0aGUgcmlwcGxlIGNvbG9yIHRvIGJlIGJhc2VkIG9uIHRoZSB0ZXh0IGNvbG9yLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgcmlwcGxlc1xuICAgIC8vIGFyZSBtYXRjaGluZyB3aXRoIHRoZSBjdXJyZW50IHRoZW1lIHBhbGV0dGUgYW5kIGFyZSBpbiBjb250cmFzdCB0byB0aGUgYmFja2dyb3VuZCBjb2xvclxuICAgIC8vIChlLmcgaW4gdGhlbWVkIHRvb2xiYXJzKS5cbiAgICAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICAgIG9wYWNpdHk6ICRfbWF0LWJ1dHRvbi1yaXBwbGUtb3BhY2l0eTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbiAgICB9XG4gIH1cblxuICAubWF0LWJ1dHRvbi1mb2N1cy1vdmVybGF5IHtcbiAgICBiYWNrZ3JvdW5kOiBtYXBfZ2V0KCRmb3JlZ3JvdW5kLCBiYXNlKTtcbiAgfVxuXG4gIC8vIE5vdGU6IHRoaXMgbmVlZHMgYSBiaXQgZXh0cmEgc3BlY2lmaWNpdHksIGJlY2F1c2Ugd2UncmUgbm90IGd1YXJhbnRlZWQgdGhlIGluY2x1c2lvblxuICAvLyBvcmRlciBvZiB0aGUgdGhlbWUgc3R5bGVzIGFuZCB0aGUgYnV0dG9uIHJlc2V0IG1heSBlbmQgdXAgcmVzZXR0aW5nIHRoaXMgYXMgd2VsbC5cbiAgLm1hdC1zdHJva2VkLWJ1dHRvbjpub3QoLm1hdC1idXR0b24tZGlzYWJsZWQpIHtcbiAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlcik7XG4gIH1cblxuICAubWF0LWZsYXQtYnV0dG9uLCAubWF0LXJhaXNlZC1idXR0b24sIC5tYXQtZmFiLCAubWF0LW1pbmktZmFiIHtcbiAgICAvLyBEZWZhdWx0IGZvbnQgYW5kIGJhY2tncm91bmQgY29sb3Igd2hlbiBub3QgdXNpbmcgYW55IGNvbG9yIHBhbGV0dGUuXG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCByYWlzZWQtYnV0dG9uKTtcblxuICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLXRoZW1lLXByb3BlcnR5KCRjb25maWcsICdjb2xvcicsIGRlZmF1bHQtY29udHJhc3QpO1xuICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLXRoZW1lLXByb3BlcnR5KCRjb25maWcsICdiYWNrZ3JvdW5kLWNvbG9yJywgZGVmYXVsdCk7XG4gICAgQGluY2x1ZGUgX21hdC1idXR0b24tcmlwcGxlLWNvbG9yKCRjb25maWcsIGRlZmF1bHQtY29udHJhc3QpO1xuICB9XG5cbiAgLm1hdC1zdHJva2VkLWJ1dHRvbiwgLm1hdC1mbGF0LWJ1dHRvbiB7XG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oMCwgJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LXJhaXNlZC1idXR0b24ge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDIsICRjb25maWcpO1xuXG4gICAgJjpub3QoLm1hdC1idXR0b24tZGlzYWJsZWQpOmFjdGl2ZSB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbig4LCAkY29uZmlnKTtcbiAgICB9XG5cbiAgICAmLm1hdC1idXR0b24tZGlzYWJsZWQge1xuICAgICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oMCwgJGNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1mYWIsIC5tYXQtbWluaS1mYWIge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDYsICRjb25maWcpO1xuXG4gICAgJjpub3QoLm1hdC1idXR0b24tZGlzYWJsZWQpOmFjdGl2ZSB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbigxMiwgJGNvbmZpZyk7XG4gICAgfVxuXG4gICAgJi5tYXQtYnV0dG9uLWRpc2FibGVkIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDAsICRjb25maWcpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LWJ1dHRvbi10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1idXR0b24sIC5tYXQtcmFpc2VkLWJ1dHRvbiwgLm1hdC1pY29uLWJ1dHRvbiwgLm1hdC1zdHJva2VkLWJ1dHRvbixcbiAgLm1hdC1mbGF0LWJ1dHRvbiwgLm1hdC1mYWIsIC5tYXQtbWluaS1mYWIge1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIGJ1dHRvbik7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJ1dHRvbik7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBidXR0b24pO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1idXR0b24tZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWJ1dHRvbi10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWJ1dHRvbicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1idXR0b24tY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1idXR0b24tZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1idXR0b24tdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbi8vIFRha2VuIGZyb20gbWF0LWRlbnNpdHkgd2l0aCBzbWFsbCBtb2RpZmljYXRpb25zIHRvIG5vdCByZWx5IG9uIHRoZSBuZXcgU2FzcyBtb2R1bGVcbi8vIHN5c3RlbSwgYW5kIHRvIHN1cHBvcnQgYXJiaXRyYXJ5IHByb3BlcnRpZXMgaW4gYSBkZW5zaXR5IGNvbmZpZ3VyYXRpb24uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL21hc3Rlci9wYWNrYWdlcy9tZGMtZGVuc2l0eVxuXG4kX21hdC1kZW5zaXR5LWludGVydmFsOiA0cHggIWRlZmF1bHQ7XG4kX21hdC1kZW5zaXR5LW1pbmltdW0tc2NhbGU6IG1pbmltdW0gIWRlZmF1bHQ7XG4kX21hdC1kZW5zaXR5LW1heGltdW0tc2NhbGU6IG1heGltdW0gIWRlZmF1bHQ7XG4kX21hdC1kZW5zaXR5LXN1cHBvcnRlZC1zY2FsZXM6IChkZWZhdWx0LCBtaW5pbXVtLCBtYXhpbXVtKSAhZGVmYXVsdDtcbiRfbWF0LWRlbnNpdHktZGVmYXVsdC1zY2FsZTogMCAhZGVmYXVsdDtcblxuLy8gV2hldGhlciBkZW5zaXR5IHNob3VsZCBiZSBnZW5lcmF0ZWQgYXQgcm9vdC4gVGhpcyB3aWxsIGJlIHRlbXBvcmFyaWx5IHNldCB0byBgdHJ1ZWBcbi8vIHdoZW5ldmVyIGRlbnNpdHkgc3R5bGVzIGZvciBsZWdhY3kgdGhlbWVzIGFyZSBnZW5lcmF0ZWQuXG4kX21hdC1kZW5zaXR5LWdlbmVyYXRlLWF0LXJvb3Q6IGZhbHNlO1xuLy8gV2hldGhlciBkZW5zaXR5IHN0eWxlcyBzaG91bGQgYmUgZ2VuZXJhdGVkLiBUaGlzIHdpbGwgYmUgdGVtcG9yYXJpbHkgc2V0IHRvIGBmYWxzZWAgaWZcbi8vIGR1cGxpY2F0ZSBkZW5zaXR5IHN0eWxlcyBmb3IgYSBsZWdhY3kgdGhlbWUgd291bGQgYmUgZ2VuZXJhdGVkLiBGb3IgbGVnYWN5IHRoZW1lcyxcbi8vIHdlIGFsd2F5cyBnZW5lcmF0ZSB0aGUgZGVmYXVsdCBkZW5zaXR5ICoqb25seSBvbmNlKiogYXQgcm9vdC5cbiRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtc3R5bGVzOiB0cnVlO1xuXG4vLyBNaXhpbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHdyYXAgZGVuc2l0eSBzdHlsZXMgb2YgZ2l2ZW4gY29tcG9uZW50cy4gVGhlIG1peGluIHdpbGxcbi8vIG1vdmUgdGhlIGRlbnNpdHkgc3R5bGVzIHRvIHJvb3QgaWYgdGhlIGAkX21hdC1kZW5zaXR5LWdlbmVyYXRlLWF0LXJvb3RgIGdsb2JhbCB2YXJpYWJsZVxuLy8gaXMgc2V0LiBJZiBgJF9tYXQtZGVuc2l0eS1nZW5lcmF0ZS1zdHlsZXNgIGlzIHNldCB0byBgZmFsc2VgLCBnZW5lcmF0aW9uIG9mIGRlbnNpdHlcbi8vIHN0eWxlcyB3cmFwcGVkIGluIHRoaXMgbWl4aW4gaXMgc2tpcHBlZC4gVGhpcyBtaXhpbiBleGlzdHMgdG8gaW1wcm92ZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuLy8gb2YgdGhlIG5ldyB0aGVtaW5nIEFQSSB3aGVyZSBkZW5zaXR5IHN0eWxlcyBhcmUgaW5jbHVkZWQgYXMgcGFydCBvZiB0aGVtZXMuIFByZXZpb3VzbHksXG4vLyBkZW5zaXR5IHN0eWxlcyBvZiBjb21wb25lbnRzIHdlcmUgcGFydCBvZiB0aGVpciBiYXNlIHN0eWxlcy4gV2l0aCB0aGUgbmV3IEFQSSwgdGhleSBhcmVcbi8vIHBhcnQgb2YgdGhlIHRoZW1pbmcgc3lzdGVtLiBUaGUgYDwuLj4tdGhlbWVgIG1peGlucyBnZW5lcmF0ZSBkZW5zaXR5IGJ5IGRlZmF1bHQgdW5sZXNzXG4vLyB0aGUgZGVuc2l0eSBjb25maWd1cmF0aW9uIGlzIGV4cGxpY2l0bHkgc3BlY2lmaWVkIGFzIHBlciBuZXcgQVBJLiBUaGlzIG1lYW5zLCB0aGF0IHByb2plY3RzXG4vLyB1c2luZyBgPC4uPi10aGVtZWAgbWl4aW5zIGZvciBzZXBhcmF0ZSB0aGVtZXMgKGxpa2UgYC5kYXJrLXRoZW1lYCkgd2lsbCBjYXVzZSBkdXBsaWNhdGVcbi8vIGRlbnNpdHkgc3R5bGVzLiBUaGlzIGlzIGJyZWFraW5nIGFzIGl0IGluY3JlYXNlcyBzcGVjaWZpY2l0eSBvZiBkZW5zaXR5IHN0eWxlcy4gVGhpcyBtaXhpblxuLy8gcHJvdmlkZXMgYW4gQVBJIHRvIGNvbnRyb2wgZ2VuZXJhdGlvbiBvZiBkZW5zaXR5IHN0eWxlcyBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhleSBhcmUgb25seVxuLy8gY3JlYXRlZCAqb25jZSogYW5kIGF0IHJvb3QuXG5AbWl4aW4gX21hdC1kZW5zaXR5LWxlZ2FjeS1jb21wYXRpYmlsaXR5KCkge1xuICBAaWYgJF9tYXQtZGVuc2l0eS1nZW5lcmF0ZS1zdHlsZXMgYW5kICRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtYXQtcm9vdCB7XG4gICAgQGF0LXJvb3Qge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIEBlbHNlIGlmICRfbWF0LWRlbnNpdHktZ2VuZXJhdGUtc3R5bGVzIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG5AZnVuY3Rpb24gX21hdC1kZW5zaXR5LXByb3AtdmFsdWUoJGRlbnNpdHktY29uZmlnLCAkZGVuc2l0eS1zY2FsZSwgJHByb3BlcnR5LW5hbWUpIHtcbiAgQGlmICh0eXBlLW9mKCRkZW5zaXR5LXNjYWxlKSA9PSAnc3RyaW5nJyBhbmRcbiAgICAgIGluZGV4KCRsaXN0OiAkX21hdC1kZW5zaXR5LXN1cHBvcnRlZC1zY2FsZXMsICR2YWx1ZTogJGRlbnNpdHktc2NhbGUpID09IG51bGwpIHtcbiAgICBAZXJyb3IgJ21hdC1kZW5zaXR5OiBTdXBwb3J0ZWQgZGVuc2l0eSBzY2FsZXMgI3skX21hdC1kZW5zaXR5LXN1cHBvcnRlZC1zY2FsZXN9LCAnICArXG4gICAgICAnYnV0IHJlY2VpdmVkICN7JGRlbnNpdHktc2NhbGV9Lic7XG4gIH1cblxuICAkdmFsdWU6IG51bGw7XG4gICRwcm9wZXJ0eS1zY2FsZS1tYXA6IG1hcF9nZXQoJGRlbnNpdHktY29uZmlnLCAkcHJvcGVydHktbmFtZSk7XG5cbiAgQGlmIG1hcF9oYXNfa2V5KCRwcm9wZXJ0eS1zY2FsZS1tYXAsICRkZW5zaXR5LXNjYWxlKSB7XG4gICAgJHZhbHVlOiBtYXBfZ2V0KCRwcm9wZXJ0eS1zY2FsZS1tYXAsICRkZW5zaXR5LXNjYWxlKTtcbiAgfVxuICBAZWxzZSB7XG4gICAgJHZhbHVlOiBtYXBfZ2V0KCRwcm9wZXJ0eS1zY2FsZS1tYXAsIGRlZmF1bHQpICsgJGRlbnNpdHktc2NhbGUgKiAkX21hdC1kZW5zaXR5LWludGVydmFsO1xuICB9XG5cbiAgJG1pbi12YWx1ZTogbWFwX2dldCgkcHJvcGVydHktc2NhbGUtbWFwLCAkX21hdC1kZW5zaXR5LW1pbmltdW0tc2NhbGUpO1xuICAkbWF4LXZhbHVlOiBtYXBfZ2V0KCRwcm9wZXJ0eS1zY2FsZS1tYXAsICRfbWF0LWRlbnNpdHktbWF4aW11bS1zY2FsZSk7XG5cbiAgQGlmICgkdmFsdWUgPCAkbWluLXZhbHVlIG9yICR2YWx1ZSA+ICRtYXgtdmFsdWUpIHtcbiAgICBAZXJyb3IgJ21hdC1kZW5zaXR5OiAjeyRwcm9wZXJ0eS1uYW1lfSBtdXN0IGJlIGJldHdlZW4gI3skbWluLXZhbHVlfSBhbmQgJyArXG4gICAgICAnI3skbWF4LXZhbHVlfSAoaW5jbHVzaXZlKSwgYnV0IHJlY2VpdmVkICN7JHZhbHVlfS4nO1xuICB9XG5cbiAgQHJldHVybiAkdmFsdWU7XG59XG5cbiRtYXQtYnV0dG9uLXRvZ2dsZS1zdGFuZGFyZC1oZWlnaHQ6IDQ4cHggIWRlZmF1bHQ7XG4vLyBNaW5pbXVtIGhlaWdodCBmb3IgaGlnaGVzdCBkZW5zaXR5IGNhbiB2YXJ5IGJhc2VkIG9uIHRoZSBjb250ZW50IHRoYXQgZGV2ZWxvcGVyc1xuLy8gcHJvamVjdCBpbnRvIGJ1dHRvbi10b2dnbGUncy4gV2UgdXNlIGEgbWluaW11bSBvZiBgMjRweGAgdGhvdWdoIGJlY2F1c2UgY29tbW9ubHlcbi8vIGljb25zIG9yIHRleHQgYXJlIGRpc3BsYXllZC4gSWNvbnMgYnkgZGVmYXVsdCBoYXZlIGEgc2l6ZSBvZiBgMjRweGAuXG4kbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtbWluaW11bS1oZWlnaHQ6IDI0cHggIWRlZmF1bHQ7XG4kbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtbWF4aW11bS1oZWlnaHQ6ICRtYXQtYnV0dG9uLXRvZ2dsZS1zdGFuZGFyZC1oZWlnaHQgIWRlZmF1bHQ7XG5cbiRtYXQtYnV0dG9uLXRvZ2dsZS1zdGFuZGFyZC1kZW5zaXR5LWNvbmZpZzogKFxuICBoZWlnaHQ6IChcbiAgICBkZWZhdWx0OiAkbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtaGVpZ2h0LFxuICAgIG1heGltdW06ICRtYXQtYnV0dG9uLXRvZ2dsZS1zdGFuZGFyZC1tYXhpbXVtLWhlaWdodCxcbiAgICBtaW5pbXVtOiAkbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtbWluaW11bS1oZWlnaHQsXG4gIClcbikgIWRlZmF1bHQ7XG5cblxuQG1peGluIG1hdC1idXR0b24tdG9nZ2xlLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGRpdmlkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlcik7XG5cbiAgLm1hdC1idXR0b24tdG9nZ2xlLXN0YW5kYWxvbmUsXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1ncm91cCB7XG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1lbGV2YXRpb24oMiwgJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhbG9uZS5tYXQtYnV0dG9uLXRvZ2dsZS1hcHBlYXJhbmNlLXN0YW5kYXJkLFxuICAubWF0LWJ1dHRvbi10b2dnbGUtZ3JvdXAtYXBwZWFyYW5jZS1zdGFuZGFyZCB7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgfVxuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgaGludC10ZXh0KTtcblxuICAgIC5tYXQtYnV0dG9uLXRvZ2dsZS1mb2N1cy1vdmVybGF5IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgZm9jdXNlZC1idXR0b24pO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1hcHBlYXJhbmNlLXN0YW5kYXJkIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuXG4gICAgLm1hdC1idXR0b24tdG9nZ2xlLWZvY3VzLW92ZXJsYXkge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBmb2N1c2VkLWJ1dHRvbiwgMSk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1idXR0b24tdG9nZ2xlLWdyb3VwLWFwcGVhcmFuY2Utc3RhbmRhcmQgLm1hdC1idXR0b24tdG9nZ2xlICsgLm1hdC1idXR0b24tdG9nZ2xlIHtcbiAgICBib3JkZXItbGVmdDogc29saWQgMXB4ICRkaXZpZGVyLWNvbG9yO1xuICB9XG5cbiAgW2Rpcj0ncnRsJ10gLm1hdC1idXR0b24tdG9nZ2xlLWdyb3VwLWFwcGVhcmFuY2Utc3RhbmRhcmQgLm1hdC1idXR0b24tdG9nZ2xlICsgLm1hdC1idXR0b24tdG9nZ2xlIHtcbiAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICBib3JkZXItcmlnaHQ6IHNvbGlkIDFweCAkZGl2aWRlci1jb2xvcjtcbiAgfVxuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1ncm91cC1hcHBlYXJhbmNlLXN0YW5kYXJkLm1hdC1idXR0b24tdG9nZ2xlLXZlcnRpY2FsIHtcbiAgICAubWF0LWJ1dHRvbi10b2dnbGUgKyAubWF0LWJ1dHRvbi10b2dnbGUge1xuICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgICBib3JkZXItcmlnaHQ6IG5vbmU7XG4gICAgICBib3JkZXItdG9wOiBzb2xpZCAxcHggJGRpdmlkZXItY29sb3I7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1idXR0b24tdG9nZ2xlLWNoZWNrZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgc2VsZWN0ZWQtYnV0dG9uKTtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG5cbiAgICAmLm1hdC1idXR0b24tdG9nZ2xlLWFwcGVhcmFuY2Utc3RhbmRhcmQge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1idXR0b24tdG9nZ2xlLWRpc2FibGVkIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXNhYmxlZC1idXR0b24pO1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgZGlzYWJsZWQtYnV0dG9uLXRvZ2dsZSk7XG5cbiAgICAmLm1hdC1idXR0b24tdG9nZ2xlLWFwcGVhcmFuY2Utc3RhbmRhcmQge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBjYXJkKTtcbiAgICB9XG5cbiAgICAmLm1hdC1idXR0b24tdG9nZ2xlLWNoZWNrZWQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBzZWxlY3RlZC1kaXNhYmxlZC1idXR0b24pO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1zdGFuZGFsb25lLm1hdC1idXR0b24tdG9nZ2xlLWFwcGVhcmFuY2Utc3RhbmRhcmQsXG4gIC5tYXQtYnV0dG9uLXRvZ2dsZS1ncm91cC1hcHBlYXJhbmNlLXN0YW5kYXJkIHtcbiAgICBib3JkZXI6IHNvbGlkIDFweCAkZGl2aWRlci1jb2xvcjtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWJ1dHRvbi10b2dnbGUtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtYnV0dG9uLXRvZ2dsZSB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1idXR0b24tdG9nZ2xlLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkZGVuc2l0eS1zY2FsZTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHN0YW5kYXJkLWhlaWdodDogX21hdC1kZW5zaXR5LXByb3AtdmFsdWUoXG4gICAgICAkbWF0LWJ1dHRvbi10b2dnbGUtc3RhbmRhcmQtZGVuc2l0eS1jb25maWcsICRkZW5zaXR5LXNjYWxlLCBoZWlnaHQpO1xuXG4gIEBpbmNsdWRlIF9tYXQtZGVuc2l0eS1sZWdhY3ktY29tcGF0aWJpbGl0eSgpIHtcbiAgICAubWF0LWJ1dHRvbi10b2dnbGUtYXBwZWFyYW5jZS1zdGFuZGFyZCAubWF0LWJ1dHRvbi10b2dnbGUtbGFiZWwtY29udGVudCB7XG4gICAgICBsaW5lLWhlaWdodDogJHN0YW5kYXJkLWhlaWdodDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1idXR0b24tdG9nZ2xlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtYnV0dG9uLXRvZ2dsZScpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1idXR0b24tdG9nZ2xlLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtYnV0dG9uLXRvZ2dsZS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWJ1dHRvbi10b2dnbGUtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cblxuQG1peGluIG1hdC1jYXJkLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LWNhcmQge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtb3ZlcnJpZGFibGUtZWxldmF0aW9uKDEsICRjb25maWcpO1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCk7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG5cbiAgICAvLyBOZWVkcyBleHRyYSBzcGVjaWZpY2l0eSB0byBiZSBhYmxlIHRvIG92ZXJyaWRlIHRoZSBlbGV2YXRpb24gc2VsZWN0b3JzLlxuICAgICYubWF0LWNhcmQtZmxhdCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbigwLCAkY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWNhcmQtc3VidGl0bGUge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWNhcmQtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtY2FyZCB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgfVxuXG4gIC5tYXQtY2FyZC10aXRsZSB7XG4gICAgZm9udDoge1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBoZWFkbGluZSk7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCB0aXRsZSk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1jYXJkLWhlYWRlciAubWF0LWNhcmQtdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCB0aXRsZSk7XG4gIH1cblxuICAubWF0LWNhcmQtc3VidGl0bGUsXG4gIC5tYXQtY2FyZC1jb250ZW50IHtcbiAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0xKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1jYXJkLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1jYXJkLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtY2FyZCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1jYXJkLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtY2FyZC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWNhcmQtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LWNoZWNrYm94LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRpcy1kYXJrLXRoZW1lOiBtYXAtZ2V0KCRjb25maWcsIGlzLWRhcmspO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG5cbiAgLy8gVGhlIGNvbG9yIG9mIHRoZSBjaGVja2JveCdzIGNoZWNrbWFyayAvIG1peGVkbWFyay5cbiAgJGNoZWNrYm94LW1hcmstY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgYmFja2dyb3VuZCk7XG5cbiAgLy8gTk9URSh0cmF2aXNrYXVmbWFuKTogV2hpbGUgdGhlIHNwZWMgY2FsbHMgZm9yIHRyYW5zbHVjZW50IGJsYWNrcy93aGl0ZXMgZm9yIGRpc2FibGVkIGNvbG9ycyxcbiAgLy8gdGhpcyBkb2VzIG5vdCB3b3JrIHdlbGwgd2l0aCBlbGVtZW50cyBsYXllcmVkIG9uIHRvcCBvZiBvbmUgYW5vdGhlci4gVG8gZ2V0IGFyb3VuZCB0aGlzIHdlXG4gIC8vIGJsZW5kIHRoZSBjb2xvcnMgdG9nZXRoZXIgYmFzZWQgb24gdGhlIGJhc2UgY29sb3IgYW5kIHRoZSB0aGVtZSBiYWNrZ3JvdW5kLlxuICAkd2hpdGUtMzBwY3Qtb3BhY2l0eS1vbi1kYXJrOiAjNjg2ODY4O1xuICAkYmxhY2stMjZwY3Qtb3BhY2l0eS1vbi1saWdodDogI2IwYjBiMDtcbiAgJGRpc2FibGVkLWNvbG9yOiBpZigkaXMtZGFyay10aGVtZSwgJHdoaXRlLTMwcGN0LW9wYWNpdHktb24tZGFyaywgJGJsYWNrLTI2cGN0LW9wYWNpdHktb24tbGlnaHQpO1xuXG4gIC5tYXQtY2hlY2tib3gtZnJhbWUge1xuICAgIGJvcmRlci1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG4gIH1cblxuICAubWF0LWNoZWNrYm94LWNoZWNrbWFyayB7XG4gICAgZmlsbDogJGNoZWNrYm94LW1hcmstY29sb3I7XG4gIH1cblxuICAubWF0LWNoZWNrYm94LWNoZWNrbWFyay1wYXRoIHtcbiAgICAvLyAhaW1wb3J0YW50IGlzIG5lZWRlZCBoZXJlIGJlY2F1c2UgYSBzdHJva2UgbXVzdCBiZSBzZXQgYXMgYW5cbiAgICAvLyBhdHRyaWJ1dGUgb24gdGhlIFNWRyBpbiBvcmRlciBmb3IgbGluZSBhbmltYXRpb24gdG8gd29yayBwcm9wZXJseS5cbiAgICBzdHJva2U6ICRjaGVja2JveC1tYXJrLWNvbG9yICFpbXBvcnRhbnQ7XG4gIH1cblxuICAubWF0LWNoZWNrYm94LW1peGVkbWFyayB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNoZWNrYm94LW1hcmstY29sb3I7XG4gIH1cblxuICAubWF0LWNoZWNrYm94LWluZGV0ZXJtaW5hdGUsIC5tYXQtY2hlY2tib3gtY2hlY2tlZCB7XG4gICAgJi5tYXQtcHJpbWFyeSAubWF0LWNoZWNrYm94LWJhY2tncm91bmQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5KTtcbiAgICB9XG5cbiAgICAmLm1hdC1hY2NlbnQgLm1hdC1jaGVja2JveC1iYWNrZ3JvdW5kIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYWNjZW50KTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIC5tYXQtY2hlY2tib3gtYmFja2dyb3VuZCB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHdhcm4pO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtY2hlY2tib3gtZGlzYWJsZWQge1xuICAgICYubWF0LWNoZWNrYm94LWNoZWNrZWQsXG4gICAgJi5tYXQtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZSB7XG4gICAgICAubWF0LWNoZWNrYm94LWJhY2tncm91bmQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGlzYWJsZWQtY29sb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJjpub3QoLm1hdC1jaGVja2JveC1jaGVja2VkKSB7XG4gICAgICAubWF0LWNoZWNrYm94LWZyYW1lIHtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAkZGlzYWJsZWQtY29sb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1hdC1jaGVja2JveC1sYWJlbCB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3dpdGNoIHRoaXMgdG8gYSBzb2xpZCBjb2xvciBzaW5jZSB3ZSdyZSB1c2luZyBgb3BhY2l0eWBcbiAgLy8gdG8gY29udHJvbCBob3cgb3BhcXVlIHRoZSByaXBwbGUgc2hvdWxkIGJlLlxuICAubWF0LWNoZWNrYm94IC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hcF9nZXQobWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKSwgYmFzZSk7XG4gIH1cblxuICAubWF0LWNoZWNrYm94LWNoZWNrZWQ6bm90KC5tYXQtY2hlY2tib3gtZGlzYWJsZWQpLFxuICAubWF0LWNoZWNrYm94OmFjdGl2ZTpub3QoLm1hdC1jaGVja2JveC1kaXNhYmxlZCkge1xuICAgICYubWF0LXByaW1hcnkgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJHByaW1hcnkpO1xuICAgIH1cblxuICAgICYubWF0LWFjY2VudCAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYWNjZW50KTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCR3YXJuKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1jaGVja2JveC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1jaGVja2JveCB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgfVxuXG4gIC8vIFRPRE8oa2FyYSk6IFJlbW92ZSB0aGlzIHN0eWxlIHdoZW4gZml4aW5nIHZlcnRpY2FsIGJhc2VsaW5lXG4gIC5tYXQtY2hlY2tib3gtbGF5b3V0IC5tYXQtY2hlY2tib3gtbGFiZWwge1xuICAgIGxpbmUtaGVpZ2h0OiBtYXQtbGluZS1oZWlnaHQoJGNvbmZpZywgYm9keS0yKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1jaGVja2JveC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtY2hlY2tib3gtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1jaGVja2JveCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1jaGVja2JveC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWNoZWNrYm94LWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtY2hlY2tib3gtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbiRtYXQtY2hpcC1yZW1vdmUtZm9udC1zaXplOiAxOHB4O1xuXG5AbWl4aW4gX21hdC1jaGlwLWVsZW1lbnQtY29sb3IoJGZvcmVncm91bmQsICRiYWNrZ3JvdW5kKSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kO1xuICBjb2xvcjogJGZvcmVncm91bmQ7XG5cbiAgLm1hdC1jaGlwLXJlbW92ZSB7XG4gICAgY29sb3I6ICRmb3JlZ3JvdW5kO1xuICAgIG9wYWNpdHk6IDAuNDtcbiAgfVxufVxuXG5cbi8vIEFwcGxpZXMgdGhlIGJhY2tncm91bmQgY29sb3IgZm9yIGEgcmlwcGxlIGVsZW1lbnQuXG4vLyBJZiB0aGUgY29sb3IgdmFsdWUgcHJvdmlkZWQgaXMgbm90IGEgU2FzcyBjb2xvcixcbi8vIHdlIGFzc3VtZSB0aGF0IHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBDU1MgdmFyaWFibGUuXG4vLyBTaW5jZSB3ZSBjYW4ndCBwZXJmb3JtIGFscGhhLWJsZW5kaW5nIG9uIGEgQ1NTIHZhcmlhYmxlLFxuLy8gd2UgaW5zdGVhZCBhZGQgdGhlIG9wYWNpdHkgZGlyZWN0bHkgdG8gdGhlIHJpcHBsZSBlbGVtZW50LlxuQG1peGluIF9tYXQtY2hpcHMtcmlwcGxlLWJhY2tncm91bmQoJHBhbGV0dGUsICRkZWZhdWx0LWNvbnRyYXN0LCAkb3BhY2l0eSkge1xuICAkYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwYWxldHRlLCAkZGVmYXVsdC1jb250cmFzdCwgJG9wYWNpdHkpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZC1jb2xvcjtcbiAgQGlmICh0eXBlLW9mKCRiYWNrZ3JvdW5kLWNvbG9yKSAhPSBjb2xvcikge1xuICAgIG9wYWNpdHk6ICRvcGFjaXR5O1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LWNoaXAtdGhlbWUtY29sb3IoJHBhbGV0dGUpIHtcbiAgQGluY2x1ZGUgX21hdC1jaGlwLWVsZW1lbnQtY29sb3IobWF0LWNvbG9yKCRwYWxldHRlLCBkZWZhdWx0LWNvbnRyYXN0KSwgbWF0LWNvbG9yKCRwYWxldHRlKSk7XG5cbiAgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgQGluY2x1ZGUgX21hdC1jaGlwcy1yaXBwbGUtYmFja2dyb3VuZCgkcGFsZXR0ZSwgZGVmYXVsdC1jb250cmFzdCwgMC4xKTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWNoaXBzLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRpcy1kYXJrLXRoZW1lOiBtYXAtZ2V0KCRjb25maWcsIGlzLWRhcmspO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gICR1bnNlbGVjdGVkLWJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgdW5zZWxlY3RlZC1jaGlwKTtcbiAgJHVuc2VsZWN0ZWQtZm9yZWdyb3VuZDogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcblxuICAubWF0LWNoaXAubWF0LXN0YW5kYXJkLWNoaXAge1xuICAgIEBpbmNsdWRlIF9tYXQtY2hpcC1lbGVtZW50LWNvbG9yKCR1bnNlbGVjdGVkLWZvcmVncm91bmQsICR1bnNlbGVjdGVkLWJhY2tncm91bmQpO1xuXG4gICAgJjpub3QoLm1hdC1jaGlwLWRpc2FibGVkKSB7XG4gICAgICAmOmFjdGl2ZSB7XG4gICAgICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKDMsICRjb25maWcpO1xuICAgICAgfVxuXG4gICAgICAubWF0LWNoaXAtcmVtb3ZlOmhvdmVyIHtcbiAgICAgICAgb3BhY2l0eTogMC41NDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1hdC1jaGlwLWRpc2FibGVkIHtcbiAgICAgIG9wYWNpdHk6IDAuNDtcbiAgICB9XG5cbiAgICAmOjphZnRlciB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXBfZ2V0KCRmb3JlZ3JvdW5kLCBiYXNlKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWNoaXAubWF0LXN0YW5kYXJkLWNoaXAubWF0LWNoaXAtc2VsZWN0ZWQge1xuICAgICYubWF0LXByaW1hcnkge1xuICAgICAgQGluY2x1ZGUgX21hdC1jaGlwLXRoZW1lLWNvbG9yKCRwcmltYXJ5KTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtY2hpcC10aGVtZS1jb2xvcigkd2Fybik7XG4gICAgfVxuXG4gICAgJi5tYXQtYWNjZW50IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtY2hpcC10aGVtZS1jb2xvcigkYWNjZW50KTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1jaGlwcy10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1jaGlwIHtcbiAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0yKTtcbiAgICBmb250LXdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMik7XG5cbiAgICAubWF0LWNoaXAtdHJhaWxpbmctaWNvbi5tYXQtaWNvbixcbiAgICAubWF0LWNoaXAtcmVtb3ZlLm1hdC1pY29uIHtcbiAgICAgIGZvbnQtc2l6ZTogJG1hdC1jaGlwLXJlbW92ZS1mb250LXNpemU7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LWNoaXBzLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1jaGlwcy10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWNoaXBzJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWNoaXBzLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtY2hpcHMtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1jaGlwcy10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuQG1peGluIG1hdC1kaXZpZGVyLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtZGl2aWRlciB7XG4gICAgYm9yZGVyLXRvcC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyKTtcbiAgfVxuXG4gIC5tYXQtZGl2aWRlci12ZXJ0aWNhbCB7XG4gICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtZGl2aWRlci10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LWRpdmlkZXItZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWRpdmlkZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1kaXZpZGVyJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWRpdmlkZXItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1kaXZpZGVyLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZGl2aWRlci10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtdGFibGUtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtdGFibGUge1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgJ2NhcmQnKTtcbiAgfVxuXG4gIC5tYXQtdGFibGUgdGhlYWQsIC5tYXQtdGFibGUgdGJvZHksIC5tYXQtdGFibGUgdGZvb3QsXG4gIG1hdC1oZWFkZXItcm93LCBtYXQtcm93LCBtYXQtZm9vdGVyLXJvdyxcbiAgW21hdC1oZWFkZXItcm93XSwgW21hdC1yb3ddLCBbbWF0LWZvb3Rlci1yb3ddLFxuICAubWF0LXRhYmxlLXN0aWNreSB7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgfVxuXG4gIG1hdC1yb3csIG1hdC1oZWFkZXItcm93LCBtYXQtZm9vdGVyLXJvdyxcbiAgdGgubWF0LWhlYWRlci1jZWxsLCB0ZC5tYXQtY2VsbCwgdGQubWF0LWZvb3Rlci1jZWxsIHtcbiAgICBib3JkZXItYm90dG9tLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuICB9XG5cbiAgLm1hdC1oZWFkZXItY2VsbCB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1jZWxsLCAubWF0LWZvb3Rlci1jZWxsIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LXRhYmxlLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LXRhYmxlIHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1oZWFkZXItY2VsbCB7XG4gICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGNhcHRpb24pO1xuICAgIGZvbnQtd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0yKTtcbiAgfVxuXG4gIC5tYXQtY2VsbCwgLm1hdC1mb290ZXItY2VsbCB7XG4gICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSk7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtdGFibGUtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXRhYmxlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtdGFibGUnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtdGFibGUtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC10YWJsZS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRhYmxlLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5cbiRtYXQtZGF0ZXBpY2tlci1zZWxlY3RlZC10b2RheS1ib3gtc2hhZG93LXdpZHRoOiAxcHg7XG4kbWF0LWRhdGVwaWNrZXItc2VsZWN0ZWQtZmFkZS1hbW91bnQ6IDAuNjtcbiRtYXQtZGF0ZXBpY2tlci1yYW5nZS1mYWRlLWFtb3VudDogMC4yO1xuJG1hdC1kYXRlcGlja2VyLXRvZGF5LWZhZGUtYW1vdW50OiAwLjI7XG4kbWF0LWNhbGVuZGFyLWJvZHktZm9udC1zaXplOiAxM3B4ICFkZWZhdWx0O1xuJG1hdC1jYWxlbmRhci13ZWVrZGF5LXRhYmxlLWZvbnQtc2l6ZTogMTFweCAhZGVmYXVsdDtcblxuQG1peGluIF9tYXQtZGF0ZXBpY2tlci1jb2xvcigkcGFsZXR0ZSkge1xuICBAaW5jbHVkZSBtYXQtZGF0ZS1yYW5nZS1jb2xvcnMoXG4gICAgbWF0LWNvbG9yKCRwYWxldHRlLCBkZWZhdWx0LCAkbWF0LWRhdGVwaWNrZXItcmFuZ2UtZmFkZS1hbW91bnQpKTtcblxuICAubWF0LWNhbGVuZGFyLWJvZHktc2VsZWN0ZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSk7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSwgZGVmYXVsdC1jb250cmFzdCk7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktZGlzYWJsZWQgPiAubWF0LWNhbGVuZGFyLWJvZHktc2VsZWN0ZWQge1xuICAgICRiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJHBhbGV0dGUpO1xuXG4gICAgQGlmICh0eXBlLW9mKCRiYWNrZ3JvdW5kKSA9PSBjb2xvcikge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogZmFkZS1vdXQoJGJhY2tncm91bmQsICRtYXQtZGF0ZXBpY2tlci1zZWxlY3RlZC1mYWRlLWFtb3VudCk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIC8vIElmIHdlIGNvdWxkbid0IHJlc29sdmUgdG8gYmFja2dyb3VuZCB0byBhIGNvbG9yIChlLmcuIGl0J3MgYSBDU1MgdmFyaWFibGUpLFxuICAgICAgLy8gZmFsbCBiYWNrIHRvIGZhZGluZyB0aGUgY29udGVudCBvdXQgdmlhIGBvcGFjaXR5YC5cbiAgICAgIG9wYWNpdHk6ICRtYXQtZGF0ZXBpY2tlci10b2RheS1mYWRlLWFtb3VudDtcbiAgICB9XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktdG9kYXkubWF0LWNhbGVuZGFyLWJvZHktc2VsZWN0ZWQge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwICRtYXQtZGF0ZXBpY2tlci1zZWxlY3RlZC10b2RheS1ib3gtc2hhZG93LXdpZHRoXG4gICAgICAgICAgICAgICAgbWF0LWNvbG9yKCRwYWxldHRlLCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWRhdGVwaWNrZXItY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuXG4gIC5tYXQtY2FsZW5kYXItYXJyb3cge1xuICAgIGJvcmRlci10b3AtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgaWNvbik7XG4gIH1cblxuICAvLyBUaGUgcHJldi9uZXh0IGJ1dHRvbnMgbmVlZCBhIGJpdCBtb3JlIHNwZWNpZmljaXR5IHRvXG4gIC8vIGF2b2lkIGJlaW5nIG92ZXJ3cml0dGVuIGJ5IHRoZSAubWF0LWljb24tYnV0dG9uLlxuICAubWF0LWRhdGVwaWNrZXItdG9nZ2xlLFxuICAubWF0LWRhdGVwaWNrZXItY29udGVudCAubWF0LWNhbGVuZGFyLW5leHQtYnV0dG9uLFxuICAubWF0LWRhdGVwaWNrZXItY29udGVudCAubWF0LWNhbGVuZGFyLXByZXZpb3VzLWJ1dHRvbiB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgaWNvbik7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLXRhYmxlLWhlYWRlciB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgaGludC10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItdGFibGUtaGVhZGVyLWRpdmlkZXI6OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWxhYmVsIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktY2VsbC1jb250ZW50LFxuICAubWF0LWRhdGUtcmFuZ2UtaW5wdXQtc2VwYXJhdG9yIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWRpc2FibGVkID4gLm1hdC1jYWxlbmRhci1ib2R5LWNlbGwtY29udGVudDpub3QoLm1hdC1jYWxlbmRhci1ib2R5LXNlbGVjdGVkKSxcbiAgLm1hdC1mb3JtLWZpZWxkLWRpc2FibGVkIC5tYXQtZGF0ZS1yYW5nZS1pbnB1dC1zZXBhcmF0b3Ige1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWNlbGw6bm90KC5tYXQtY2FsZW5kYXItYm9keS1kaXNhYmxlZCk6aG92ZXIsXG4gIC5jZGsta2V5Ym9hcmQtZm9jdXNlZCAubWF0LWNhbGVuZGFyLWJvZHktYWN0aXZlLFxuICAuY2RrLXByb2dyYW0tZm9jdXNlZCAubWF0LWNhbGVuZGFyLWJvZHktYWN0aXZlIHtcbiAgICAmID4gLm1hdC1jYWxlbmRhci1ib2R5LWNlbGwtY29udGVudDpub3QoLm1hdC1jYWxlbmRhci1ib2R5LXNlbGVjdGVkKSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGhvdmVyKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktaW4tcHJldmlldyB7XG4gICAgJGRpdmlkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlcik7XG5cbiAgICBAaWYgdHlwZS1vZigkZGl2aWRlci1jb2xvcikgPT0gY29sb3Ige1xuICAgICAgLy8gVGhlIGRpdmlkZXIgY29sb3IgaXMgc2V0IHVuZGVyIHRoZSBhc3N1bXB0aW9uIHRoYXQgaXQnbGwgYmUgdXNlZFxuICAgICAgLy8gZm9yIGEgc29saWQgYm9yZGVyLCBidXQgYmVjYXVzZSB3ZSdyZSB1c2luZyBhIGRhc2hlZCBib3JkZXIgZm9yIHRoZVxuICAgICAgLy8gcHJldmlldyByYW5nZSwgd2UgbmVlZCB0byBidW1wIGl0cyBvcGFjaXR5IHRvIGVuc3VyZSB0aGF0IGl0J3MgdmlzaWJsZS5cbiAgICAgIGNvbG9yOiByZ2JhKCRkaXZpZGVyLWNvbG9yLCBtaW4ob3BhY2l0eSgkZGl2aWRlci1jb2xvcikgKiAyLCAxKSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIGNvbG9yOiAkZGl2aWRlci1jb2xvcjtcbiAgICB9XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktdG9kYXk6bm90KC5tYXQtY2FsZW5kYXItYm9keS1zZWxlY3RlZCkge1xuICAgIC8vIE5vdGU6IHRob3VnaCBpdCdzIG5vdCB0ZXh0LCB0aGUgYm9yZGVyIGlzIGEgaGludCBhYm91dCB0aGUgZmFjdCB0aGF0IHRoaXMgaXMgdG9kYXkncyBkYXRlLFxuICAgIC8vIHNvIHdlIHVzZSB0aGUgaGludCBjb2xvci5cbiAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgaGludC10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1kaXNhYmxlZCA+IC5tYXQtY2FsZW5kYXItYm9keS10b2RheTpub3QoLm1hdC1jYWxlbmRhci1ib2R5LXNlbGVjdGVkKSB7XG4gICAgJGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGhpbnQtdGV4dCk7XG5cbiAgICBAaWYgKHR5cGUtb2YoJGNvbG9yKSA9PSBjb2xvcikge1xuICAgICAgYm9yZGVyLWNvbG9yOiBmYWRlLW91dCgkY29sb3IsICRtYXQtZGF0ZXBpY2tlci10b2RheS1mYWRlLWFtb3VudCk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBjb2xvciBkaWRuJ3QgcmVzb2x2ZSB0byBhIGNvbG9yIHZhbHVlLCBidXQgc29tZXRoaW5nIGxpa2UgYSBDU1MgdmFyaWFibGUsIHdlIGNhbid0XG4gICAgICAvLyBmYWRlIGl0IG91dCBzbyB3ZSBmYWxsIGJhY2sgdG8gcmVkdWNpbmcgdGhlIGVsZW1lbnQgb3BhY2l0eS4gTm90ZSB0aGF0IHdlIGRvbid0IHVzZSB0aGVcbiAgICAgIC8vICRtYXQtZGF0ZXBpY2tlci10b2RheS1mYWRlLWFtb3VudCwgYmVjYXVzZSBoaW50IHRleHQgdXN1YWxseSBoYXMgc29tZSBvcGFjaXR5IGFwcGxpZWRcbiAgICAgIC8vIHRvIGl0IGFscmVhZHkgYW5kIHdlIGRvbid0IHdhbnQgdGhlbSB0byBzdGFjayBvbiB0b3Agb2YgZWFjaCBvdGhlci5cbiAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICB9XG4gIH1cblxuICBAaW5jbHVkZSBfbWF0LWRhdGVwaWNrZXItY29sb3IobWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KSk7XG5cbiAgLm1hdC1kYXRlcGlja2VyLWNvbnRlbnQge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKDQsICRjb25maWcpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCk7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG5cbiAgICAmLm1hdC1hY2NlbnQge1xuICAgICAgQGluY2x1ZGUgX21hdC1kYXRlcGlja2VyLWNvbG9yKG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KSk7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWRhdGVwaWNrZXItY29sb3IobWFwLWdldCgkY29uZmlnLCB3YXJuKSk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1kYXRlcGlja2VyLWNvbnRlbnQtdG91Y2gge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKDAsICRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1kYXRlcGlja2VyLXRvZ2dsZS1hY3RpdmUge1xuICAgIGNvbG9yOiBtYXQtY29sb3IobWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KSwgdGV4dCk7XG5cbiAgICAmLm1hdC1hY2NlbnQge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcihtYXAtZ2V0KCRjb25maWcsIGFjY2VudCksIHRleHQpO1xuICAgIH1cblxuICAgICYubWF0LXdhcm4ge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcihtYXAtZ2V0KCRjb25maWcsIHdhcm4pLCB0ZXh0KTtcbiAgICB9XG4gIH1cblxuICAubWF0LWRhdGUtcmFuZ2UtaW5wdXQtaW5uZXJbZGlzYWJsZWRdIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXNhYmxlZC10ZXh0KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWRhdGVwaWNrZXItdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtY2FsZW5kYXIge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHkge1xuICAgIGZvbnQtc2l6ZTogJG1hdC1jYWxlbmRhci1ib2R5LWZvbnQtc2l6ZTtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1sYWJlbCxcbiAgLm1hdC1jYWxlbmRhci1wZXJpb2QtYnV0dG9uIHtcbiAgICBmb250OiB7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJ1dHRvbik7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBidXR0b24pO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItdGFibGUtaGVhZGVyIHRoIHtcbiAgICBmb250OiB7XG4gICAgICBzaXplOiAkbWF0LWNhbGVuZGFyLXdlZWtkYXktdGFibGUtZm9udC1zaXplO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0xKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1kYXRlLXJhbmdlLWNvbG9ycyhcbiAgJHJhbmdlLWNvbG9yLFxuICAkY29tcGFyaXNvbi1jb2xvcjogcmdiYSgjZjlhYjAwLCAkbWF0LWRhdGVwaWNrZXItcmFuZ2UtZmFkZS1hbW91bnQpLFxuICAkb3ZlcmxhcC1jb2xvcjogI2E4ZGFiNSxcbiAgJG92ZXJsYXAtc2VsZWN0ZWQtY29sb3I6IGRhcmtlbigkb3ZlcmxhcC1jb2xvciwgMzAlKSkge1xuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1pbi1yYW5nZTo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kOiAkcmFuZ2UtY29sb3I7XG4gIH1cblxuICAubWF0LWNhbGVuZGFyLWJvZHktaW4tY29tcGFyaXNvbi1yYW5nZTo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kOiAkY29tcGFyaXNvbi1jb2xvcjtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1jb21wYXJpc29uLWJyaWRnZS1zdGFydDo6YmVmb3JlLFxuICBbZGlyPSdydGwnXSAubWF0LWNhbGVuZGFyLWJvZHktY29tcGFyaXNvbi1icmlkZ2UtZW5kOjpiZWZvcmUge1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgJHJhbmdlLWNvbG9yIDUwJSwgJGNvbXBhcmlzb24tY29sb3IgNTAlKTtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1jb21wYXJpc29uLWJyaWRnZS1lbmQ6OmJlZm9yZSxcbiAgW2Rpcj0ncnRsJ10gLm1hdC1jYWxlbmRhci1ib2R5LWNvbXBhcmlzb24tYnJpZGdlLXN0YXJ0OjpiZWZvcmUge1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAkcmFuZ2UtY29sb3IgNTAlLCAkY29tcGFyaXNvbi1jb2xvciA1MCUpO1xuICB9XG5cbiAgLm1hdC1jYWxlbmRhci1ib2R5LWluLWNvbXBhcmlzb24tcmFuZ2UubWF0LWNhbGVuZGFyLWJvZHktaW4tcmFuZ2U6OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kOiAkb3ZlcmxhcC1jb2xvcjtcbiAgfVxuXG4gIC5tYXQtY2FsZW5kYXItYm9keS1pbi1jb21wYXJpc29uLXJhbmdlID4gLm1hdC1jYWxlbmRhci1ib2R5LXNlbGVjdGVkIHtcbiAgICBiYWNrZ3JvdW5kOiAkb3ZlcmxhcC1zZWxlY3RlZC1jb2xvcjtcblxuICB9XG59XG5cbkBtaXhpbiBfbWF0LWRhdGVwaWNrZXItZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWRhdGVwaWNrZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1kYXRlcGlja2VyJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWRhdGVwaWNrZXItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1kYXRlcGlja2VyLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZGF0ZXBpY2tlci10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LWRpYWxvZy1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1kaWFsb2ctY29udGFpbmVyIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbigyNCwgJGNvbmZpZyk7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBkaWFsb2cpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtZGlhbG9nLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LWRpYWxvZy10aXRsZSB7XG4gICAgQGluY2x1ZGUgbWF0LXR5cG9ncmFwaHktbGV2ZWwtdG8tc3R5bGVzKCRjb25maWcsIHRpdGxlKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1kaWFsb2ctZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWRpYWxvZy10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWRpYWxvZycpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1kaWFsb2ctY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1kaWFsb2ctZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1kaWFsb2ctdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbi8vIERlZmF1bHQgbWluaW11bSBhbmQgbWF4aW11bSBoZWlnaHQgZm9yIGNvbGxhcHNlZCBwYW5lbCBoZWFkZXJzLlxuJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWNvbGxhcHNlZC1oZWlnaHQ6IDQ4cHggIWRlZmF1bHQ7XG4kbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItY29sbGFwc2VkLW1pbmltdW0taGVpZ2h0OiAzNnB4ICFkZWZhdWx0O1xuJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWNvbGxhcHNlZC1tYXhpbXVtLWhlaWdodDpcbiAgICAkbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItY29sbGFwc2VkLWhlaWdodCAhZGVmYXVsdDtcblxuLy8gRGVmYXVsdCBtaW5pbXVtIGFuZCBtYXhpbXVtIGhlaWdodCBmb3IgZXhwYW5kZWQgcGFuZWwgaGVhZGVycy5cbiRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1leHBhbmRlZC1oZWlnaHQ6IDY0cHggIWRlZmF1bHQ7XG4kbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZXhwYW5kZWQtbWluaW11bS1oZWlnaHQ6IDQ4cHggIWRlZmF1bHQ7XG4kbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZXhwYW5kZWQtbWF4aW11bS1oZWlnaHQ6XG4gICAgJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWV4cGFuZGVkLWhlaWdodCAhZGVmYXVsdDtcblxuLy8gRGVuc2l0eSBjb25maWd1cmF0aW9uIGZvciB0aGUgZXhwYW5zaW9uIHBhbmVsLiBDYXB0dXJlcyB0aGVcbi8vIGhlaWdodCBmb3IgYm90aCBleHBhbmRlZCBhbmQgY29sbGFwc2VkIHBhbmVsIGhlYWRlcnMuXG4kbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZGVuc2l0eS1jb25maWc6IChcbiAgY29sbGFwc2VkLWhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1jb2xsYXBzZWQtaGVpZ2h0LFxuICAgIG1heGltdW06ICRtYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1jb2xsYXBzZWQtbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWNvbGxhcHNlZC1taW5pbXVtLWhlaWdodCxcbiAgKSxcbiAgZXhwYW5kZWQtaGVpZ2h0OiAoXG4gICAgZGVmYXVsdDogJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWV4cGFuZGVkLWhlaWdodCxcbiAgICBtYXhpbXVtOiAkbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZXhwYW5kZWQtbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLWV4cGFuZGVkLW1pbmltdW0taGVpZ2h0LFxuICApXG4pICFkZWZhdWx0O1xuXG4vLyBOb3RlOiBLZWVwIHRoaXMgaW4gc3luYyB3aXRoIHRoZSBhbmltYXRpb24gdGltaW5nIGZvciB0aGUgdG9nZ2xlIGluZGljYXRvclxuLy8gYW5kIGJvZHkgZXhwYW5zaW9uLiBUaGVzZSBhcmUgYW5pbWF0ZWQgdXNpbmcgQW5ndWxhciBhbmltYXRpb25zLlxuJG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLXRyYW5zaXRpb246IDIyNW1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG5cblxuQG1peGluIG1hdC1leHBhbnNpb24tcGFuZWwtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtZXhwYW5zaW9uLXBhbmVsIHtcbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLW92ZXJyaWRhYmxlLWVsZXZhdGlvbigyLCAkY29uZmlnKTtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGNhcmQpO1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICB9XG5cbiAgLm1hdC1hY3Rpb24tcm93IHtcbiAgICBib3JkZXItdG9wLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuICB9XG5cbiAgLm1hdC1leHBhbnNpb24tcGFuZWwge1xuICAgICYgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLmNkay1rZXlib2FyZC1mb2N1c2VkLFxuICAgICYgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLmNkay1wcm9ncmFtLWZvY3VzZWQsXG4gICAgJjpub3QoLm1hdC1leHBhbmRlZCkgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyOmhvdmVyIHtcbiAgICAgICY6bm90KFthcmlhLWRpc2FibGVkPSd0cnVlJ10pIHtcbiAgICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBob3Zlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRGlzYWJsZSB0aGUgaG92ZXIgb24gdG91Y2ggZGV2aWNlcyBzaW5jZSBpdCBjYW4gYXBwZWFyIGxpa2UgaXQgaXMgc3R1Y2suIFdlIGNhbid0IHVzZVxuICAvLyBgQG1lZGlhIChob3ZlcilgIGFib3ZlLCBiZWNhdXNlIHRoZSBkZXNrdG9wIHN1cHBvcnQgYnJvd3NlciBzdXBwb3J0IGlzbid0IGdyZWF0LlxuICBAbWVkaWEgKGhvdmVyOiBub25lKSB7XG4gICAgLm1hdC1leHBhbnNpb24tcGFuZWw6bm90KC5tYXQtZXhwYW5kZWQpOm5vdChbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddKVxuICAgICAgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyLXRpdGxlIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxuXG4gIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci1kZXNjcmlwdGlvbixcbiAgLm1hdC1leHBhbnNpb24taW5kaWNhdG9yOjphZnRlciB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyW2FyaWEtZGlzYWJsZWQ9J3RydWUnXSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtYnV0dG9uKTtcblxuICAgIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWhlYWRlci10aXRsZSxcbiAgICAubWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZGVzY3JpcHRpb24ge1xuICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtZXhwYW5zaW9uLXBhbmVsLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIge1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIHN1YmhlYWRpbmctMSk7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIHN1YmhlYWRpbmctMSk7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBzdWJoZWFkaW5nLTEpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQge1xuICAgIEBpbmNsdWRlIG1hdC10eXBvZ3JhcGh5LWxldmVsLXRvLXN0eWxlcygkY29uZmlnLCBib2R5LTEpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LWV4cGFuc2lvbi1wYW5lbC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGRlbnNpdHktc2NhbGU6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRleHBhbmRlZC1oZWlnaHQ6IF9tYXQtZGVuc2l0eS1wcm9wLXZhbHVlKFxuICAgICAgICAkbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZGVuc2l0eS1jb25maWcsICRkZW5zaXR5LXNjYWxlLCBleHBhbmRlZC1oZWlnaHQpO1xuICAkY29sbGFwc2VkLWhlaWdodDogX21hdC1kZW5zaXR5LXByb3AtdmFsdWUoXG4gICAgICAkbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItZGVuc2l0eS1jb25maWcsICRkZW5zaXR5LXNjYWxlLCBjb2xsYXBzZWQtaGVpZ2h0KTtcblxuICBAaW5jbHVkZSBfbWF0LWRlbnNpdHktbGVnYWN5LWNvbXBhdGliaWxpdHkoKSB7XG4gICAgLm1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyIHtcbiAgICAgIGhlaWdodDogJGNvbGxhcHNlZC1oZWlnaHQ7XG5cbiAgICAgICYubWF0LWV4cGFuZGVkIHtcbiAgICAgICAgaGVpZ2h0OiAkZXhwYW5kZWQtaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LWV4cGFuc2lvbi1wYW5lbC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LWV4cGFuc2lvbi1wYW5lbCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1leHBhbnNpb24tcGFuZWwtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1leHBhbnNpb24tcGFuZWwtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1leHBhbnNpb24tcGFuZWwtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuLy8gVGhpcyBtaXhpbiB3aWxsIGVuc3VyZSB0aGF0IGxpbmVzIHRoYXQgb3ZlcmZsb3cgdGhlIGNvbnRhaW5lciB3aWxsIGhpZGUgdGhlIG92ZXJmbG93IGFuZFxuLy8gdHJ1bmNhdGUgbmVhdGx5IHdpdGggYW4gZWxsaXBzaXMuXG5AbWl4aW4gbWF0LXRydW5jYXRlLWxpbmUoKSB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuXG4vLyBNaXhpbiB0byBwcm92aWRlIGFsbCBtYXQtbGluZSBzdHlsZXMsIGNoYW5naW5nIHNlY29uZGFyeSBmb250IHNpemUgYmFzZWQgb24gd2hldGhlciB0aGUgbGlzdFxuLy8gaXMgaW4gZGVuc2UgbW9kZS5cbkBtaXhpbiBtYXQtbGluZS1iYXNlKCRzZWNvbmRhcnktZm9udC1zaXplKSB7XG4gIC5tYXQtbGluZSB7XG4gICAgQGluY2x1ZGUgbWF0LXRydW5jYXRlLWxpbmUoKTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG4gICAgLy8gYWxsIGxpbmVzIGJ1dCB0aGUgdG9wIGxpbmUgc2hvdWxkIGhhdmUgc21hbGxlciB0ZXh0XG4gICAgJjpudGgtY2hpbGQobisyKSB7XG4gICAgICBmb250LXNpemU6ICRzZWNvbmRhcnktZm9udC1zaXplO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIG1peGluIG5vcm1hbGl6ZXMgZGVmYXVsdCBlbGVtZW50IHN0eWxlcywgZS5nLiBmb250IHdlaWdodCBmb3IgaGVhZGluZyB0ZXh0LlxuQG1peGluIG1hdC1ub3JtYWxpemUtdGV4dCgpIHtcbiAgJiA+ICoge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgZm9udC1zaXplOiBpbmhlcml0O1xuICB9XG59XG5cbi8vIFRoaXMgbWl4aW4gcHJvdmlkZXMgYmFzZSBzdHlsZXMgZm9yIHRoZSB3cmFwcGVyIGFyb3VuZCBtYXQtbGluZSBlbGVtZW50cyBpbiBhIGxpc3QuXG5AbWl4aW4gbWF0LWxpbmUtd3JhcHBlci1iYXNlKCkge1xuICBAaW5jbHVkZSBtYXQtbm9ybWFsaXplLXRleHQoKTtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBmbGV4OiBhdXRvO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gIC8vIE11c3QgcmVtb3ZlIHdyYXBwZXIgd2hlbiBsaW5lcyBhcmUgZW1wdHkgb3IgaXQgdGFrZXMgdXAgaG9yaXpvbnRhbFxuICAvLyBzcGFjZSBhbmQgcHVzaGVzIG90aGVyIGVsZW1lbnRzIHRvIHRoZSByaWdodC5cbiAgJjplbXB0eSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxufVxuXG5cblxuLy8gSW5jbHVkZSB0aGlzIGVtcHR5IG1peGluIGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBvdGhlciBjb21wb25lbnRzLlxuQG1peGluIG1hdC1ncmlkLWxpc3QtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1ncmlkLWxpc3QtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtZ3JpZC10aWxlLWhlYWRlcixcbiAgLm1hdC1ncmlkLXRpbGUtZm9vdGVyIHtcbiAgICBAaW5jbHVkZSBtYXQtbGluZS1iYXNlKG1hdC1mb250LXNpemUoJGNvbmZpZywgY2FwdGlvbikpO1xuICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTEpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LWdyaWQtbGlzdC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtZ3JpZC1saXN0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZ3JpZC1saXN0Jykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWdyaWQtbGlzdC1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWdyaWQtbGlzdC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWdyaWQtbGlzdC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuQG1peGluIG1hdC1pY29uLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1pY29uIHtcbiAgICAmLm1hdC1wcmltYXJ5IHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnksIHRleHQpO1xuICAgIH1cblxuICAgICYubWF0LWFjY2VudCB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRhY2NlbnQsIHRleHQpO1xuICAgIH1cblxuICAgICYubWF0LXdhcm4ge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkd2FybiwgdGV4dCk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtaWNvbi10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LWljb24tZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWljb24tdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1pY29uJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWljb24tY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1pY29uLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtaWNvbi10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuLy8gUmVuZGVycyBhIGdyYWRpZW50IGZvciBzaG93aW5nIHRoZSBkYXNoZWQgbGluZSB3aGVuIHRoZSBpbnB1dCBpcyBkaXNhYmxlZC5cbi8vIFVubGlrZSB1c2luZyBhIGJvcmRlciwgYSBncmFkaWVudCBhbGxvd3MgdXMgdG8gYWRqdXN0IHRoZSBzcGFjaW5nIG9mIHRoZSBkb3R0ZWQgbGluZVxuLy8gdG8gbWF0Y2ggdGhlIE1hdGVyaWFsIERlc2lnbiBzcGVjLlxuQG1peGluIG1hdC1jb250cm9sLWRpc2FibGVkLXVuZGVybGluZSgkY29sb3IpIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAkY29sb3IgMCUsICRjb2xvciAzMyUsIHRyYW5zcGFyZW50IDAlKTtcbiAgYmFja2dyb3VuZC1zaXplOiA0cHggMTAwJTtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdC14O1xufVxuXG4vLyBGaWd1cmVzIG91dCB0aGUgY29sb3Igb2YgdGhlIHBsYWNlaG9sZGVyIGZvciBhIGZvcm0gY29udHJvbC5cbi8vIFVzZWQgcHJpbWFyaWx5IHRvIHByZXZlbnQgdGhlIHZhcmlvdXMgZm9ybSBjb250cm9scyBmcm9tXG4vLyBiZWNvbWluZyBvdXQgb2Ygc3luYyBzaW5jZSB0aGVzZSBjb2xvcnMgYXJlbid0IGluIGEgcGFsZXR0ZS5cbkBmdW5jdGlvbiBfbWF0LWNvbnRyb2wtcGxhY2Vob2xkZXItY29sb3IoJGNvbmZpZykge1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGlzLWRhcmstdGhlbWU6IG1hcC1nZXQoJGNvbmZpZywgaXMtZGFyayk7XG4gIEByZXR1cm4gbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCwgaWYoJGlzLWRhcmstdGhlbWUsIDAuNSwgMC40MikpO1xufVxuXG5cbi8qIHN0eWxlbGludC1kaXNhYmxlIG1hdGVyaWFsL25vLXByZWZpeGVzICovXG5AbWl4aW4gdXNlci1zZWxlY3QoJHZhbHVlKSB7XG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6ICR2YWx1ZTtcbiAgLW1vei11c2VyLXNlbGVjdDogJHZhbHVlO1xuICAtbXMtdXNlci1zZWxlY3Q6ICR2YWx1ZTtcbiAgdXNlci1zZWxlY3Q6ICR2YWx1ZTtcbn1cblxuQG1peGluIGlucHV0LXBsYWNlaG9sZGVyIHtcbiAgJjo6cGxhY2Vob2xkZXIge1xuICAgIEBjb250ZW50O1xuICB9XG5cbiAgJjo6LW1vei1wbGFjZWhvbGRlciB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cblxuICAmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxuXG4gICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG5AbWl4aW4gY3Vyc29yLWdyYWIge1xuICBjdXJzb3I6IC13ZWJraXQtZ3JhYjtcbiAgY3Vyc29yOiBncmFiO1xufVxuXG5AbWl4aW4gY3Vyc29yLWdyYWJiaW5nIHtcbiAgY3Vyc29yOiAtd2Via2l0LWdyYWJiaW5nO1xuICBjdXJzb3I6IGdyYWJiaW5nO1xufVxuXG5AbWl4aW4gYmFja2ZhY2UtdmlzaWJpbGl0eSgkdmFsdWUpIHtcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiAkdmFsdWU7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6ICR2YWx1ZTtcbn1cbi8qIHN0eWxlbGludC1lbmFibGUgKi9cblxuXG5cbkBtaXhpbiBtYXQtaW5wdXQtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtZm9ybS1maWVsZC10eXBlLW1hdC1uYXRpdmUtc2VsZWN0IC5tYXQtZm9ybS1maWVsZC1pbmZpeDo6YWZ0ZXIge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcbiAgfVxuXG4gIC5tYXQtaW5wdXQtZWxlbWVudDpkaXNhYmxlZCxcbiAgLm1hdC1mb3JtLWZpZWxkLXR5cGUtbWF0LW5hdGl2ZS1zZWxlY3QubWF0LWZvcm0tZmllbGQtZGlzYWJsZWQgLm1hdC1mb3JtLWZpZWxkLWluZml4OjphZnRlciB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG4gIH1cblxuICAubWF0LWlucHV0LWVsZW1lbnQge1xuICAgIGNhcmV0LWNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnksIHRleHQpO1xuXG4gICAgQGluY2x1ZGUgaW5wdXQtcGxhY2Vob2xkZXIge1xuICAgICAgY29sb3I6IF9tYXQtY29udHJvbC1wbGFjZWhvbGRlci1jb2xvcigkY29uZmlnKTtcbiAgICB9XG5cbiAgICAvLyBPbiBkYXJrIHRoZW1lcyB3ZSBzZXQgdGhlIG5hdGl2ZSBgc2VsZWN0YCBjb2xvciB0byBzb21lIHNoYWRlIG9mIHdoaXRlLFxuICAgIC8vIGhvd2V2ZXIgdGhlIGNvbG9yIHByb3BhZ2F0ZXMgdG8gYWxsIG9mIHRoZSBgb3B0aW9uYCBlbGVtZW50cywgd2hpY2ggYXJlXG4gICAgLy8gYWx3YXlzIG9uIGEgd2hpdGUgYmFja2dyb3VuZCBpbnNpZGUgdGhlIGRyb3Bkb3duLCBjYXVzaW5nIHRoZW0gdG8gYmxlbmQgaW4uXG4gICAgLy8gU2luY2Ugd2UgY2FuJ3QgY2hhbmdlIGJhY2tncm91bmQgb2YgdGhlIGRyb3Bkb3duLCB3ZSBuZWVkIHRvIGV4cGxpY2l0bHlcbiAgICAvLyByZXNldCB0aGUgY29sb3Igb2YgdGhlIG9wdGlvbnMgdG8gc29tZXRoaW5nIGRhcmsuXG4gICAgQGlmIChtYXAtZ2V0KCRjb25maWcsIGlzLWRhcmspKSB7XG4gICAgICBvcHRpb24ge1xuICAgICAgICBjb2xvcjogJGRhcmstcHJpbWFyeS10ZXh0O1xuICAgICAgfVxuXG4gICAgICBvcHRpb246ZGlzYWJsZWQge1xuICAgICAgICBjb2xvcjogJGRhcmstZGlzYWJsZWQtdGV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQubWF0LWFjY2VudCAubWF0LWlucHV0LWVsZW1lbnQge1xuICAgIGNhcmV0LWNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCwgdGV4dCk7XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQubWF0LXdhcm4gLm1hdC1pbnB1dC1lbGVtZW50LFxuICAubWF0LWZvcm0tZmllbGQtaW52YWxpZCAubWF0LWlucHV0LWVsZW1lbnQge1xuICAgIGNhcmV0LWNvbG9yOiBtYXQtY29sb3IoJHdhcm4sIHRleHQpO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLXR5cGUtbWF0LW5hdGl2ZS1zZWxlY3QubWF0LWZvcm0tZmllbGQtaW52YWxpZCAubWF0LWZvcm0tZmllbGQtaW5maXg6OmFmdGVyIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCR3YXJuLCB0ZXh0KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LWlucHV0LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAvLyBUaGUgdW5pdC1sZXNzIGxpbmUtaGVpZ2h0IGZyb20gdGhlIGZvbnQgY29uZmlnLlxuICAkbGluZS1oZWlnaHQ6IG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBpbnB1dCk7XG5cbiAgLy8gVGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRoZSB0b3Agb2YgdGhlIGxpbmUgYW5kIHRoZSB0b3Agb2YgdGhlIGFjdHVhbCB0ZXh0XG4gIC8vIChhcyBhIGZyYWN0aW9uIG9mIHRoZSBmb250LXNpemUpLlxuICAkbGluZS1zcGFjaW5nOiAoJGxpbmUtaGVpZ2h0IC0gMSkgLyAyO1xuXG4gIC8vIDxpbnB1dD4gZWxlbWVudHMgc2VlbSB0byBoYXZlIHRoZWlyIGhlaWdodCBzZXQgc2xpZ2h0bHkgdG9vIGxhcmdlIG9uIFNhZmFyaSBjYXVzaW5nIHRoZSB0ZXh0IHRvXG4gIC8vIGJlIG1pc2FsaWduZWQgdy5yLnQuIHRoZSBwbGFjZWhvbGRlci4gQWRkaW5nIHRoaXMgbWFyZ2luIGNvcnJlY3RzIGl0LlxuICBpbnB1dC5tYXQtaW5wdXQtZWxlbWVudCB7XG4gICAgbWFyZ2luLXRvcDogLSRsaW5lLXNwYWNpbmcgKiAxZW07XG4gIH1cbn1cblxuQG1peGluIF9tYXQtaW5wdXQtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWlucHV0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtaW5wdXQnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtaW5wdXQtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1pbnB1dC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWlucHV0LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtbGlzdC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC1saXN0LWJhc2Uge1xuICAgIC5tYXQtbGlzdC1pdGVtIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICAgIH1cblxuICAgIC5tYXQtbGlzdC1vcHRpb24ge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG4gICAgfVxuXG4gICAgLm1hdC1zdWJoZWFkZXIge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtbGlzdC1pdGVtLWRpc2FibGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGRpc2FibGVkLWxpc3Qtb3B0aW9uKTtcbiAgfVxuXG4gIC5tYXQtbGlzdC1vcHRpb24sXG4gIC5tYXQtbmF2LWxpc3QgLm1hdC1saXN0LWl0ZW0sXG4gIC5tYXQtYWN0aW9uLWxpc3QgLm1hdC1saXN0LWl0ZW0ge1xuICAgICY6aG92ZXIsICY6Zm9jdXMge1xuICAgICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCAnaG92ZXInKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWxpc3Qtc2luZ2xlLXNlbGVjdGVkLW9wdGlvbiB7XG4gICAgJiwgJjpob3ZlciwgJjpmb2N1cyB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGhvdmVyLCAwLjEyKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1saXN0LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcblxuICAubWF0LWxpc3QtaXRlbSB7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseTtcbiAgfVxuXG4gIC5tYXQtbGlzdC1vcHRpb24ge1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHk7XG4gIH1cblxuICAvLyBEZWZhdWx0IGxpc3RcbiAgLm1hdC1saXN0LWJhc2Uge1xuICAgIC5tYXQtbGlzdC1pdGVtIHtcbiAgICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBzdWJoZWFkaW5nLTIpO1xuICAgICAgQGluY2x1ZGUgbWF0LWxpbmUtYmFzZShtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSkpO1xuICAgIH1cblxuICAgIC5tYXQtbGlzdC1vcHRpb24ge1xuICAgICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIHN1YmhlYWRpbmctMik7XG4gICAgICBAaW5jbHVkZSBtYXQtbGluZS1iYXNlKG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0xKSk7XG4gICAgfVxuXG4gICAgLm1hdC1zdWJoZWFkZXIge1xuICAgICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnLCBib2R5LTIpO1xuICAgICAgZm9udC1zaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMik7XG4gICAgICBmb250LXdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMik7XG4gICAgfVxuICB9XG5cbiAgLy8gRGVuc2UgbGlzdFxuICAubWF0LWxpc3QtYmFzZVtkZW5zZV0ge1xuICAgIC5tYXQtbGlzdC1pdGVtIHtcbiAgICAgIGZvbnQtc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBjYXB0aW9uKTtcbiAgICAgIEBpbmNsdWRlIG1hdC1saW5lLWJhc2UobWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBjYXB0aW9uKSk7XG4gICAgfVxuXG4gICAgLm1hdC1saXN0LW9wdGlvbiB7XG4gICAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgY2FwdGlvbik7XG4gICAgICBAaW5jbHVkZSBtYXQtbGluZS1iYXNlKG1hdC1mb250LXNpemUoJGNvbmZpZywgY2FwdGlvbikpO1xuICAgIH1cblxuICAgIC5tYXQtc3ViaGVhZGVyIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHk7XG4gICAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgY2FwdGlvbik7XG4gICAgICBmb250LXdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJvZHktMik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LWxpc3QtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWxpc3QtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1saXN0Jykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWxpc3QtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1saXN0LWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtbGlzdC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LW1lbnUtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtbWVudS1wYW5lbCB7XG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oNCwgJGNvbmZpZyk7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCAnY2FyZCcpO1xuICB9XG5cbiAgLm1hdC1tZW51LWl0ZW0ge1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsICd0ZXh0Jyk7XG5cbiAgICAmW2Rpc2FibGVkXSB7XG4gICAgICAmLCAmOjphZnRlciB7XG4gICAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsICdkaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tYXQtbWVudS1pdGVtIC5tYXQtaWNvbi1uby1jb2xvcixcbiAgLm1hdC1tZW51LWl0ZW0tc3VibWVudS10cmlnZ2VyOjphZnRlciB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgJ2ljb24nKTtcbiAgfVxuXG4gIC5tYXQtbWVudS1pdGVtOmhvdmVyLFxuICAubWF0LW1lbnUtaXRlbS5jZGstcHJvZ3JhbS1mb2N1c2VkLFxuICAubWF0LW1lbnUtaXRlbS5jZGsta2V5Ym9hcmQtZm9jdXNlZCxcbiAgLm1hdC1tZW51LWl0ZW0taGlnaGxpZ2h0ZWQge1xuICAgICY6bm90KFtkaXNhYmxlZF0pIHtcbiAgICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgJ2hvdmVyJyk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtbWVudS10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1tZW51LWl0ZW0ge1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcsIGJvZHktMSk7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSk7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBib2R5LTEpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1tZW51LWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1tZW51LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtbWVudScpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1tZW51LWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtbWVudS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LW1lbnUtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cbiRtYXQtcGFnaW5hdG9yLWhlaWdodDogNTZweCAhZGVmYXVsdDtcbi8vIE1pbmltdW0gaGVpZ2h0IGZvciBwYWdpbmF0b3IncyBpbiB0aGUgaGlnaGVzdCBkZW5zaXR5IGlzIGRldGVybWluZWQgYmFzZWQgb24gaG93XG4vLyBtdWNoIHRoZSBwYWdpbmF0b3IgY2FuIHNocmluayB1bnRpbCB0aGUgY29udGVudCBleGNlZWRzIChpLmUuIG5hdmlnYXRpb24gYnV0dG9ucykuXG4kbWF0LXBhZ2luYXRvci1taW5pbXVtLWhlaWdodDogNDBweCAhZGVmYXVsdDtcbiRtYXQtcGFnaW5hdG9yLW1heGltdW0taGVpZ2h0OiAkbWF0LXBhZ2luYXRvci1oZWlnaHQgIWRlZmF1bHQ7XG5cbiRtYXQtcGFnaW5hdG9yLWRlbnNpdHktY29uZmlnOiAoXG4gIGhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRtYXQtcGFnaW5hdG9yLWhlaWdodCxcbiAgICBtYXhpbXVtOiAkbWF0LXBhZ2luYXRvci1tYXhpbXVtLWhlaWdodCxcbiAgICBtaW5pbXVtOiAkbWF0LXBhZ2luYXRvci1taW5pbXVtLWhlaWdodCxcbiAgKVxuKSAhZGVmYXVsdDtcblxuXG5AbWl4aW4gbWF0LXBhZ2luYXRvci1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG5cbiAgLm1hdC1wYWdpbmF0b3Ige1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgJ2NhcmQnKTtcbiAgfVxuXG4gIC5tYXQtcGFnaW5hdG9yLFxuICAubWF0LXBhZ2luYXRvci1wYWdlLXNpemUgLm1hdC1zZWxlY3QtdHJpZ2dlciB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1wYWdpbmF0b3ItZGVjcmVtZW50LFxuICAubWF0LXBhZ2luYXRvci1pbmNyZW1lbnQge1xuICAgIGJvcmRlci10b3A6IDJweCBzb2xpZCBtYXQtY29sb3IoJGZvcmVncm91bmQsICdpY29uJyk7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCAnaWNvbicpO1xuICB9XG5cbiAgLm1hdC1wYWdpbmF0b3ItZmlyc3QsXG4gIC5tYXQtcGFnaW5hdG9yLWxhc3Qge1xuICAgIGJvcmRlci10b3A6IDJweCBzb2xpZCBtYXQtY29sb3IoJGZvcmVncm91bmQsICdpY29uJyk7XG4gIH1cblxuICAubWF0LWljb24tYnV0dG9uW2Rpc2FibGVkXSB7XG4gICAgLm1hdC1wYWdpbmF0b3ItZGVjcmVtZW50LFxuICAgIC5tYXQtcGFnaW5hdG9yLWluY3JlbWVudCxcbiAgICAubWF0LXBhZ2luYXRvci1maXJzdCxcbiAgICAubWF0LXBhZ2luYXRvci1sYXN0IHtcbiAgICAgIGJvcmRlci1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCAnZGlzYWJsZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1wYWdpbmF0b3ItdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtcGFnaW5hdG9yLFxuICAubWF0LXBhZ2luYXRvci1wYWdlLXNpemUgLm1hdC1zZWxlY3QtdHJpZ2dlciB7XG4gICAgZm9udDoge1xuICAgICAgZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZywgY2FwdGlvbik7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGNhcHRpb24pO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1wYWdpbmF0b3ItZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRkZW5zaXR5LXNjYWxlOiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkaGVpZ2h0OiBfbWF0LWRlbnNpdHktcHJvcC12YWx1ZSgkbWF0LXBhZ2luYXRvci1kZW5zaXR5LWNvbmZpZywgJGRlbnNpdHktc2NhbGUsIGhlaWdodCk7XG5cbiAgQGluY2x1ZGUgX21hdC1kZW5zaXR5LWxlZ2FjeS1jb21wYXRpYmlsaXR5KCkge1xuICAgIC5tYXQtcGFnaW5hdG9yLWNvbnRhaW5lciB7XG4gICAgICBtaW4taGVpZ2h0OiAkaGVpZ2h0O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXBhZ2luYXRvci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXBhZ2luYXRvcicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1wYWdpbmF0b3ItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1wYWdpbmF0b3ItZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1wYWdpbmF0b3ItdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuQG1peGluIG1hdC1wcm9ncmVzcy1iYXItY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG5cbiAgLm1hdC1wcm9ncmVzcy1iYXItYmFja2dyb3VuZCB7XG4gICAgZmlsbDogbWF0LWNvbG9yKCRwcmltYXJ5LCBsaWdodGVyKTtcbiAgfVxuXG4gIC5tYXQtcHJvZ3Jlc3MtYmFyLWJ1ZmZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCBsaWdodGVyKTtcbiAgfVxuXG4gIC5tYXQtcHJvZ3Jlc3MtYmFyLWZpbGw6OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnkpO1xuICB9XG5cbiAgLm1hdC1wcm9ncmVzcy1iYXIubWF0LWFjY2VudCB7XG4gICAgLm1hdC1wcm9ncmVzcy1iYXItYmFja2dyb3VuZCB7XG4gICAgICBmaWxsOiBtYXQtY29sb3IoJGFjY2VudCwgbGlnaHRlcik7XG4gICAgfVxuXG4gICAgLm1hdC1wcm9ncmVzcy1iYXItYnVmZmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYWNjZW50LCBsaWdodGVyKTtcbiAgICB9XG5cbiAgICAubWF0LXByb2dyZXNzLWJhci1maWxsOjphZnRlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1wcm9ncmVzcy1iYXIubWF0LXdhcm4ge1xuICAgIC5tYXQtcHJvZ3Jlc3MtYmFyLWJhY2tncm91bmQge1xuICAgICAgZmlsbDogbWF0LWNvbG9yKCR3YXJuLCBsaWdodGVyKTtcbiAgICB9XG5cbiAgICAubWF0LXByb2dyZXNzLWJhci1idWZmZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCR3YXJuLCBsaWdodGVyKTtcbiAgICB9XG5cbiAgICAubWF0LXByb2dyZXNzLWJhci1maWxsOjphZnRlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHdhcm4pO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXByb2dyZXNzLWJhci10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LXByb2dyZXNzLWJhci1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtcHJvZ3Jlc3MtYmFyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtcHJvZ3Jlc3MtYmFyJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXByb2dyZXNzLWJhci1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXByb2dyZXNzLWJhci1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXByb2dyZXNzLWJhci10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lci1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcblxuICAubWF0LXByb2dyZXNzLXNwaW5uZXIsIC5tYXQtc3Bpbm5lciB7XG4gICAgY2lyY2xlIHtcbiAgICAgIHN0cm9rZTogbWF0LWNvbG9yKCRwcmltYXJ5KTtcbiAgICB9XG5cbiAgICAmLm1hdC1hY2NlbnQgY2lyY2xlIHtcbiAgICAgIHN0cm9rZTogbWF0LWNvbG9yKCRhY2NlbnQpO1xuICAgIH1cblxuICAgICYubWF0LXdhcm4gY2lyY2xlIHtcbiAgICAgIHN0cm9rZTogbWF0LWNvbG9yKCR3YXJuKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1wcm9ncmVzcy1zcGlubmVyLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIF9tYXQtcHJvZ3Jlc3Mtc3Bpbm5lci1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXByb2dyZXNzLXNwaW5uZXInKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtcHJvZ3Jlc3Mtc3Bpbm5lci1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXByb2dyZXNzLXNwaW5uZXItZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1wcm9ncmVzcy1zcGlubmVyLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuQG1peGluIF9tYXQtcmFkaW8tY29sb3IoJHBhbGV0dGUpIHtcbiAgJi5tYXQtcmFkaW8tY2hlY2tlZCAubWF0LXJhZGlvLW91dGVyLWNpcmNsZSB7XG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUpO1xuICB9XG5cbiAgLm1hdC1yYWRpby1pbm5lci1jaXJjbGUsXG4gIC5tYXQtcmFkaW8tcmlwcGxlIC5tYXQtcmlwcGxlLWVsZW1lbnQ6bm90KC5tYXQtcmFkaW8tcGVyc2lzdGVudC1yaXBwbGUpLFxuICAmLm1hdC1yYWRpby1jaGVja2VkIC5tYXQtcmFkaW8tcGVyc2lzdGVudC1yaXBwbGUsXG4gICY6YWN0aXZlIC5tYXQtcmFkaW8tcGVyc2lzdGVudC1yaXBwbGUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSk7XG4gIH1cbn1cblxuQG1peGluIG1hdC1yYWRpby1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC5tYXQtcmFkaW8tb3V0ZXItY2lyY2xlIHtcbiAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1yYWRpby1idXR0b24ge1xuICAgICYubWF0LXByaW1hcnkge1xuICAgICAgQGluY2x1ZGUgX21hdC1yYWRpby1jb2xvcigkcHJpbWFyeSk7XG4gICAgfVxuXG4gICAgJi5tYXQtYWNjZW50IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtcmFkaW8tY29sb3IoJGFjY2VudCk7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXJhZGlvLWNvbG9yKCR3YXJuKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIG5lZWRzIGV4dHJhIHNwZWNpZmljaXR5LCBiZWNhdXNlIHRoZSBjbGFzc2VzIGFib3ZlIGFyZSBjb21iaW5lZFxuICAgIC8vIChlLmcuIGAubWF0LXJhZGlvLWJ1dHRvbi5tYXQtYWNjZW50YCkgd2hpY2ggaW5jcmVhc2VzIHRoZWlyIHNwZWNpZmljaXR5IGEgbG90LlxuICAgIC8vIFRPRE86IGNvbnNpZGVyIG1ha2luZyB0aGUgc2VsZWN0b3JzIGludG8gZGVzY2VuZGFudHMgKGAubWF0LXByaW1hcnkgLm1hdC1yYWRpby1idXR0b25gKS5cbiAgICAmLm1hdC1yYWRpby1kaXNhYmxlZCB7XG4gICAgICAmLm1hdC1yYWRpby1jaGVja2VkIC5tYXQtcmFkaW8tb3V0ZXItY2lyY2xlLFxuICAgICAgLm1hdC1yYWRpby1vdXRlci1jaXJjbGUge1xuICAgICAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQpO1xuICAgICAgfVxuXG4gICAgICAubWF0LXJhZGlvLXJpcHBsZSAubWF0LXJpcHBsZS1lbGVtZW50LFxuICAgICAgLm1hdC1yYWRpby1pbm5lci1jaXJjbGUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkKTtcbiAgICAgIH1cblxuICAgICAgLm1hdC1yYWRpby1sYWJlbC1jb250ZW50IHtcbiAgICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN3aXRjaCB0aGlzIHRvIGEgc29saWQgY29sb3Igc2luY2Ugd2UncmUgdXNpbmcgYG9wYWNpdHlgXG4gICAgLy8gdG8gY29udHJvbCBob3cgb3BhcXVlIHRoZSByaXBwbGUgc2hvdWxkIGJlLlxuICAgIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWFwX2dldCgkZm9yZWdyb3VuZCwgYmFzZSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtcmFkaW8tdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtcmFkaW8tYnV0dG9uIHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXJhZGlvLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1yYWRpby10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXJhZGlvJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXJhZGlvLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtcmFkaW8tZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1yYWRpby10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG5cbkBtaXhpbiBtYXQtc2VsZWN0LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG5cbiAgLm1hdC1zZWxlY3QtdmFsdWUge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICB9XG5cbiAgLm1hdC1zZWxlY3QtcGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiBfbWF0LWNvbnRyb2wtcGxhY2Vob2xkZXItY29sb3IoJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LXNlbGVjdC1kaXNhYmxlZCAubWF0LXNlbGVjdC12YWx1ZSB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG4gIH1cblxuICAubWF0LXNlbGVjdC1hcnJvdyB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICB9XG5cbiAgLm1hdC1zZWxlY3QtcGFuZWwge1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCk7XG4gICAgQGluY2x1ZGUgX21hdC10aGVtZS1vdmVycmlkYWJsZS1lbGV2YXRpb24oNCwgJGNvbmZpZyk7XG5cbiAgICAubWF0LW9wdGlvbi5tYXQtc2VsZWN0ZWQ6bm90KC5tYXQtb3B0aW9uLW11bHRpcGxlKSB7XG4gICAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGhvdmVyLCAwLjEyKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQge1xuICAgICYubWF0LWZvY3VzZWQge1xuICAgICAgJi5tYXQtcHJpbWFyeSAubWF0LXNlbGVjdC1hcnJvdyB7XG4gICAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnksIHRleHQpO1xuICAgICAgfVxuXG4gICAgICAmLm1hdC1hY2NlbnQgLm1hdC1zZWxlY3QtYXJyb3cge1xuICAgICAgICBjb2xvcjogbWF0LWNvbG9yKCRhY2NlbnQsIHRleHQpO1xuICAgICAgfVxuXG4gICAgICAmLm1hdC13YXJuIC5tYXQtc2VsZWN0LWFycm93IHtcbiAgICAgICAgY29sb3I6IG1hdC1jb2xvcigkd2FybiwgdGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1hdC1zZWxlY3QubWF0LXNlbGVjdC1pbnZhbGlkIC5tYXQtc2VsZWN0LWFycm93IHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHdhcm4sIHRleHQpO1xuICAgIH1cblxuICAgIC5tYXQtc2VsZWN0Lm1hdC1zZWxlY3QtZGlzYWJsZWQgLm1hdC1zZWxlY3QtYXJyb3cge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtc2VsZWN0LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAvLyBUaGUgdW5pdC1sZXNzIGxpbmUtaGVpZ2h0IGZyb20gdGhlIGZvbnQgY29uZmlnLlxuICAkbGluZS1oZWlnaHQ6IG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBpbnB1dCk7XG5cbiAgLm1hdC1zZWxlY3Qge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LXNlbGVjdC10cmlnZ2VyIHtcbiAgICBoZWlnaHQ6ICRsaW5lLWhlaWdodCAqIDFlbTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC1zZWxlY3QtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXNlbGVjdC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXNlbGVjdCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zZWxlY3QtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1zZWxlY3QtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zZWxlY3QtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LXNpZGVuYXYtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAkZHJhd2VyLWJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgZGlhbG9nKTtcbiAgJGRyYXdlci1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjogIG1hdC1jb2xvcigkYmFja2dyb3VuZCwgYmFja2dyb3VuZCk7XG4gICRkcmF3ZXItcHVzaC1iYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGRpYWxvZyk7XG4gICRkcmF3ZXItc2lkZS1ib3JkZXI6IHNvbGlkIDFweCBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuXG4gIC5tYXQtZHJhd2VyLWNvbnRhaW5lciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGRyYXdlci1jb250YWluZXItYmFja2dyb3VuZC1jb2xvcjtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxuXG4gIC5tYXQtZHJhd2VyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZHJhd2VyLWJhY2tncm91bmQtY29sb3I7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG5cbiAgICAmLm1hdC1kcmF3ZXItcHVzaCB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZHJhd2VyLXB1c2gtYmFja2dyb3VuZC1jb2xvcjtcbiAgICB9XG5cbiAgICAmOm5vdCgubWF0LWRyYXdlci1zaWRlKSB7XG4gICAgICAvLyBUaGUgZWxldmF0aW9uIG9mIHotMTYgaXMgbm90ZWQgaW4gdGhlIGRlc2lnbiBzcGVjaWZpY2F0aW9ucy5cbiAgICAgIC8vIFNlZSBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9jb21wb25lbnRzL25hdmlnYXRpb24tZHJhd2VyLmh0bWxcbiAgICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKDE2LCAkY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICAubWF0LWRyYXdlci1zaWRlIHtcbiAgICBib3JkZXItcmlnaHQ6ICRkcmF3ZXItc2lkZS1ib3JkZXI7XG5cbiAgICAmLm1hdC1kcmF3ZXItZW5kIHtcbiAgICAgIGJvcmRlci1sZWZ0OiAkZHJhd2VyLXNpZGUtYm9yZGVyO1xuICAgICAgYm9yZGVyLXJpZ2h0OiBub25lO1xuICAgIH1cbiAgfVxuXG4gIFtkaXI9J3J0bCddIC5tYXQtZHJhd2VyLXNpZGUge1xuICAgIGJvcmRlci1sZWZ0OiAkZHJhd2VyLXNpZGUtYm9yZGVyO1xuICAgIGJvcmRlci1yaWdodDogbm9uZTtcblxuICAgICYubWF0LWRyYXdlci1lbmQge1xuICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgICBib3JkZXItcmlnaHQ6ICRkcmF3ZXItc2lkZS1ib3JkZXI7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1kcmF3ZXItYmFja2Ryb3AubWF0LWRyYXdlci1zaG93biB7XG4gICAgJG9wYWNpdHk6IDAuNjtcbiAgICAkYmFja2Ryb3AtY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgY2FyZCwgJG9wYWNpdHkpO1xuXG4gICAgQGlmICh0eXBlLW9mKCRiYWNrZHJvcC1jb2xvcikgPT0gY29sb3IpIHtcbiAgICAgIC8vIFdlIHVzZSBpbnZlcnQoKSBoZXJlIHRvIGhhdmUgdGhlIGRhcmtlbiB0aGUgYmFja2dyb3VuZCBjb2xvciBleHBlY3RlZCB0byBiZSB1c2VkLiBJZiB0aGVcbiAgICAgIC8vIGJhY2tncm91bmQgaXMgbGlnaHQsIHdlIHVzZSBhIGRhcmsgYmFja2Ryb3AuIElmIHRoZSBiYWNrZ3JvdW5kIGlzIGRhcmssXG4gICAgICAvLyB3ZSB1c2UgYSBsaWdodCBiYWNrZHJvcC5cbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGludmVydCgkYmFja2Ryb3AtY29sb3IpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAvLyBJZiB3ZSBjb3VsZG4ndCByZXNvbHZlIHRoZSBiYWNrZHJvcCBjb2xvciB0byBhIGNvbG9yIHZhbHVlLCBmYWxsIGJhY2sgdG8gdXNpbmdcbiAgICAgIC8vIGBvcGFjaXR5YCB0byBtYWtlIGl0IG9wYXF1ZSBzaW5jZSBpdHMgZW5kIHZhbHVlIGNvdWxkIGJlIGEgc29saWQgY29sb3IuXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2Ryb3AtY29sb3I7XG4gICAgICBvcGFjaXR5OiAkb3BhY2l0eTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC1zaWRlbmF2LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIF9tYXQtc2lkZW5hdi1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtc2lkZW5hdi10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXNpZGVuYXYnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2lkZW5hdi1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXNpZGVuYXYtZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zaWRlbmF2LXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5AbWl4aW4gX21hdC1zbGlkZS10b2dnbGUtY2hlY2tlZCgkcGFsZXR0ZSwgJHRodW1iLWNoZWNrZWQtaHVlKSB7XG4gICYubWF0LWNoZWNrZWQge1xuICAgIC5tYXQtc2xpZGUtdG9nZ2xlLXRodW1iIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSwgJHRodW1iLWNoZWNrZWQtaHVlKTtcbiAgICB9XG5cbiAgICAubWF0LXNsaWRlLXRvZ2dsZS1iYXIge1xuICAgICAgLy8gT3BhY2l0eSBpcyBkZXRlcm1pbmVkIGZyb20gdGhlIHNwZWNzIGZvciB0aGUgc2VsZWN0aW9uIGNvbnRyb2xzLlxuICAgICAgLy8gU2VlOiBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9jb21wb25lbnRzL3NlbGVjdGlvbi1jb250cm9scy5odG1sI3NwZWNzXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUsICR0aHVtYi1jaGVja2VkLWh1ZSwgMC41NCk7XG4gICAgfVxuXG4gICAgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gICAgICAvLyBTZXQgbm8gb3BhY2l0eSBmb3IgdGhlIHJpcHBsZXMgYmVjYXVzZSB0aGUgcmlwcGxlIG9wYWNpdHkgd2lsbCBiZSBhZGp1c3RlZCBkeW5hbWljYWxseVxuICAgICAgLy8gYmFzZWQgb24gdGhlIHR5cGUgb2YgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2xpZGUtdG9nZ2xlIChlLmcuIGZvciBob3ZlciwgZm9jdXMpXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUsICR0aHVtYi1jaGVja2VkLWh1ZSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtc2xpZGUtdG9nZ2xlLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRpcy1kYXJrOiBtYXBfZ2V0KCRjb25maWcsIGlzLWRhcmspO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGJhY2tncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgYmFja2dyb3VuZCk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gIC8vIENvbG9yIGh1ZXMgYXJlIGJhc2VkIG9uIHRoZSBzcGVjcyB3aGljaCBicmllZmx5IHNob3cgdGhlIGh1ZXMgdGhhdCBhcmUgYXBwbGllZCB0byBhIHN3aXRjaC5cbiAgLy8gVGhlIDIwMTggc3BlY3Mgbm8gbG9uZ2VyIGRlc2NyaWJlIGhvdyBkYXJrIHN3aXRjaGVzIHNob3VsZCBsb29rIGxpa2UuIER1ZSB0byB0aGUgbGFjayBvZlxuICAvLyBpbmZvcm1hdGlvbiBmb3IgZGFyayB0aGVtZWQgc3dpdGNoZXMsIHdlIHBhcnRpYWxseSBrZWVwIHRoZSBvbGQgYmVoYXZpb3IgdGhhdCBpcyBiYXNlZCBvblxuICAvLyB0aGUgcHJldmlvdXMgc3BlY2lmaWNhdGlvbnMuIEZvciB0aGUgY2hlY2tlZCBjb2xvciB3ZSBhbHdheXMgdXNlIHRoZSBgZGVmYXVsdGAgaHVlIGJlY2F1c2VcbiAgLy8gdGhhdCBmb2xsb3dzIE1EQyBhbmQgYWxzbyBtYWtlcyBpdCBlYXNpZXIgZm9yIHBlb3BsZSB0byBjcmVhdGUgYSBjdXN0b20gdGhlbWUgd2l0aG91dCBuZWVkaW5nXG4gIC8vIHRvIHNwZWNpZnkgZWFjaCBodWUgaW5kaXZpZHVhbGx5LlxuICAkdGh1bWItdW5jaGVja2VkLWh1ZTogaWYoJGlzLWRhcmssIDQwMCwgNTApO1xuICAkdGh1bWItY2hlY2tlZC1odWU6IGRlZmF1bHQ7XG5cbiAgJGJhci11bmNoZWNrZWQtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQpO1xuICAkcmlwcGxlLXVuY2hlY2tlZC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBiYXNlKTtcblxuICAubWF0LXNsaWRlLXRvZ2dsZSB7XG4gICAgQGluY2x1ZGUgX21hdC1zbGlkZS10b2dnbGUtY2hlY2tlZCgkYWNjZW50LCAkdGh1bWItY2hlY2tlZC1odWUpO1xuXG4gICAgJi5tYXQtcHJpbWFyeSB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXNsaWRlLXRvZ2dsZS1jaGVja2VkKCRwcmltYXJ5LCAkdGh1bWItY2hlY2tlZC1odWUpO1xuICAgIH1cblxuICAgICYubWF0LXdhcm4ge1xuICAgICAgQGluY2x1ZGUgX21hdC1zbGlkZS10b2dnbGUtY2hlY2tlZCgkd2FybiwgJHRodW1iLWNoZWNrZWQtaHVlKTtcbiAgICB9XG5cbiAgICAmOm5vdCgubWF0LWNoZWNrZWQpIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xuICAgICAgLy8gU2V0IG5vIG9wYWNpdHkgZm9yIHRoZSByaXBwbGVzIGJlY2F1c2UgdGhlIHJpcHBsZSBvcGFjaXR5IHdpbGwgYmUgYWRqdXN0ZWQgZHluYW1pY2FsbHlcbiAgICAgIC8vIGJhc2VkIG9uIHRoZSB0eXBlIG9mIGludGVyYWN0aW9uIHdpdGggdGhlIHNsaWRlLXRvZ2dsZSAoZS5nLiBmb3IgaG92ZXIsIGZvY3VzKVxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHJpcHBsZS11bmNoZWNrZWQtY29sb3I7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1zbGlkZS10b2dnbGUtdGh1bWIge1xuICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKDEsICRjb25maWcpO1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkbWF0LWdyZXksICR0aHVtYi11bmNoZWNrZWQtaHVlKTtcbiAgfVxuXG4gIC5tYXQtc2xpZGUtdG9nZ2xlLWJhciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhci11bmNoZWNrZWQtY29sb3I7XG4gIH1cbn1cblxuQG1peGluIG1hdC1zbGlkZS10b2dnbGUtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtc2xpZGUtdG9nZ2xlLWNvbnRlbnQge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtc2xpZGUtdG9nZ2xlLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1zbGlkZS10b2dnbGUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1zbGlkZS10b2dnbGUnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2xpZGUtdG9nZ2xlLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtc2xpZGUtdG9nZ2xlLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2xpZGUtdG9nZ2xlLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5AbWl4aW4gX21hdC1zbGlkZXItaW5uZXItY29udGVudC10aGVtZSgkcGFsZXR0ZSkge1xuICAubWF0LXNsaWRlci10cmFjay1maWxsLFxuICAubWF0LXNsaWRlci10aHVtYixcbiAgLm1hdC1zbGlkZXItdGh1bWItbGFiZWwge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkcGFsZXR0ZSk7XG4gIH1cblxuICAubWF0LXNsaWRlci10aHVtYi1sYWJlbC10ZXh0IHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRwYWxldHRlLCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgfVxuXG4gIC5tYXQtc2xpZGVyLWZvY3VzLXJpbmcge1xuICAgICRvcGFjaXR5OiAwLjI7XG4gICAgJGNvbG9yOiBtYXQtY29sb3IoJHBhbGV0dGUsIGRlZmF1bHQsICRvcGFjaXR5KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I7XG5cbiAgICAvLyBgbWF0LWNvbG9yYCB1c2VzIGByZ2JhYCBmb3IgdGhlIG9wYWNpdHkgd2hpY2ggd29uJ3Qgd29yayB3aXRoXG4gICAgLy8gQ1NTIHZhcmlhYmxlcyBzbyB3ZSBuZWVkIHRvIHVzZSBgb3BhY2l0eWAgYXMgYSBmYWxsYmFjay5cbiAgICBAaWYgKHR5cGUtb2YoJGNvbG9yKSAhPSBjb2xvcikge1xuICAgICAgb3BhY2l0eTogJG9wYWNpdHk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtc2xpZGVyLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRwcmltYXJ5OiBtYXAtZ2V0KCRjb25maWcsIHByaW1hcnkpO1xuICAkYWNjZW50OiBtYXAtZ2V0KCRjb25maWcsIGFjY2VudCk7XG4gICR3YXJuOiBtYXAtZ2V0KCRjb25maWcsIHdhcm4pO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgJG1hdC1zbGlkZXItb2ZmLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNsaWRlci1vZmYpO1xuICAkbWF0LXNsaWRlci1vZmYtZm9jdXNlZC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzbGlkZXItb2ZmLWFjdGl2ZSk7XG4gICRtYXQtc2xpZGVyLWRpc2FibGVkLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNsaWRlci1vZmYpO1xuICAkbWF0LXNsaWRlci1sYWJlbGVkLW1pbi12YWx1ZS10aHVtYi1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzbGlkZXItbWluKTtcbiAgJG1hdC1zbGlkZXItbGFiZWxlZC1taW4tdmFsdWUtdGh1bWItbGFiZWwtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2xpZGVyLW9mZik7XG4gICRtYXQtc2xpZGVyLXRpY2stb3BhY2l0eTogMC43O1xuICAkbWF0LXNsaWRlci10aWNrLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGJhc2UsICRtYXQtc2xpZGVyLXRpY2stb3BhY2l0eSk7XG4gICRtYXQtc2xpZGVyLXRpY2stc2l6ZTogMnB4O1xuXG4gIC5tYXQtc2xpZGVyLXRyYWNrLWJhY2tncm91bmQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRtYXQtc2xpZGVyLW9mZi1jb2xvcjtcbiAgfVxuXG4gIC5tYXQtcHJpbWFyeSB7XG4gICAgQGluY2x1ZGUgX21hdC1zbGlkZXItaW5uZXItY29udGVudC10aGVtZSgkcHJpbWFyeSk7XG4gIH1cblxuICAubWF0LWFjY2VudCB7XG4gICAgQGluY2x1ZGUgX21hdC1zbGlkZXItaW5uZXItY29udGVudC10aGVtZSgkYWNjZW50KTtcbiAgfVxuXG4gIC5tYXQtd2FybiB7XG4gICAgQGluY2x1ZGUgX21hdC1zbGlkZXItaW5uZXItY29udGVudC10aGVtZSgkd2Fybik7XG4gIH1cblxuICAubWF0LXNsaWRlcjpob3ZlcixcbiAgLmNkay1mb2N1c2VkIHtcbiAgICAubWF0LXNsaWRlci10cmFjay1iYWNrZ3JvdW5kIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtYXQtc2xpZGVyLW9mZi1mb2N1c2VkLWNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtc2xpZGVyLWRpc2FibGVkIHtcbiAgICAubWF0LXNsaWRlci10cmFjay1iYWNrZ3JvdW5kLFxuICAgIC5tYXQtc2xpZGVyLXRyYWNrLWZpbGwsXG4gICAgLm1hdC1zbGlkZXItdGh1bWIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1hdC1zbGlkZXItZGlzYWJsZWQtY29sb3I7XG4gICAgfVxuXG4gICAgJjpob3ZlciB7XG4gICAgICAubWF0LXNsaWRlci10cmFjay1iYWNrZ3JvdW5kIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1hdC1zbGlkZXItZGlzYWJsZWQtY29sb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1hdC1zbGlkZXItbWluLXZhbHVlIHtcbiAgICAubWF0LXNsaWRlci1mb2N1cy1yaW5nIHtcbiAgICAgICRvcGFjaXR5OiAwLjEyO1xuICAgICAgJGNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGJhc2UsICRvcGFjaXR5KTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjtcblxuICAgICAgLy8gYG1hdC1jb2xvcmAgdXNlcyBgcmdiYWAgZm9yIHRoZSBvcGFjaXR5IHdoaWNoIHdvbid0IHdvcmsgd2l0aFxuICAgICAgLy8gQ1NTIHZhcmlhYmxlcyBzbyB3ZSBuZWVkIHRvIHVzZSBgb3BhY2l0eWAgYXMgYSBmYWxsYmFjay5cbiAgICAgIEBpZiAodHlwZS1vZigkY29sb3IpICE9IGNvbG9yKSB7XG4gICAgICAgIG9wYWNpdHk6ICRvcGFjaXR5O1xuICAgICAgfVxuICAgIH1cblxuICAgICYubWF0LXNsaWRlci10aHVtYi1sYWJlbC1zaG93aW5nIHtcbiAgICAgIC5tYXQtc2xpZGVyLXRodW1iLFxuICAgICAgLm1hdC1zbGlkZXItdGh1bWItbGFiZWwge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWF0LXNsaWRlci1sYWJlbGVkLW1pbi12YWx1ZS10aHVtYi1jb2xvcjtcbiAgICAgIH1cblxuICAgICAgJi5jZGstZm9jdXNlZCB7XG4gICAgICAgIC5tYXQtc2xpZGVyLXRodW1iLFxuICAgICAgICAubWF0LXNsaWRlci10aHVtYi1sYWJlbCB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1hdC1zbGlkZXItbGFiZWxlZC1taW4tdmFsdWUtdGh1bWItbGFiZWwtY29sb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAmOm5vdCgubWF0LXNsaWRlci10aHVtYi1sYWJlbC1zaG93aW5nKSB7XG4gICAgICAubWF0LXNsaWRlci10aHVtYiB7XG4gICAgICAgIGJvcmRlci1jb2xvcjogJG1hdC1zbGlkZXItb2ZmLWNvbG9yO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIH1cblxuICAgICAgJjpob3ZlcixcbiAgICAgICYuY2RrLWZvY3VzZWQge1xuICAgICAgICAubWF0LXNsaWRlci10aHVtYiB7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAkbWF0LXNsaWRlci1vZmYtZm9jdXNlZC1jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgICYubWF0LXNsaWRlci1kaXNhYmxlZCAubWF0LXNsaWRlci10aHVtYiB7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAkbWF0LXNsaWRlci1kaXNhYmxlZC1jb2xvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tYXQtc2xpZGVyLWhhcy10aWNrcyAubWF0LXNsaWRlci13cmFwcGVyOjphZnRlciB7XG4gICAgYm9yZGVyLWNvbG9yOiAkbWF0LXNsaWRlci10aWNrLWNvbG9yO1xuXG4gICAgLy8gYG1hdC1jb2xvcmAgdXNlcyBgcmdiYWAgZm9yIHRoZSBvcGFjaXR5IHdoaWNoIHdvbid0IHdvcmsgd2l0aFxuICAgIC8vIENTUyB2YXJpYWJsZXMgc28gd2UgbmVlZCB0byB1c2UgYG9wYWNpdHlgIGFzIGEgZmFsbGJhY2suXG4gICAgQGlmICh0eXBlLW9mKCRtYXQtc2xpZGVyLXRpY2stY29sb3IpICE9IGNvbG9yKSB7XG4gICAgICBvcGFjaXR5OiAkbWF0LXNsaWRlci10aWNrLW9wYWNpdHk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1zbGlkZXItaG9yaXpvbnRhbCAubWF0LXNsaWRlci10aWNrcyB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCh0byByaWdodCwgJG1hdC1zbGlkZXItdGljay1jb2xvcixcbiAgICAgICAgJG1hdC1zbGlkZXItdGljay1jb2xvciAkbWF0LXNsaWRlci10aWNrLXNpemUsIHRyYW5zcGFyZW50IDAsIHRyYW5zcGFyZW50KTtcbiAgICAvLyBGaXJlZm94IGRvZXNuJ3QgZHJhdyB0aGUgZ3JhZGllbnQgY29ycmVjdGx5IHdpdGggJ3RvIHJpZ2h0J1xuICAgIC8vIChzZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTMxNDMxOSkuXG4gICAgYmFja2dyb3VuZC1pbWFnZTogLW1vei1yZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KDAuMDAwMWRlZywgJG1hdC1zbGlkZXItdGljay1jb2xvcixcbiAgICAgICAgJG1hdC1zbGlkZXItdGljay1jb2xvciAkbWF0LXNsaWRlci10aWNrLXNpemUsIHRyYW5zcGFyZW50IDAsIHRyYW5zcGFyZW50KTtcblxuICAgIC8vIGBtYXQtY29sb3JgIHVzZXMgYHJnYmFgIGZvciB0aGUgb3BhY2l0eSB3aGljaCB3b24ndCB3b3JrIHdpdGhcbiAgICAvLyBDU1MgdmFyaWFibGVzIHNvIHdlIG5lZWQgdG8gdXNlIGBvcGFjaXR5YCBhcyBhIGZhbGxiYWNrLlxuICAgIEBpZiAodHlwZS1vZigkbWF0LXNsaWRlci10aWNrLWNvbG9yKSAhPSBjb2xvcikge1xuICAgICAgb3BhY2l0eTogJG1hdC1zbGlkZXItdGljay1vcGFjaXR5O1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtc2xpZGVyLXZlcnRpY2FsIC5tYXQtc2xpZGVyLXRpY2tzIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiByZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgJG1hdC1zbGlkZXItdGljay1jb2xvcixcbiAgICAgICAgJG1hdC1zbGlkZXItdGljay1jb2xvciAkbWF0LXNsaWRlci10aWNrLXNpemUsIHRyYW5zcGFyZW50IDAsIHRyYW5zcGFyZW50KTtcblxuICAgIC8vIGBtYXQtY29sb3JgIHVzZXMgYHJnYmFgIGZvciB0aGUgb3BhY2l0eSB3aGljaCB3b24ndCB3b3JrIHdpdGhcbiAgICAvLyBDU1MgdmFyaWFibGVzIHNvIHdlIG5lZWQgdG8gdXNlIGBvcGFjaXR5YCBhcyBhIGZhbGxiYWNrLlxuICAgIEBpZiAodHlwZS1vZigkbWF0LXNsaWRlci10aWNrLWNvbG9yKSAhPSBjb2xvcikge1xuICAgICAgb3BhY2l0eTogJG1hdC1zbGlkZXItdGljay1vcGFjaXR5O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXNsaWRlci10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC1zbGlkZXItdGh1bWItbGFiZWwtdGV4dCB7XG4gICAgZm9udDoge1xuICAgICAgZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGNhcHRpb24pO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0yKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtc2xpZGVyLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1zbGlkZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1zbGlkZXInKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2xpZGVyLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtc2xpZGVyLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc2xpZGVyLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuJG1hdC1zdGVwcGVyLWhlYWRlci1oZWlnaHQ6IDcycHggIWRlZmF1bHQ7XG4vLyBNaW5pbXVtIGhlaWdodCBmb3IgaGlnaGVzdCBkZW5zaXR5IHN0ZXBwZXIncyBpcyBkZXRlcm1pbmVkIGJhc2VkIG9uIGhvdyBtdWNoXG4vLyBzdGVwcGVyIGhlYWRlcnMgY2FuIHNocmluayB1bnRpbCB0aGUgc3RlcCBpY29uIG9yIHN0ZXAgbGFiZWwgZXhjZWVkLiBXZSBjYW4ndCB1c2Vcbi8vIGEgdmFsdWUgYmVsb3cgYDQycHhgIGJlY2F1c2UgdGhlIG9wdGlvbmFsIGxhYmVsIGZvciBzdGVwcyB3b3VsZCBvdGhlcndpc2UgZXhjZWVkLlxuJG1hdC1zdGVwcGVyLWhlYWRlci1taW5pbXVtLWhlaWdodDogNDJweCAhZGVmYXVsdDtcbiRtYXQtc3RlcHBlci1oZWFkZXItbWF4aW11bS1oZWlnaHQ6ICRtYXQtc3RlcHBlci1oZWFkZXItaGVpZ2h0ICFkZWZhdWx0O1xuXG4kbWF0LXN0ZXBwZXItZGVuc2l0eS1jb25maWc6IChcbiAgaGVpZ2h0OiAoXG4gICAgZGVmYXVsdDogJG1hdC1zdGVwcGVyLWhlYWRlci1oZWlnaHQsXG4gICAgbWF4aW11bTogJG1hdC1zdGVwcGVyLWhlYWRlci1tYXhpbXVtLWhlaWdodCxcbiAgICBtaW5pbXVtOiAkbWF0LXN0ZXBwZXItaGVhZGVyLW1pbmltdW0taGVpZ2h0LFxuICApXG4pICFkZWZhdWx0O1xuXG4vLyBOb3RlOiBUaGVzZSB2YXJpYWJsZXMgYXJlIG5vdCBkZW5vdGVkIHdpdGggYCFkZWZhdWx0YCBiZWNhdXNlIHRoZXkgYXJlIHVzZWQgaW4gdGhlIG5vbi10aGVtZVxuLy8gY29tcG9uZW50IHN0eWxlcy4gTW9kaWZ5aW5nIHRoZXNlIHZhcmlhYmxlcyBkb2VzIG5vdCBoYXZlIHRoZSBkZXNpcmVkIGVmZmVjdCBmb3IgY29uc3VtZXJzLlxuJG1hdC1zdGVwcGVyLWxhYmVsLWhlYWRlci1oZWlnaHQ6IDI0cHg7XG4kbWF0LXN0ZXBwZXItbGFiZWwtcG9zaXRpb24tYm90dG9tLXRvcC1nYXA6IDE2cHg7XG4kbWF0LXN0ZXBwZXItbGFiZWwtbWluLXdpZHRoOiA1MHB4O1xuXG4kbWF0LXZlcnRpY2FsLXN0ZXBwZXItY29udGVudC1tYXJnaW46IDM2cHg7XG5cbiRtYXQtc3RlcHBlci1zaWRlLWdhcDogMjRweDtcbiRtYXQtc3RlcHBlci1saW5lLXdpZHRoOiAxcHg7XG4kbWF0LXN0ZXBwZXItbGluZS1nYXA6IDhweDtcblxuJG1hdC1zdGVwLXN1Yi1sYWJlbC1mb250LXNpemU6IDEycHg7XG4kbWF0LXN0ZXAtaGVhZGVyLWljb24tc2l6ZTogMTZweDtcblxuXG5AbWl4aW4gbWF0LXN0ZXBwZXItY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG5cbiAgLm1hdC1zdGVwLWhlYWRlciB7XG4gICAgJi5jZGsta2V5Ym9hcmQtZm9jdXNlZCxcbiAgICAmLmNkay1wcm9ncmFtLWZvY3VzZWQsXG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQsIGhvdmVyKTtcbiAgICB9XG5cbiAgICAvLyBPbiB0b3VjaCBkZXZpY2VzIHRoZSA6aG92ZXIgc3RhdGUgd2lsbCBsaW5nZXIgb24gdGhlIGVsZW1lbnQgYWZ0ZXIgYSB0YXAuXG4gICAgLy8gUmVzZXQgaXQgdmlhIGBAbWVkaWFgIGFmdGVyIHRoZSBkZWNsYXJhdGlvbiwgYmVjYXVzZSB0aGUgbWVkaWEgcXVlcnkgaXNuJ3RcbiAgICAvLyBzdXBwb3J0ZWQgYnkgYWxsIGJyb3dzZXJzIHlldC5cbiAgICBAbWVkaWEgKGhvdmVyOiBub25lKSB7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubWF0LXN0ZXAtbGFiZWwsXG4gICAgLm1hdC1zdGVwLW9wdGlvbmFsIHtcbiAgICAgIC8vIFRPRE8oam9zZXBocGVycm90dCk6IFVwZGF0ZSB0byB1c2luZyBhIGNvcnJlY3RlZCBkaXNhYmxlZC10ZXh0IGNvbnRyYXN0XG4gICAgICAvLyBpbnN0ZWFkIG9mIHNlY29uZGFyeS10ZXh0LlxuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICAgIH1cblxuICAgIC5tYXQtc3RlcC1pY29uIHtcbiAgICAgIC8vIFRPRE8oam9zZXBocGVycm90dCk6IFVwZGF0ZSB0byB1c2luZyBhIGNvcnJlY3RlZCBkaXNhYmxlZC10ZXh0IGNvbnRyYXN0XG4gICAgICAvLyBpbnN0ZWFkIG9mIHNlY29uZGFyeS10ZXh0LlxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBzZWNvbmRhcnktdGV4dCk7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgICB9XG5cbiAgICAubWF0LXN0ZXAtaWNvbi1zZWxlY3RlZCxcbiAgICAubWF0LXN0ZXAtaWNvbi1zdGF0ZS1kb25lLFxuICAgIC5tYXQtc3RlcC1pY29uLXN0YXRlLWVkaXQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5KTtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnksIGRlZmF1bHQtY29udHJhc3QpO1xuICAgIH1cblxuICAgIC5tYXQtc3RlcC1pY29uLXN0YXRlLWVycm9yIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkd2FybiwgdGV4dCk7XG4gICAgfVxuXG4gICAgLm1hdC1zdGVwLWxhYmVsLm1hdC1zdGVwLWxhYmVsLWFjdGl2ZSB7XG4gICAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgICB9XG5cbiAgICAubWF0LXN0ZXAtbGFiZWwubWF0LXN0ZXAtbGFiZWwtZXJyb3Ige1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkd2FybiwgdGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC1zdGVwcGVyLWhvcml6b250YWwsIC5tYXQtc3RlcHBlci12ZXJ0aWNhbCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBjYXJkKTtcbiAgfVxuXG4gIC5tYXQtc3RlcHBlci12ZXJ0aWNhbC1saW5lOjpiZWZvcmUge1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuICB9XG5cbiAgLm1hdC1ob3Jpem9udGFsLXN0ZXBwZXItaGVhZGVyOjpiZWZvcmUsXG4gIC5tYXQtaG9yaXpvbnRhbC1zdGVwcGVyLWhlYWRlcjo6YWZ0ZXIsXG4gIC5tYXQtc3RlcHBlci1ob3Jpem9udGFsLWxpbmUge1xuICAgIGJvcmRlci10b3AtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlcik7XG4gIH1cbn1cblxuQG1peGluIG1hdC1zdGVwcGVyLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LXN0ZXBwZXItdmVydGljYWwsIC5tYXQtc3RlcHBlci1ob3Jpem9udGFsIHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICB9XG5cbiAgLm1hdC1zdGVwLWxhYmVsIHtcbiAgICBmb250OiB7XG4gICAgICBzaXplOiBtYXQtZm9udC1zaXplKCRjb25maWcsIGJvZHktMSk7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBib2R5LTEpO1xuICAgIH07XG4gIH1cblxuICAubWF0LXN0ZXAtc3ViLWxhYmVsLWVycm9yIHtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICB9XG5cbiAgLm1hdC1zdGVwLWxhYmVsLWVycm9yIHtcbiAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0yKTtcbiAgfVxuXG4gIC5tYXQtc3RlcC1sYWJlbC1zZWxlY3RlZCB7XG4gICAgZm9udDoge1xuICAgICAgc2l6ZTogbWF0LWZvbnQtc2l6ZSgkY29uZmlnLCBib2R5LTIpO1xuICAgICAgd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0yKTtcbiAgICB9O1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXN0ZXBwZXItZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRkZW5zaXR5LXNjYWxlOiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkaGVpZ2h0OiBfbWF0LWRlbnNpdHktcHJvcC12YWx1ZSgkbWF0LXN0ZXBwZXItZGVuc2l0eS1jb25maWcsICRkZW5zaXR5LXNjYWxlLCBoZWlnaHQpO1xuICAkdmVydGljYWwtcGFkZGluZzogKCRoZWlnaHQgLSAkbWF0LXN0ZXBwZXItbGFiZWwtaGVhZGVyLWhlaWdodCkgLyAyO1xuXG4gIEBpbmNsdWRlIF9tYXQtZGVuc2l0eS1sZWdhY3ktY29tcGF0aWJpbGl0eSgpIHtcbiAgICAubWF0LWhvcml6b250YWwtc3RlcHBlci1oZWFkZXIge1xuICAgICAgaGVpZ2h0OiAkaGVpZ2h0O1xuICAgIH1cblxuICAgIC5tYXQtc3RlcHBlci1sYWJlbC1wb3NpdGlvbi1ib3R0b20gLm1hdC1ob3Jpem9udGFsLXN0ZXBwZXItaGVhZGVyLFxuICAgIC5tYXQtdmVydGljYWwtc3RlcHBlci1oZWFkZXIsIHtcbiAgICAgIHBhZGRpbmc6ICR2ZXJ0aWNhbC1wYWRkaW5nICRtYXQtc3RlcHBlci1zaWRlLWdhcDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmVzIHRoYXQgdGhlIHZlcnRpY2FsIGxpbmVzIGZvciB0aGUgc3RlcCBjb250ZW50IGV4Y2VlZCBpbnRvIHRoZSBzdGVwXG4gICAgLy8gaGVhZGVycyB3aXRoIGEgZ2l2ZW4gZGlzdGFuY2UgKGAkbWF0LXN0ZXBwZXItbGluZS1nYXBgKSB0byB0aGUgc3RlcCBpY29uLlxuICAgIC5tYXQtc3RlcHBlci12ZXJ0aWNhbC1saW5lOjpiZWZvcmUge1xuICAgICAgdG9wOiAkbWF0LXN0ZXBwZXItbGluZS1nYXAgLSAkdmVydGljYWwtcGFkZGluZztcbiAgICAgIGJvdHRvbTogJG1hdC1zdGVwcGVyLWxpbmUtZ2FwIC0gJHZlcnRpY2FsLXBhZGRpbmc7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlcyB0aGF0IHRoZSBob3Jpem9udGFsIGxpbmVzIGZvciB0aGUgc3RlcCBoZWFkZXIgYXJlIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG4gICAgLm1hdC1zdGVwcGVyLWxhYmVsLXBvc2l0aW9uLWJvdHRvbSAubWF0LWhvcml6b250YWwtc3RlcHBlci1oZWFkZXIge1xuICAgICAgJjo6YWZ0ZXIsICY6OmJlZm9yZSB7XG4gICAgICAgIHRvcDogJHZlcnRpY2FsLXBhZGRpbmcgKyAkbWF0LXN0ZXBwZXItbGFiZWwtaGVhZGVyLWhlaWdodCAvIDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlcyB0aGF0IHRoZSBob3Jpem9udGFsIGxpbmUgZm9yIHRoZSBzdGVwIGNvbnRlbnQgaXMgYWxpZ25lZCBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxuICAgIC5tYXQtc3RlcHBlci1sYWJlbC1wb3NpdGlvbi1ib3R0b20gLm1hdC1zdGVwcGVyLWhvcml6b250YWwtbGluZSB7XG4gICAgICB0b3A6ICR2ZXJ0aWNhbC1wYWRkaW5nICsgJG1hdC1zdGVwcGVyLWxhYmVsLWhlYWRlci1oZWlnaHQgLyAyO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXN0ZXBwZXItdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1zdGVwcGVyJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXN0ZXBwZXItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1zdGVwcGVyLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtc3RlcHBlci10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuQG1peGluIG1hdC1zb3J0LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LXNvcnQtaGVhZGVyLWFycm93IHtcbiAgICAkdGFibGUtYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCAnY2FyZCcpO1xuICAgICR0ZXh0LWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHNlY29uZGFyeS10ZXh0KTtcblxuICAgIC8vIEJlY2F1c2UgdGhlIGFycm93IGlzIG1hZGUgdXAgb2YgbXVsdGlwbGUgZWxlbWVudHMgdGhhdCBhcmUgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlcixcbiAgICAvLyB3ZSBjYW4ndCB1c2UgdGhlIHNlbWktdHJhbnNwYXJlbnQgY29sb3IgZnJvbSB0aGUgdGhlbWUgZGlyZWN0bHkuIElmIHRoZSB2YWx1ZSBpcyBhIGNvbG9yXG4gICAgLy8gKnR5cGUqLCB3ZSBjb252ZXJ0IGl0IGludG8gYSBzb2xpZCBjb2xvciBieSB0YWtpbmcgdGhlIG9wYWNpdHkgZnJvbSB0aGUgcmdiYSB2YWx1ZSBhbmRcbiAgICAvLyB1c2luZyB0aGUgdmFsdWUgdG8gZGV0ZXJtaW5lIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBiYWNrZ3JvdW5kIHRvIHB1dCBpbnRvIGZvcmVncm91bmRcbiAgICAvLyB3aGVuIG1peGluZyB0aGUgY29sb3JzIHRvZ2V0aGVyLiBPdGhlcndpc2UsIGlmIGl0IHJlc29sdmVzIHRvIHNvbWV0aGluZyBkaWZmZXJlbnRcbiAgICAvLyAoZS5nLiBpdCByZXNvbHZlcyB0byBhIENTUyB2YXJpYWJsZSksIHdlIHVzZSB0aGUgY29sb3IgZGlyZWN0bHkuXG4gICAgQGlmICh0eXBlLW9mKCR0YWJsZS1iYWNrZ3JvdW5kKSA9PSBjb2xvciBhbmQgdHlwZS1vZigkdGV4dC1jb2xvcikgPT0gY29sb3IpIHtcbiAgICAgICR0ZXh0LW9wYWNpdHk6IG9wYWNpdHkoJHRleHQtY29sb3IpO1xuICAgICAgY29sb3I6IG1peCgkdGFibGUtYmFja2dyb3VuZCwgcmdiYSgkdGV4dC1jb2xvciwgMSksICgxIC0gJHRleHQtb3BhY2l0eSkgKiAxMDAlKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgY29sb3I6ICR0ZXh0LWNvbG9yO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF0LXNvcnQtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gX21hdC1zb3J0LWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1zb3J0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtc29ydCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zb3J0LWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtc29ydC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXNvcnQtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LXRhYnMtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGhlYWRlci1ib3JkZXI6IDFweCBzb2xpZCBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIpO1xuXG4gIC5tYXQtdGFiLW5hdi1iYXIsXG4gIC5tYXQtdGFiLWhlYWRlciB7XG4gICAgYm9yZGVyLWJvdHRvbTogJGhlYWRlci1ib3JkZXI7XG4gIH1cblxuICAubWF0LXRhYi1ncm91cC1pbnZlcnRlZC1oZWFkZXIge1xuICAgIC5tYXQtdGFiLW5hdi1iYXIsXG4gICAgLm1hdC10YWItaGVhZGVyIHtcbiAgICAgIGJvcmRlci10b3A6ICRoZWFkZXItYm9yZGVyO1xuICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICB9XG4gIH1cblxuICAubWF0LXRhYi1sYWJlbCwgLm1hdC10YWItbGluayB7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG5cbiAgICAmLm1hdC10YWItZGlzYWJsZWQge1xuICAgICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLm1hdC10YWItaGVhZGVyLXBhZ2luYXRpb24tY2hldnJvbiB7XG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIHRleHQpO1xuICB9XG5cbiAgLm1hdC10YWItaGVhZGVyLXBhZ2luYXRpb24tZGlzYWJsZWQgLm1hdC10YWItaGVhZGVyLXBhZ2luYXRpb24tY2hldnJvbiB7XG4gICAgYm9yZGVyLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpc2FibGVkLXRleHQpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGhlYWRlciBib3JkZXIgd2hlbiB0aGVyZSBpcyBhIGJhY2tncm91bmQgY29sb3JcbiAgLm1hdC10YWItZ3JvdXBbY2xhc3MqPSdtYXQtYmFja2dyb3VuZC0nXSAubWF0LXRhYi1oZWFkZXIsXG4gIC5tYXQtdGFiLW5hdi1iYXJbY2xhc3MqPSdtYXQtYmFja2dyb3VuZC0nXSB7XG4gICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICBib3JkZXItdG9wOiBub25lO1xuICB9XG5cbiAgLm1hdC10YWItZ3JvdXAsIC5tYXQtdGFiLW5hdi1iYXIge1xuICAgICR0aGVtZS1jb2xvcnM6IChcbiAgICAgIHByaW1hcnk6ICRwcmltYXJ5LFxuICAgICAgYWNjZW50OiAkYWNjZW50LFxuICAgICAgd2FybjogJHdhcm5cbiAgICApO1xuXG4gICAgQGVhY2ggJG5hbWUsICRjb2xvciBpbiAkdGhlbWUtY29sb3JzIHtcbiAgICAgIC8vIFNldCB0aGUgZm9yZWdyb3VuZCBjb2xvciBvZiB0aGUgdGFic1xuICAgICAgJi5tYXQtI3skbmFtZX0ge1xuICAgICAgICBAaW5jbHVkZSBfbWF0LXRhYi1sYWJlbC1mb2N1cygkY29sb3IpO1xuICAgICAgICBAaW5jbHVkZSBfbWF0LWluay1iYXIoJGNvbG9yKTtcblxuICAgICAgICAvLyBPdmVycmlkZSBpbmsgYmFyIHdoZW4gYmFja2dyb3VuZCBjb2xvciBpcyB0aGUgc2FtZVxuICAgICAgICAmLm1hdC1iYWNrZ3JvdW5kLSN7JG5hbWV9IHtcbiAgICAgICAgICBAaW5jbHVkZSBfbWF0LWluay1iYXIoJGNvbG9yLCBkZWZhdWx0LWNvbnRyYXN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIEBlYWNoICRuYW1lLCAkY29sb3IgaW4gJHRoZW1lLWNvbG9ycyB7XG4gICAgICAvLyBTZXQgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgdGFicyBhbmQgb3ZlcnJpZGUgZm9jdXMgY29sb3JcbiAgICAgICYubWF0LWJhY2tncm91bmQtI3skbmFtZX0ge1xuICAgICAgICBAaW5jbHVkZSBfbWF0LXRhYi1sYWJlbC1mb2N1cygkY29sb3IpO1xuICAgICAgICBAaW5jbHVkZSBfbWF0LXRhYnMtYmFja2dyb3VuZCgkY29sb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1pbmstYmFyKCRjb2xvciwgJGh1ZTogZGVmYXVsdCkge1xuICAubWF0LWluay1iYXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IG1hdC1jb2xvcigkY29sb3IsICRodWUpO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXRhYi1sYWJlbC1mb2N1cygkdGFiLWZvY3VzLWNvbG9yKSB7XG4gIC5tYXQtdGFiLWxhYmVsLFxuICAubWF0LXRhYi1saW5rIHtcbiAgICAmLmNkay1rZXlib2FyZC1mb2N1c2VkLFxuICAgICYuY2RrLXByb2dyYW0tZm9jdXNlZCB7XG4gICAgICAmOm5vdCgubWF0LXRhYi1kaXNhYmxlZCkge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJHRhYi1mb2N1cy1jb2xvciwgbGlnaHRlciwgMC4zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtdGFicy1iYWNrZ3JvdW5kKCRiYWNrZ3JvdW5kLWNvbG9yKSB7XG4gIC8vIFNldCBiYWNrZ3JvdW5kIGNvbG9yIGZvciB0aGUgdGFiIGdyb3VwXG4gIC5tYXQtdGFiLWhlYWRlciwgLm1hdC10YWItbGlua3MsIC5tYXQtdGFiLWhlYWRlci1wYWdpbmF0aW9uIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQtY29sb3IpO1xuICB9XG5cbiAgLy8gU2V0IGxhYmVscyB0byBjb250cmFzdCBhZ2FpbnN0IGJhY2tncm91bmRcbiAgLm1hdC10YWItbGFiZWwsIC5tYXQtdGFiLWxpbmsge1xuICAgIGNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQtY29sb3IsIGRlZmF1bHQtY29udHJhc3QpO1xuXG4gICAgJi5tYXQtdGFiLWRpc2FibGVkIHtcbiAgICAgIGNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQtY29sb3IsIGRlZmF1bHQtY29udHJhc3QsIDAuNCk7XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IHBhZ2luYXRpb24gY2hldnJvbnMgdG8gY29udHJhc3QgYmFja2dyb3VuZFxuICAubWF0LXRhYi1oZWFkZXItcGFnaW5hdGlvbi1jaGV2cm9uIHtcbiAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZC1jb2xvciwgZGVmYXVsdC1jb250cmFzdCk7XG4gIH1cblxuICAubWF0LXRhYi1oZWFkZXItcGFnaW5hdGlvbi1kaXNhYmxlZCAubWF0LXRhYi1oZWFkZXItcGFnaW5hdGlvbi1jaGV2cm9uIHtcbiAgICBib3JkZXItY29sb3I6IG1hdC1jb2xvcigkYmFja2dyb3VuZC1jb2xvciwgZGVmYXVsdC1jb250cmFzdCwgMC40KTtcbiAgfVxuXG4gIC8vIFNldCByaXBwbGVzIGNvbG9yIHRvIGJlIHRoZSBjb250cmFzdCBjb2xvciBvZiB0aGUgbmV3IGJhY2tncm91bmQuIE90aGVyd2lzZSB0aGUgcmlwcGxlXG4gIC8vIGNvbG9yIHdpbGwgYmUgYmFzZWQgb24gdGhlIGFwcCBiYWNrZ3JvdW5kIGNvbG9yLlxuICAubWF0LXJpcHBsZS1lbGVtZW50IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtYXQtY29sb3IoJGJhY2tncm91bmQtY29sb3IsIGRlZmF1bHQtY29udHJhc3QsIDAuMTIpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtdGFicy10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC10YWItZ3JvdXAge1xuICAgIGZvbnQtZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZyk7XG4gIH1cblxuICAubWF0LXRhYi1sYWJlbCwgLm1hdC10YWItbGluayB7XG4gICAgZm9udDoge1xuICAgICAgZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZywgYnV0dG9uKTtcbiAgICAgIHNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYnV0dG9uKTtcbiAgICAgIHdlaWdodDogbWF0LWZvbnQtd2VpZ2h0KCRjb25maWcsIGJ1dHRvbik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfbWF0LXRhYnMtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXRhYnMtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC10YWJzJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRhYnMtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC10YWJzLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtdGFicy10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuLy8gTWluaW11bSBoZWlnaHQgZm9yIHRvb2xiYXIncyBpbiB0aGUgaGlnaGVzdCBkZW5zaXR5IGlzIGRpZmZpY3VsdCB0byBkZXRlcm1pbmUgYmVjYXVzZVxuLy8gZGV2ZWxvcGVycyBjYW4gcHJvamVjdCBhcmJpdHJhcnkgY29udGVudC4gV2UgdXNlIGEgbWluaW11bSB2YWx1ZSB0aGF0IGVuc3VyZXMgdGhhdCBtb3N0XG4vLyBjb21tb24gY29udGVudCAoZS5nLiBpY29uIGJ1dHRvbnMpIGRvZXMgbm90IGV4Y2VlZCB0aGUgcm93IGJvdW5kYXJpZXMgaW4gaGlnaGVzdCBkZW5zaXR5LlxuJG1hdC10b29sYmFyLW1pbmltdW0taGVpZ2h0OiA0NHB4ICFkZWZhdWx0O1xuXG4kbWF0LXRvb2xiYXItaGVpZ2h0LWRlc2t0b3A6IDY0cHggIWRlZmF1bHQ7XG4kbWF0LXRvb2xiYXItbWF4aW11bS1oZWlnaHQtZGVza3RvcDogJG1hdC10b29sYmFyLWhlaWdodC1kZXNrdG9wICFkZWZhdWx0O1xuJG1hdC10b29sYmFyLW1pbmltdW0taGVpZ2h0LWRlc2t0b3A6ICRtYXQtdG9vbGJhci1taW5pbXVtLWhlaWdodCAhZGVmYXVsdDtcblxuJG1hdC10b29sYmFyLWhlaWdodC1tb2JpbGU6IDU2cHggIWRlZmF1bHQ7XG4kbWF0LXRvb2xiYXItbWF4aW11bS1oZWlnaHQtbW9iaWxlOiAkbWF0LXRvb2xiYXItaGVpZ2h0LW1vYmlsZSAhZGVmYXVsdDtcbiRtYXQtdG9vbGJhci1taW5pbXVtLWhlaWdodC1tb2JpbGU6ICRtYXQtdG9vbGJhci1taW5pbXVtLWhlaWdodCAhZGVmYXVsdDtcblxuJG1hdC10b29sYmFyLWRlc2t0b3AtZGVuc2l0eS1jb25maWc6IChcbiAgaGVpZ2h0OiAoXG4gICAgZGVmYXVsdDogJG1hdC10b29sYmFyLWhlaWdodC1kZXNrdG9wLFxuICAgIG1heGltdW06ICRtYXQtdG9vbGJhci1tYXhpbXVtLWhlaWdodC1kZXNrdG9wLFxuICAgIG1pbmltdW06ICRtYXQtdG9vbGJhci1taW5pbXVtLWhlaWdodC1kZXNrdG9wLFxuICApXG4pICFkZWZhdWx0O1xuXG4kbWF0LXRvb2xiYXItbW9iaWxlLWRlbnNpdHktY29uZmlnOiAoXG4gIGhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRtYXQtdG9vbGJhci1oZWlnaHQtbW9iaWxlLFxuICAgIG1heGltdW06ICRtYXQtdG9vbGJhci1tYXhpbXVtLWhlaWdodC1tb2JpbGUsXG4gICAgbWluaW11bTogJG1hdC10b29sYmFyLW1pbmltdW0taGVpZ2h0LW1vYmlsZSxcbiAgKVxuKSAhZGVmYXVsdDtcblxuXG5AbWl4aW4gX21hdC10b29sYmFyLWhlaWdodCgkaGVpZ2h0KSB7XG4gIC5tYXQtdG9vbGJhci1tdWx0aXBsZS1yb3dzIHtcbiAgICBtaW4taGVpZ2h0OiAkaGVpZ2h0O1xuICB9XG4gIC5tYXQtdG9vbGJhci1yb3csIC5tYXQtdG9vbGJhci1zaW5nbGUtcm93IHtcbiAgICBoZWlnaHQ6ICRoZWlnaHQ7XG4gIH1cbn1cblxuQG1peGluIF9tYXQtdG9vbGJhci1jb2xvcigkcGFsZXR0ZSkge1xuICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJHBhbGV0dGUpO1xuICBjb2xvcjogbWF0LWNvbG9yKCRwYWxldHRlLCBkZWZhdWx0LWNvbnRyYXN0KTtcbn1cblxuQG1peGluIF9tYXQtdG9vbGJhci1mb3JtLWZpZWxkLW92ZXJyaWRlcyB7XG4gIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmUsXG4gIC5tYXQtZm9ybS1maWVsZC1yaXBwbGUsXG4gIC5tYXQtZm9jdXNlZCAubWF0LWZvcm0tZmllbGQtcmlwcGxlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQtbGFiZWwsXG4gIC5tYXQtZm9jdXNlZCAubWF0LWZvcm0tZmllbGQtbGFiZWwsXG4gIC5tYXQtc2VsZWN0LXZhbHVlLFxuICAubWF0LXNlbGVjdC1hcnJvdyxcbiAgLm1hdC1mb3JtLWZpZWxkLm1hdC1mb2N1c2VkIC5tYXQtc2VsZWN0LWFycm93IHtcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgfVxuXG4gIC5tYXQtaW5wdXQtZWxlbWVudCB7XG4gICAgY2FyZXQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LXRvb2xiYXItY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcblxuICAubWF0LXRvb2xiYXIge1xuICAgIGJhY2tncm91bmQ6IG1hdC1jb2xvcigkYmFja2dyb3VuZCwgYXBwLWJhcik7XG4gICAgY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgdGV4dCk7XG5cbiAgICAmLm1hdC1wcmltYXJ5IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdG9vbGJhci1jb2xvcigkcHJpbWFyeSk7XG4gICAgfVxuXG4gICAgJi5tYXQtYWNjZW50IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdG9vbGJhci1jb2xvcigkYWNjZW50KTtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdG9vbGJhci1jb2xvcigkd2Fybik7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgX21hdC10b29sYmFyLWZvcm0tZmllbGQtb3ZlcnJpZGVzO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtdG9vbGJhci10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC10b29sYmFyLFxuICAubWF0LXRvb2xiYXIgaDEsXG4gIC5tYXQtdG9vbGJhciBoMixcbiAgLm1hdC10b29sYmFyIGgzLFxuICAubWF0LXRvb2xiYXIgaDQsXG4gIC5tYXQtdG9vbGJhciBoNSxcbiAgLm1hdC10b29sYmFyIGg2IHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgdGl0bGUpO1xuICAgIG1hcmdpbjogMDtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC10b29sYmFyLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkZGVuc2l0eS1zY2FsZTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGhlaWdodC1kZXNrdG9wOiBfbWF0LWRlbnNpdHktcHJvcC12YWx1ZShcbiAgICAgICRtYXQtdG9vbGJhci1kZXNrdG9wLWRlbnNpdHktY29uZmlnLCAkZGVuc2l0eS1zY2FsZSwgaGVpZ2h0KTtcbiAgJGhlaWdodC1tb2JpbGU6IF9tYXQtZGVuc2l0eS1wcm9wLXZhbHVlKFxuICAgICAgJG1hdC10b29sYmFyLW1vYmlsZS1kZW5zaXR5LWNvbmZpZywgJGRlbnNpdHktc2NhbGUsIGhlaWdodCk7XG5cbiAgQGluY2x1ZGUgX21hdC1kZW5zaXR5LWxlZ2FjeS1jb21wYXRpYmlsaXR5KCkge1xuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBoZWlnaHQgZm9yIHRoZSB0b29sYmFyLlxuICAgIEBpbmNsdWRlIF9tYXQtdG9vbGJhci1oZWlnaHQoJGhlaWdodC1kZXNrdG9wKTtcblxuICAgIC8vIEFzIHBlciBzcGVjcywgdG9vbGJhcnMgc2hvdWxkIGhhdmUgYSBkaWZmZXJlbnQgaGVpZ2h0IGluIG1vYmlsZSBkZXZpY2VzLiBUaGlzIGhhcyBiZWVuXG4gICAgLy8gc3BlY2lmaWVkIGluIHRoZSBvbGQgZ3VpZGVsaW5lcyBhbmQgaXMgc3RpbGwgb2JzZXJ2YWJsZSBpbiB0aGUgbmV3IHNwZWNpZmljYXRpb25zIGJ5XG4gICAgLy8gbG9va2luZyBhdCB0aGUgc3BlYyBpbWFnZXMuIFNlZTogaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vY29tcG9uZW50cy9hcHAtYmFycy10b3AuaHRtbCNhbmF0b215XG4gICAgQG1lZGlhICgkbWF0LXhzbWFsbCkge1xuICAgICAgQGluY2x1ZGUgX21hdC10b29sYmFyLWhlaWdodCgkaGVpZ2h0LW1vYmlsZSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtdG9vbGJhci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXRvb2xiYXInKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtdG9vbGJhci1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LXRvb2xiYXItZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC10b29sYmFyLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuJG1hdC10b29sdGlwLXRhcmdldC1oZWlnaHQ6IDIycHg7XG4kbWF0LXRvb2x0aXAtZm9udC1zaXplOiAxMHB4O1xuJG1hdC10b29sdGlwLXZlcnRpY2FsLXBhZGRpbmc6ICgkbWF0LXRvb2x0aXAtdGFyZ2V0LWhlaWdodCAtICRtYXQtdG9vbHRpcC1mb250LXNpemUpIC8gMjtcblxuJG1hdC10b29sdGlwLWhhbmRzZXQtdGFyZ2V0LWhlaWdodDogMzBweDtcbiRtYXQtdG9vbHRpcC1oYW5kc2V0LWZvbnQtc2l6ZTogMTRweDtcbiRtYXQtdG9vbHRpcC1oYW5kc2V0LXZlcnRpY2FsLXBhZGRpbmc6XG4gICAgKCRtYXQtdG9vbHRpcC1oYW5kc2V0LXRhcmdldC1oZWlnaHQgLSAkbWF0LXRvb2x0aXAtaGFuZHNldC1mb250LXNpemUpIC8gMjtcblxuQG1peGluIG1hdC10b29sdGlwLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuXG4gIC5tYXQtdG9vbHRpcCB7XG4gICAgYmFja2dyb3VuZDogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCB0b29sdGlwLCAwLjkpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtdG9vbHRpcC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLm1hdC10b29sdGlwIHtcbiAgICBmb250LWZhbWlseTogbWF0LWZvbnQtZmFtaWx5KCRjb25maWcpO1xuICAgIGZvbnQtc2l6ZTogJG1hdC10b29sdGlwLWZvbnQtc2l6ZTtcbiAgICBwYWRkaW5nLXRvcDogJG1hdC10b29sdGlwLXZlcnRpY2FsLXBhZGRpbmc7XG4gICAgcGFkZGluZy1ib3R0b206ICRtYXQtdG9vbHRpcC12ZXJ0aWNhbC1wYWRkaW5nO1xuICB9XG5cbiAgLm1hdC10b29sdGlwLWhhbmRzZXQge1xuICAgIGZvbnQtc2l6ZTogJG1hdC10b29sdGlwLWhhbmRzZXQtZm9udC1zaXplO1xuICAgIHBhZGRpbmctdG9wOiAkbWF0LXRvb2x0aXAtaGFuZHNldC12ZXJ0aWNhbC1wYWRkaW5nO1xuICAgIHBhZGRpbmctYm90dG9tOiAkbWF0LXRvb2x0aXAtaGFuZHNldC12ZXJ0aWNhbC1wYWRkaW5nO1xuICB9XG59XG5cbkBtaXhpbiBfbWF0LXRvb2x0aXAtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXRvb2x0aXAtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC10b29sdGlwJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRvb2x0aXAtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC10b29sdGlwLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtdG9vbHRpcC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG5cblxuXG5AbWl4aW4gbWF0LXNuYWNrLWJhci1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuXG4gIC5tYXQtc25hY2stYmFyLWNvbnRhaW5lciB7XG4gICAgLy8gVXNlIHRoZSBwcmltYXJ5IHRleHQgb24gdGhlIGRhcmsgdGhlbWUsIGV2ZW4gdGhvdWdoIHRoZSBsaWdodGVyIG9uZSB1c2VzXG4gICAgLy8gYSBzZWNvbmRhcnksIGJlY2F1c2UgdGhlIGNvbnRyYXN0IG9uIHRoZSBsaWdodCBwcmltYXJ5IHRleHQgaXMgcG9vci5cbiAgICBjb2xvcjogaWYoJGlzLWRhcmstdGhlbWUsICRkYXJrLXByaW1hcnktdGV4dCwgJGxpZ2h0LXNlY29uZGFyeS10ZXh0KTtcbiAgICBiYWNrZ3JvdW5kOiBpZigkaXMtZGFyay10aGVtZSwgbWFwLWdldCgkbWF0LWdyZXksIDUwKSwgIzMyMzIzMik7XG5cbiAgICBAaW5jbHVkZSBfbWF0LXRoZW1lLWVsZXZhdGlvbig2LCAkY29uZmlnKTtcbiAgfVxuXG4gIC5tYXQtc2ltcGxlLXNuYWNrYmFyLWFjdGlvbiB7XG4gICAgY29sb3I6IGlmKCRpcy1kYXJrLXRoZW1lLCBpbmhlcml0LCBtYXQtY29sb3IoJGFjY2VudCwgdGV4dCkpO1xuICB9XG59XG5cbkBtaXhpbiBtYXQtc25hY2stYmFyLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAubWF0LXNpbXBsZS1zbmFja2JhciB7XG4gICAgZm9udDoge1xuICAgICAgZmFtaWx5OiBtYXQtZm9udC1mYW1pbHkoJGNvbmZpZywgYm9keS0xKTtcbiAgICAgIHNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0xKTtcbiAgICB9XG4gIH1cblxuICAubWF0LXNpbXBsZS1zbmFja2Jhci1hY3Rpb24ge1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogaW5oZXJpdDtcbiAgICAgIHNpemU6IGluaGVyaXQ7XG4gICAgICB3ZWlnaHQ6IG1hdC1mb250LXdlaWdodCgkY29uZmlnLCBidXR0b24pO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1zbmFjay1iYXItZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LXNuYWNrLWJhci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKSB7XG4gICR0aGVtZTogX21hdC1sZWdhY3ktZ2V0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICBAaW5jbHVkZSBfbWF0LWNoZWNrLWR1cGxpY2F0ZS10aGVtZS1zdHlsZXMoJHRoZW1lLCAnbWF0LXNuYWNrLWJhcicpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zbmFjay1iYXItY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1zbmFjay1iYXItZGVuc2l0eSgkZGVuc2l0eSk7XG4gICAgfVxuICAgIEBpZiAkdHlwb2dyYXBoeSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1zbmFjay1iYXItdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8vIFRoZW1lIHN0eWxlcyB0aGF0IG9ubHkgYXBwbHkgdG8gdGhlIGZpbGwgYXBwZWFyYW5jZSBvZiB0aGUgZm9ybS1maWVsZC5cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLWZpbGwtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRpcy1kYXJrLXRoZW1lOiBtYXAtZ2V0KCRjb25maWcsIGlzLWRhcmspO1xuXG4gICRmaWxsLWJhY2tncm91bmQ6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgYmFzZSwgaWYoJGlzLWRhcmstdGhlbWUsIDAuMSwgMC4wNCkpO1xuICAkZmlsbC1kaXNhYmxlZC1iYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGJhc2UsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjA1LCAwLjAyKSk7XG4gICR1bmRlcmxpbmUtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlciwgaWYoJGlzLWRhcmstdGhlbWUsIDAuNSwgMC40MikpO1xuICAkbGFiZWwtZGlzYWJsZWQtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGlzYWJsZWQtdGV4dCk7XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2UtZmlsbCB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLWZsZXgge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGZpbGwtYmFja2dyb3VuZDtcbiAgICB9XG5cbiAgICAmLm1hdC1mb3JtLWZpZWxkLWRpc2FibGVkIC5tYXQtZm9ybS1maWVsZC1mbGV4IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRmaWxsLWRpc2FibGVkLWJhY2tncm91bmQ7XG4gICAgfVxuXG4gICAgLm1hdC1mb3JtLWZpZWxkLXVuZGVybGluZTo6YmVmb3JlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR1bmRlcmxpbmUtY29sb3I7XG4gICAgfVxuXG4gICAgJi5tYXQtZm9ybS1maWVsZC1kaXNhYmxlZCB7XG4gICAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgICBjb2xvcjogJGxhYmVsLWRpc2FibGVkLWNvbG9yO1xuICAgICAgfVxuXG4gICAgICAubWF0LWZvcm0tZmllbGQtdW5kZXJsaW5lOjpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gVXNlZCB0byBtYWtlIGluc3RhbmNlcyBvZiB0aGUgX21hdC1mb3JtLWZpZWxkLWxhYmVsLWZsb2F0aW5nIG1peGluIG5lZ2xpZ2libHkgZGlmZmVyZW50LFxuLy8gYW5kIHByZXZlbnQgR29vZ2xlJ3MgQ1NTIE9wdGltaXplciBmcm9tIGNvbGxhcHNpbmcgdGhlIGRlY2xhcmF0aW9ucy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBzb21lXG4vLyBvZiB0aGUgc2VsZWN0b3JzIGNvbnRhaW4gcHNldWRvLWNsYXNzZXMgbm90IHJlY29nbml6ZWQgaW4gYWxsIGJyb3dzZXJzLiBJZiBhIGJyb3dzZXIgZW5jb3VudGVyc1xuLy8gYW4gdW5rbm93biBwc2V1ZG8tY2xhc3MgaXQgd2lsbCBkaXNjYXJkIHRoZSBlbnRpcmUgcnVsZSBzZXQuXG4kbWF0LWZvcm0tZmllbGQtZmlsbC1kZWR1cGU6IDA7XG5cbi8vIEFwcGxpZXMgYSBmbG9hdGluZyBsYWJlbCBhYm92ZSB0aGUgZm9ybSBmaWVsZCBjb250cm9sIGl0c2VsZi5cbkBtaXhpbiBfbWF0LWZvcm0tZmllbGQtZmlsbC1sYWJlbC1mbG9hdGluZygkZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKSB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtJGluZml4LW1hcmdpbi10b3AgLSAkaW5maXgtcGFkZGluZyArICRtYXQtZm9ybS1maWVsZC1maWxsLWRlZHVwZSlcbiAgICAgICAgICAgICBzY2FsZSgkZm9udC1zY2FsZSk7XG4gIHdpZHRoOiAxMDAlIC8gJGZvbnQtc2NhbGUgKyAkbWF0LWZvcm0tZmllbGQtZmlsbC1kZWR1cGU7XG5cbiAgJG1hdC1mb3JtLWZpZWxkLWZpbGwtZGVkdXBlOiAkbWF0LWZvcm0tZmllbGQtZmlsbC1kZWR1cGUgKyAwLjAwMDAxICFnbG9iYWw7XG59XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1maWxsLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAvLyBUaGUgdW5pdC1sZXNzIGxpbmUtaGVpZ2h0IGZyb20gdGhlIGZvbnQgY29uZmlnLlxuICAkbGluZS1oZWlnaHQ6IG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBpbnB1dCk7XG4gIC8vIFRoZSBhbW91bnQgdG8gc2NhbGUgdGhlIGZvbnQgZm9yIHRoZSBmbG9hdGluZyBsYWJlbCBhbmQgc3Vic2NyaXB0LlxuICAkc3Vic2NyaXB0LWZvbnQtc2NhbGU6IDAuNzU7XG4gIC8vIFRoZSBwYWRkaW5nIG9uIHRvcCBvZiB0aGUgaW5maXguXG4gICRpbmZpeC1wYWRkaW5nLXRvcDogMC4yNWVtO1xuICAvLyBUaGUgcGFkZGluZyBiZWxvdyB0aGUgaW5maXguXG4gICRpbmZpeC1wYWRkaW5nLWJvdHRvbTogMC43NWVtO1xuICAvLyBUaGUgbWFyZ2luIGFwcGxpZWQgdG8gdGhlIGZvcm0tZmllbGQtaW5maXggdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgdGhlIGZsb2F0aW5nIGxhYmVsLlxuICAkaW5maXgtbWFyZ2luLXRvcDogMWVtICogJGxpbmUtaGVpZ2h0ICogJHN1YnNjcmlwdC1mb250LXNjYWxlO1xuICAvLyBUaGUgYW1vdW50IHdlIG9mZnNldCB0aGUgbGFiZWwgZnJvbSB0aGUgaW5wdXQgdGV4dCBpbiB0aGUgZmlsbCBhcHBlYXJhbmNlLlxuICAkZmlsbC1hcHBlYXJhbmNlLWxhYmVsLW9mZnNldDogLTAuNWVtO1xuXG4gIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLWZpbGwge1xuICAgIC5tYXQtZm9ybS1maWVsZC1pbmZpeCB7XG4gICAgICBwYWRkaW5nOiAkaW5maXgtcGFkZGluZy10b3AgMCAkaW5maXgtcGFkZGluZy1ib3R0b20gMDtcbiAgICB9XG5cbiAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgdG9wOiAkaW5maXgtbWFyZ2luLXRvcCArICRpbmZpeC1wYWRkaW5nLXRvcDtcbiAgICAgIG1hcmdpbi10b3A6ICRmaWxsLWFwcGVhcmFuY2UtbGFiZWwtb2Zmc2V0O1xuICAgIH1cblxuICAgICYubWF0LWZvcm0tZmllbGQtY2FuLWZsb2F0IHtcbiAgICAgICYubWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0IC5tYXQtZm9ybS1maWVsZC1sYWJlbCxcbiAgICAgIC5tYXQtaW5wdXQtc2VydmVyOmZvY3VzICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXIgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWZpbGwtbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZy10b3AgKyAkZmlsbC1hcHBlYXJhbmNlLWxhYmVsLW9mZnNldCxcbiAgICAgICAgICAgICAgICAkaW5maXgtbWFyZ2luLXRvcCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlcnZlci1zaWRlIHJlbmRlcmVkIG1hdElucHV0IHdpdGggYSBsYWJlbCBhdHRyaWJ1dGUgYnV0IGxhYmVsIG5vdCBzaG93blxuICAgICAgLy8gKHVzZWQgYXMgYSBwdXJlIENTUyBzdGFuZC1pbiBmb3IgbWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0KS5cbiAgICAgIC5tYXQtaW5wdXQtc2VydmVyW2xhYmVsXTpub3QoOmxhYmVsLXNob3duKSArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyXG4gICAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtZmlsbC1sYWJlbC1mbG9hdGluZyhcbiAgICAgICAgICAgICAgICAkc3Vic2NyaXB0LWZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLXRvcCArICRmaWxsLWFwcGVhcmFuY2UtbGFiZWwtb2Zmc2V0LFxuICAgICAgICAgICAgICAgICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtZm9ybS1maWVsZC1maWxsLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLWZpbGwtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1mb3JtLWZpZWxkLWZpbGwnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1maWxsLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1maWxsLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1maWxsLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5cbi8vIFRoZW1lIHN0eWxlcyB0aGF0IG9ubHkgYXBwbHkgdG8gdGhlIGxlZ2FjeSBhcHBlYXJhbmNlIG9mIHRoZSBmb3JtLWZpZWxkLlxuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtbGVnYWN5LWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcblxuICAkbGFiZWwtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQpO1xuICAkdW5kZXJsaW5lLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjcsIDAuNDIpKTtcblxuICAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1sZWdhY3kge1xuICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICBjb2xvcjogJGxhYmVsLWNvbG9yO1xuICAgIH1cblxuICAgIC5tYXQtaGludCB7XG4gICAgICBjb2xvcjogJGxhYmVsLWNvbG9yO1xuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHVuZGVybGluZS1jb2xvcjtcbiAgICB9XG5cbiAgICAmLm1hdC1mb3JtLWZpZWxkLWRpc2FibGVkIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmUge1xuICAgICAgQGluY2x1ZGUgbWF0LWNvbnRyb2wtZGlzYWJsZWQtdW5kZXJsaW5lKCR1bmRlcmxpbmUtY29sb3IpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBVc2VkIHRvIG1ha2UgaW5zdGFuY2VzIG9mIHRoZSBfbWF0LWZvcm0tZmllbGQtbGFiZWwtZmxvYXRpbmcgbWl4aW4gbmVnbGlnaWJseSBkaWZmZXJlbnQsXG4vLyBhbmQgcHJldmVudCBHb29nbGUncyBDU1MgT3B0aW1pemVyIGZyb20gY29sbGFwc2luZyB0aGUgZGVjbGFyYXRpb25zLiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHNvbWVcbi8vIG9mIHRoZSBzZWxlY3RvcnMgY29udGFpbiBwc2V1ZG8tY2xhc3NlcyBub3QgcmVjb2duaXplZCBpbiBhbGwgYnJvd3NlcnMuIElmIGEgYnJvd3NlciBlbmNvdW50ZXJzXG4vLyBhbiB1bmtub3duIHBzZXVkby1jbGFzcyBpdCB3aWxsIGRpc2NhcmQgdGhlIGVudGlyZSBydWxlIHNldC5cbiRtYXQtZm9ybS1maWVsZC1sZWdhY3ktZGVkdXBlOiAwO1xuXG4vLyBBcHBsaWVzIGEgZmxvYXRpbmcgbGFiZWwgYWJvdmUgdGhlIGZvcm0gZmllbGQgY29udHJvbCBpdHNlbGYuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1sYWJlbC1mbG9hdGluZygkZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKSB7XG4gIC8vIFdlIHVzZSBwZXJzcGVjdGl2ZSB0byBmaXggdGhlIHRleHQgYmx1cnJpbmVzcyBhcyBkZXNjcmliZWQgaGVyZTpcbiAgLy8gaHR0cDovL3d3dy51c2VyYWdlbnRtYW4uY29tL2Jsb2cvMjAxNC8wNS8wNC9maXhpbmctdHlwb2dyYXBoeS1pbnNpZGUtb2YtMi1kLWNzcy10cmFuc2Zvcm1zL1xuICAvLyBUaGlzIHJlc3VsdHMgaW4gYSBzbWFsbCBqaXR0ZXIgYWZ0ZXIgdGhlIGxhYmVsIGZsb2F0cyBvbiBGaXJlZm94LCB3aGljaCB0aGVcbiAgLy8gdHJhbnNsYXRlWiBmaXhlcy5cbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0kaW5maXgtbWFyZ2luLXRvcCAtICRpbmZpeC1wYWRkaW5nKSBzY2FsZSgkZm9udC1zY2FsZSkgcGVyc3BlY3RpdmUoMTAwcHgpXG4gIHRyYW5zbGF0ZVooMC4wMDFweCArICRtYXQtZm9ybS1maWVsZC1sZWdhY3ktZGVkdXBlKTtcbiAgLy8gVGhlIHRyaWNrcyBhYm92ZSB1c2VkIHRvIHNtb290aCBvdXQgdGhlIGFuaW1hdGlvbiBvbiBjaHJvbWUgYW5kIGZpcmVmb3ggYWN0dWFsbHkgbWFrZSB0aGluZ3NcbiAgLy8gd29yc2Ugb24gSUUsIHNvIHdlIGRvbid0IGluY2x1ZGUgdGhlbSBpbiB0aGUgSUUgdmVyc2lvbi5cbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtJGluZml4LW1hcmdpbi10b3AgLSAkaW5maXgtcGFkZGluZyArICRtYXQtZm9ybS1maWVsZC1sZWdhY3ktZGVkdXBlKVxuICAgICAgICAgICAgICAgICAgc2NhbGUoJGZvbnQtc2NhbGUpO1xuXG4gIHdpZHRoOiAxMDAlIC8gJGZvbnQtc2NhbGUgKyAkbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlZHVwZTtcblxuICAkbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlZHVwZTogJG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZWR1cGUgKyAwLjAwMDAxICFnbG9iYWw7XG59XG5cbi8vIFNhbWUgYXMgbWl4aW4gYWJvdmUsIGJ1dCBvbWl0cyB0aGUgdHJhbnNsYXRlWiBmb3IgcHJpbnRpbmcgcHVycG9zZXMuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1sYWJlbC1mbG9hdGluZy1wcmludCgkZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKSB7XG4gIC8vIFRoaXMgcmVzdWx0cyBpbiBhIHNtYWxsIGppdHRlciBhZnRlciB0aGUgbGFiZWwgZmxvYXRzIG9uIEZpcmVmb3gsIHdoaWNoIHRoZVxuICAvLyB0cmFuc2xhdGVaIGZpeGVzLlxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLSRpbmZpeC1tYXJnaW4tdG9wIC0gJGluZml4LXBhZGRpbmcgKyAkbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlZHVwZSlcbiAgICAgICAgICAgICAgICAgIHNjYWxlKCRmb250LXNjYWxlKTtcbiAgLy8gVGhlIHRyaWNrcyBhYm92ZSB1c2VkIHRvIHNtb290aCBvdXQgdGhlIGFuaW1hdGlvbiBvbiBjaHJvbWUgYW5kIGZpcmVmb3ggYWN0dWFsbHkgbWFrZSB0aGluZ3NcbiAgLy8gd29yc2Ugb24gSUUsIHNvIHdlIGRvbid0IGluY2x1ZGUgdGhlbSBpbiB0aGUgSUUgdmVyc2lvbi5cbiAgJG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZWR1cGU6ICRtYXQtZm9ybS1maWVsZC1sZWdhY3ktZGVkdXBlICsgMC4wMDAwMSAhZ2xvYmFsO1xufVxuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtbGVnYWN5LXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAvLyBUaGUgdW5pdC1sZXNzIGxpbmUtaGVpZ2h0IGZyb20gdGhlIGZvbnQgY29uZmlnLlxuICAkbGluZS1oZWlnaHQ6IG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBpbnB1dCk7XG4gIC8vIFRoZSBhbW91bnQgdG8gc2NhbGUgdGhlIGZvbnQgZm9yIHRoZSBmbG9hdGluZyBsYWJlbCBhbmQgc3Vic2NyaXB0LlxuICAkc3Vic2NyaXB0LWZvbnQtc2NhbGU6IDAuNzU7XG4gIC8vIFRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgdG9wIG9mIHRoZSBsaW5lIGFuZCB0aGUgdG9wIG9mIHRoZSBhY3R1YWwgdGV4dFxuICAvLyAoYXMgYSBmcmFjdGlvbiBvZiB0aGUgZm9udC1zaXplKS5cbiAgJGxpbmUtc3BhY2luZzogKCRsaW5lLWhlaWdodCAtIDEpIC8gMjtcbiAgLy8gVGhlIHBhZGRpbmcgb24gdGhlIGluZml4LiBNb2NrcyBzaG93IGhhbGYgb2YgdGhlIHRleHQgc2l6ZSwgYnV0IHNlZW0gdG8gbWVhc3VyZSBmcm9tIHRoZSBlZGdlXG4gIC8vIG9mIHRoZSB0ZXh0IGl0c2VsZiwgbm90IHRoZSBlZGdlIG9mIHRoZSBsaW5lOyB0aGVyZWZvcmUgd2Ugc3VidHJhY3Qgb2ZmIHRoZSBsaW5lIHNwYWNpbmcuXG4gICRpbmZpeC1wYWRkaW5nOiAwLjVlbSAtICRsaW5lLXNwYWNpbmc7XG4gIC8vIFRoZSBtYXJnaW4gYXBwbGllZCB0byB0aGUgZm9ybS1maWVsZC1pbmZpeCB0byByZXNlcnZlIHNwYWNlIGZvciB0aGUgZmxvYXRpbmcgbGFiZWwuXG4gICRpbmZpeC1tYXJnaW4tdG9wOiAxZW0gKiAkbGluZS1oZWlnaHQgKiAkc3Vic2NyaXB0LWZvbnQtc2NhbGU7XG4gIC8vIFRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBib3R0b20gb2YgdGhlIC5tYXQtZm9ybS1maWVsZC1mbGV4IGFyZWEgYW5kIHRoZSBzdWJzY3JpcHQgd3JhcHBlci5cbiAgLy8gTW9ja3Mgc2hvdyBoYWxmIG9mIHRoZSB0ZXh0IHNpemUsIGJ1dCB0aGlzIG1hcmdpbiBpcyBhcHBsaWVkIHRvIGFuIGVsZW1lbnQgd2l0aCB0aGUgc3Vic2NyaXB0XG4gIC8vIHRleHQgZm9udCBzaXplLCBzbyB3ZSBuZWVkIHRvIGRpdmlkZSBieSB0aGUgc2NhbGUgZmFjdG9yIHRvIG1ha2UgaXQgaGFsZiBvZiB0aGUgb3JpZ2luYWwgdGV4dFxuICAvLyBzaXplLiBXZSBhZ2FpbiBuZWVkIHRvIHN1YnRyYWN0IG9mZiB0aGUgbGluZSBzcGFjaW5nIHNpbmNlIHRoZSBtb2NrcyBtZWFzdXJlIHRvIHRoZSBlZGdlIG9mIHRoZVxuICAvLyB0ZXh0LCBub3QgdGhlICBlZGdlIG9mIHRoZSBsaW5lLlxuICAkc3Vic2NyaXB0LW1hcmdpbi10b3A6IDAuNWVtIC8gJHN1YnNjcmlwdC1mb250LXNjYWxlIC0gKCRsaW5lLXNwYWNpbmcgKiAyKTtcbiAgLy8gVGhlIHBhZGRpbmcgYXBwbGllZCB0byB0aGUgZm9ybS1maWVsZC13cmFwcGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIHRoZSBzdWJzY3JpcHQsIHNpbmNlIGl0J3NcbiAgLy8gYWJzb2x1dGVseSBwb3NpdGlvbmVkLiBUaGlzIGlzIGEgY29tYmluYXRpb24gb2YgdGhlIHN1YnNjcmlwdCdzIG1hcmdpbiBhbmQgbGluZS1oZWlnaHQsIGJ1dCB3ZVxuICAvLyBuZWVkIHRvIG11bHRpcGx5IGJ5IHRoZSBzdWJzY3JpcHQgZm9udCBzY2FsZSBmYWN0b3Igc2luY2UgdGhlIHdyYXBwZXIgaGFzIGEgbGFyZ2VyIGZvbnQgc2l6ZS5cbiAgJHdyYXBwZXItcGFkZGluZy1ib3R0b206ICgkc3Vic2NyaXB0LW1hcmdpbi10b3AgKyAkbGluZS1oZWlnaHQpICogJHN1YnNjcmlwdC1mb250LXNjYWxlO1xuXG4gIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLWxlZ2FjeSB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLXdyYXBwZXIge1xuICAgICAgcGFkZGluZy1ib3R0b206ICR3cmFwcGVyLXBhZGRpbmctYm90dG9tO1xuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC1pbmZpeCB7XG4gICAgICBwYWRkaW5nOiAkaW5maXgtcGFkZGluZyAwO1xuICAgIH1cblxuICAgICYubWF0LWZvcm0tZmllbGQtY2FuLWZsb2F0IHtcbiAgICAgICYubWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0IC5tYXQtZm9ybS1maWVsZC1sYWJlbCxcbiAgICAgIC5tYXQtaW5wdXQtc2VydmVyOmZvY3VzICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXIgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1sYWJlbC1mbG9hdGluZyhcbiAgICAgICAgICAgICAgICAkc3Vic2NyaXB0LWZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEBicmVha2luZy1jaGFuZ2UgOC4wLjAgd2lsbCByZWx5IG9uIEF1dG9maWxsTW9uaXRvciBpbnN0ZWFkLlxuICAgICAgLm1hdC1mb3JtLWZpZWxkLWF1dG9maWxsLWNvbnRyb2w6LXdlYmtpdC1hdXRvZmlsbCArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyXG4gICAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtbGVnYWN5LWxhYmVsLWZsb2F0aW5nKFxuICAgICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VydmVyLXNpZGUgcmVuZGVyZWQgbWF0SW5wdXQgd2l0aCBhIGxhYmVsIGF0dHJpYnV0ZSBidXQgbGFiZWwgbm90IHNob3duXG4gICAgICAvLyAodXNlZCBhcyBhIHB1cmUgQ1NTIHN0YW5kLWluIGZvciBtYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQpLlxuICAgICAgLm1hdC1pbnB1dC1zZXJ2ZXJbbGFiZWxdOm5vdCg6bGFiZWwtc2hvd24pICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXJcbiAgICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1sZWdhY3ktbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZywgJGluZml4LW1hcmdpbi10b3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICB0b3A6ICRpbmZpeC1tYXJnaW4tdG9wICsgJGluZml4LXBhZGRpbmc7XG4gICAgfVxuXG4gICAgLm1hdC1mb3JtLWZpZWxkLXVuZGVybGluZSB7XG4gICAgICAvLyBXZSB3YW50IHRoZSB1bmRlcmxpbmUgdG8gc3RhcnQgYXQgdGhlIGVuZCBvZiB0aGUgY29udGVudCBib3gsIG5vdCB0aGUgcGFkZGluZyBib3gsXG4gICAgICAvLyBzbyB3ZSBtb3ZlIGl0IHVwIGJ5IHRoZSBwYWRkaW5nIGFtb3VudC5cbiAgICAgIGJvdHRvbTogJHdyYXBwZXItcGFkZGluZy1ib3R0b207XG4gICAgfVxuXG4gICAgLm1hdC1mb3JtLWZpZWxkLXN1YnNjcmlwdC13cmFwcGVyIHtcbiAgICAgIG1hcmdpbi10b3A6ICRzdWJzY3JpcHQtbWFyZ2luLXRvcDtcblxuICAgICAgLy8gV2Ugd2FudCB0aGUgc3Vic2NyaXB0IHRvIHN0YXJ0IGF0IHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQgYm94LCBub3QgdGhlIHBhZGRpbmcgYm94LFxuICAgICAgLy8gc28gd2UgbW92ZSBpdCB1cCBieSB0aGUgcGFkZGluZyBhbW91bnQgKGFkanVzdGVkIGZvciB0aGUgc21hbGxlciBmb250IHNpemUpO1xuICAgICAgdG9wOiBjYWxjKDEwMCUgLSAjeyR3cmFwcGVyLXBhZGRpbmctYm90dG9tIC8gJHN1YnNjcmlwdC1mb250LXNjYWxlfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gdHJhbnNsYXRlWiBjYXVzZXMgdGhlIGxhYmVsIHRvIG5vdCBhcHBlYXIgd2hpbGUgcHJpbnRpbmcsIHNvIHdlIG92ZXJyaWRlIGl0IHRvIG5vdFxuICAvLyBhcHBseSB0cmFuc2xhdGVaIHdoaWxlIHByaW50aW5nXG4gIEBtZWRpYSBwcmludCB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2UtbGVnYWN5IHtcbiAgICAgICYubWF0LWZvcm0tZmllbGQtY2FuLWZsb2F0IHtcbiAgICAgICAgJi5tYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLFxuICAgICAgICAubWF0LWlucHV0LXNlcnZlcjpmb2N1cyArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1sYWJlbC1mbG9hdGluZy1wcmludChcbiAgICAgICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEBicmVha2luZy1jaGFuZ2UgOC4wLjAgd2lsbCByZWx5IG9uIEF1dG9maWxsTW9uaXRvciBpbnN0ZWFkLlxuICAgICAgICAubWF0LWZvcm0tZmllbGQtYXV0b2ZpbGwtY29udHJvbDotd2Via2l0LWF1dG9maWxsICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXJcbiAgICAgICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtbGVnYWN5LWxhYmVsLWZsb2F0aW5nLXByaW50KFxuICAgICAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZywgJGluZml4LW1hcmdpbi10b3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VydmVyLXNpZGUgcmVuZGVyZWQgbWF0SW5wdXQgd2l0aCBhIGxhYmVsIGF0dHJpYnV0ZSBidXQgbGFiZWwgbm90IHNob3duXG4gICAgICAgIC8vICh1c2VkIGFzIGEgcHVyZSBDU1Mgc3RhbmQtaW4gZm9yIG1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCkuXG4gICAgICAgIC5tYXQtaW5wdXQtc2VydmVyW2xhYmVsXTpub3QoOmxhYmVsLXNob3duKSArIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyXG4gICAgICAgIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1sYWJlbC1mbG9hdGluZy1wcmludChcbiAgICAgICAgICAgICAgICAgICRzdWJzY3JpcHQtZm9udC1zY2FsZSwgJGluZml4LXBhZGRpbmcsICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLWxlZ2FjeS1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1sZWdhY3ktdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1mb3JtLWZpZWxkLWxlZ2FjeScpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLWxlZ2FjeS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1sZWdhY3ktdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG5cblxuLy8gVGhlbWUgc3R5bGVzIHRoYXQgb25seSBhcHBseSB0byB0aGUgb3V0bGluZSBhcHBlYXJhbmNlIG9mIHRoZSBmb3JtLWZpZWxkLlxuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtb3V0bGluZS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkcHJpbWFyeTogbWFwLWdldCgkY29uZmlnLCBwcmltYXJ5KTtcbiAgJGFjY2VudDogbWFwLWdldCgkY29uZmlnLCBhY2NlbnQpO1xuICAkd2FybjogbWFwLWdldCgkY29uZmlnLCB3YXJuKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG4gICRpcy1kYXJrLXRoZW1lOiBtYXAtZ2V0KCRjb25maWcsIGlzLWRhcmspO1xuXG4gICRsYWJlbC1kaXNhYmxlZC1jb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXNhYmxlZC10ZXh0KTtcbiAgJG91dGxpbmUtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlciwgaWYoJGlzLWRhcmstdGhlbWUsIDAuMywgMC4xMikpO1xuICAkb3V0bGluZS1jb2xvci1ob3ZlcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCBkaXZpZGVyLCBpZigkaXMtZGFyay10aGVtZSwgMSwgMC44NykpO1xuICAkb3V0bGluZS1jb2xvci1wcmltYXJ5OiBtYXQtY29sb3IoJHByaW1hcnkpO1xuICAkb3V0bGluZS1jb2xvci1hY2NlbnQ6IG1hdC1jb2xvcigkYWNjZW50KTtcbiAgJG91dGxpbmUtY29sb3Itd2FybjogbWF0LWNvbG9yKCR3YXJuKTtcbiAgJG91dGxpbmUtY29sb3ItZGlzYWJsZWQ6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgZGl2aWRlciwgaWYoJGlzLWRhcmstdGhlbWUsIDAuMTUsIDAuMDYpKTtcblxuICAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1vdXRsaW5lIHtcbiAgICAubWF0LWZvcm0tZmllbGQtb3V0bGluZSB7XG4gICAgICBjb2xvcjogJG91dGxpbmUtY29sb3I7XG4gICAgfVxuXG4gICAgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUtdGhpY2sge1xuICAgICAgY29sb3I6ICRvdXRsaW5lLWNvbG9yLWhvdmVyO1xuICAgIH1cblxuICAgICYubWF0LWZvY3VzZWQge1xuICAgICAgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUtdGhpY2sge1xuICAgICAgICBjb2xvcjogJG91dGxpbmUtY29sb3ItcHJpbWFyeTtcbiAgICAgIH1cblxuICAgICAgJi5tYXQtYWNjZW50IC5tYXQtZm9ybS1maWVsZC1vdXRsaW5lLXRoaWNrIHtcbiAgICAgICAgY29sb3I6ICRvdXRsaW5lLWNvbG9yLWFjY2VudDtcbiAgICAgIH1cblxuICAgICAgJi5tYXQtd2FybiAubWF0LWZvcm0tZmllbGQtb3V0bGluZS10aGljayB7XG4gICAgICAgIGNvbG9yOiAkb3V0bGluZS1jb2xvci13YXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENsYXNzIHJlcGVhdGVkIHNvIHRoYXQgcnVsZSBpcyBzcGVjaWZpYyBlbm91Z2ggdG8gb3ZlcnJpZGUgZm9jdXNlZCBhY2NlbnQgY29sb3IgY2FzZS5cbiAgICAmLm1hdC1mb3JtLWZpZWxkLWludmFsaWQubWF0LWZvcm0tZmllbGQtaW52YWxpZCB7XG4gICAgICAubWF0LWZvcm0tZmllbGQtb3V0bGluZS10aGljayB7XG4gICAgICAgIGNvbG9yOiAkb3V0bGluZS1jb2xvci13YXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgICYubWF0LWZvcm0tZmllbGQtZGlzYWJsZWQge1xuICAgICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgY29sb3I6ICRsYWJlbC1kaXNhYmxlZC1jb2xvcjtcbiAgICAgIH1cblxuICAgICAgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUge1xuICAgICAgICBjb2xvcjogJG91dGxpbmUtY29sb3ItZGlzYWJsZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFVzZWQgdG8gbWFrZSBpbnN0YW5jZXMgb2YgdGhlIF9tYXQtZm9ybS1maWVsZC1sYWJlbC1mbG9hdGluZyBtaXhpbiBuZWdsaWdpYmx5IGRpZmZlcmVudCxcbi8vIGFuZCBwcmV2ZW50IEdvb2dsZSdzIENTUyBPcHRpbWl6ZXIgZnJvbSBjb2xsYXBzaW5nIHRoZSBkZWNsYXJhdGlvbnMuIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2Ugc29tZVxuLy8gb2YgdGhlIHNlbGVjdG9ycyBjb250YWluIHBzZXVkby1jbGFzc2VzIG5vdCByZWNvZ25pemVkIGluIGFsbCBicm93c2Vycy4gSWYgYSBicm93c2VyIGVuY291bnRlcnNcbi8vIGFuIHVua25vd24gcHNldWRvLWNsYXNzIGl0IHdpbGwgZGlzY2FyZCB0aGUgZW50aXJlIHJ1bGUgc2V0LlxuJG1hdC1mb3JtLWZpZWxkLW91dGxpbmUtZGVkdXBlOiAwO1xuXG4vLyBBcHBsaWVzIGEgZmxvYXRpbmcgbGFiZWwgYWJvdmUgdGhlIGZvcm0gZmllbGQgY29udHJvbCBpdHNlbGYuXG5AbWl4aW4gX21hdC1mb3JtLWZpZWxkLW91dGxpbmUtbGFiZWwtZmxvYXRpbmcoJGZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCkge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLSRpbmZpeC1tYXJnaW4tdG9wIC0gJGluZml4LXBhZGRpbmcgKyAkbWF0LWZvcm0tZmllbGQtb3V0bGluZS1kZWR1cGUpXG4gIHNjYWxlKCRmb250LXNjYWxlKTtcbiAgd2lkdGg6IDEwMCUgLyAkZm9udC1zY2FsZSArICRtYXQtZm9ybS1maWVsZC1vdXRsaW5lLWRlZHVwZTtcblxuICAkbWF0LWZvcm0tZmllbGQtb3V0bGluZS1kZWR1cGU6ICRtYXQtZm9ybS1maWVsZC1vdXRsaW5lLWRlZHVwZSArIDAuMDAwMDEgIWdsb2JhbDtcbn1cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLW91dGxpbmUtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC8vIFRoZSB1bml0LWxlc3MgbGluZS1oZWlnaHQgZnJvbSB0aGUgZm9udCBjb25maWcuXG4gICRsaW5lLWhlaWdodDogbWF0LWxpbmUtaGVpZ2h0KCRjb25maWcsIGlucHV0KTtcbiAgLy8gVGhlIGFtb3VudCB0byBzY2FsZSB0aGUgZm9udCBmb3IgdGhlIGZsb2F0aW5nIGxhYmVsIGFuZCBzdWJzY3JpcHQuXG4gICRzdWJzY3JpcHQtZm9udC1zY2FsZTogMC43NTtcbiAgLy8gVGhlIHBhZGRpbmcgYWJvdmUgYW5kIGJlbG93IHRoZSBpbmZpeC5cbiAgJGluZml4LXBhZGRpbmc6IDFlbTtcbiAgLy8gVGhlIG1hcmdpbiBhcHBsaWVkIHRvIHRoZSBmb3JtLWZpZWxkLWluZml4IHRvIHJlc2VydmUgc3BhY2UgZm9yIHRoZSBmbG9hdGluZyBsYWJlbC5cbiAgJGluZml4LW1hcmdpbi10b3A6IDFlbSAqICRsaW5lLWhlaWdodCAqICRzdWJzY3JpcHQtZm9udC1zY2FsZTtcbiAgLy8gVGhlIHNwYWNlIGJldHdlZW4gdGhlIGJvdHRvbSBvZiB0aGUgLm1hdC1mb3JtLWZpZWxkLWZsZXggYXJlYSBhbmQgdGhlIHN1YnNjcmlwdCB3cmFwcGVyLlxuICAvLyBNb2NrcyBzaG93IGhhbGYgb2YgdGhlIHRleHQgc2l6ZSwgYnV0IHRoaXMgbWFyZ2luIGlzIGFwcGxpZWQgdG8gYW4gZWxlbWVudCB3aXRoIHRoZSBzdWJzY3JpcHRcbiAgLy8gdGV4dCBmb250IHNpemUsIHNvIHdlIG5lZWQgdG8gZGl2aWRlIGJ5IHRoZSBzY2FsZSBmYWN0b3IgdG8gbWFrZSBpdCBoYWxmIG9mIHRoZSBvcmlnaW5hbCB0ZXh0XG4gIC8vIHNpemUuXG4gICRzdWJzY3JpcHQtbWFyZ2luLXRvcDogMC41ZW0gLyAkc3Vic2NyaXB0LWZvbnQtc2NhbGU7XG4gIC8vIFRoZSBwYWRkaW5nIGFwcGxpZWQgdG8gdGhlIGZvcm0tZmllbGQtd3JhcHBlciB0byByZXNlcnZlIHNwYWNlIGZvciB0aGUgc3Vic2NyaXB0LCBzaW5jZSBpdCdzXG4gIC8vIGFic29sdXRlbHkgcG9zaXRpb25lZC4gVGhpcyBpcyBhIGNvbWJpbmF0aW9uIG9mIHRoZSBzdWJzY3JpcHQncyBtYXJnaW4gYW5kIGxpbmUtaGVpZ2h0LCBidXQgd2VcbiAgLy8gbmVlZCB0byBtdWx0aXBseSBieSB0aGUgc3Vic2NyaXB0IGZvbnQgc2NhbGUgZmFjdG9yIHNpbmNlIHRoZSB3cmFwcGVyIGhhcyBhIGxhcmdlciBmb250IHNpemUuXG4gICR3cmFwcGVyLXBhZGRpbmctYm90dG9tOiAoJHN1YnNjcmlwdC1tYXJnaW4tdG9wICsgJGxpbmUtaGVpZ2h0KSAqICRzdWJzY3JpcHQtZm9udC1zY2FsZTtcbiAgLy8gVGhlIGFtb3VudCB3ZSBvZmZzZXQgdGhlIGxhYmVsIGZyb20gdGhlIGlucHV0IHRleHQgaW4gdGhlIG91dGxpbmUgYXBwZWFyYW5jZS5cbiAgJG91dGxpbmUtYXBwZWFyYW5jZS1sYWJlbC1vZmZzZXQ6IC0wLjI1ZW07XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLWluZml4IHtcbiAgICAgIHBhZGRpbmc6ICRpbmZpeC1wYWRkaW5nIDAgJGluZml4LXBhZGRpbmcgMDtcbiAgICB9XG5cbiAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgdG9wOiAkaW5maXgtbWFyZ2luLXRvcCArICRpbmZpeC1wYWRkaW5nO1xuICAgICAgbWFyZ2luLXRvcDogJG91dGxpbmUtYXBwZWFyYW5jZS1sYWJlbC1vZmZzZXQ7XG4gICAgfVxuXG4gICAgJi5tYXQtZm9ybS1maWVsZC1jYW4tZmxvYXQge1xuICAgICAgJi5tYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLFxuICAgICAgLm1hdC1pbnB1dC1zZXJ2ZXI6Zm9jdXMgKyAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlciAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtb3V0bGluZS1sYWJlbC1mbG9hdGluZyhcbiAgICAgICAgICAgICAgICAkc3Vic2NyaXB0LWZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nICsgJG91dGxpbmUtYXBwZWFyYW5jZS1sYWJlbC1vZmZzZXQsXG4gICAgICAgICAgICAgICAgJGluZml4LW1hcmdpbi10b3ApO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXJ2ZXItc2lkZSByZW5kZXJlZCBtYXRJbnB1dCB3aXRoIGEgbGFiZWwgYXR0cmlidXRlIGJ1dCBsYWJlbCBub3Qgc2hvd25cbiAgICAgIC8vICh1c2VkIGFzIGEgcHVyZSBDU1Mgc3RhbmQtaW4gZm9yIG1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCkuXG4gICAgICAubWF0LWlucHV0LXNlcnZlcltsYWJlbF06bm90KDpsYWJlbC1zaG93bikgKyAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlclxuICAgICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLW91dGxpbmUtbGFiZWwtZmxvYXRpbmcoXG4gICAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZyArICRvdXRsaW5lLWFwcGVhcmFuY2UtbGFiZWwtb2Zmc2V0LFxuICAgICAgICAgICAgICAgICRpbmZpeC1tYXJnaW4tdG9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9tYXQtZm9ybS1maWVsZC1vdXRsaW5lLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge31cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLW91dGxpbmUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1mb3JtLWZpZWxkLW91dGxpbmUnKSB7XG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgICRkZW5zaXR5OiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCR0aGVtZSk7XG4gICAgJHR5cG9ncmFwaHk6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJHRoZW1lKTtcblxuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1vdXRsaW5lLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1vdXRsaW5lLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1vdXRsaW5lLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHkpO1xuICAgIH1cbiAgfVxufVxuXG5cblxuXG5cblxuXG5cblxuLy8gVGhlbWUgc3R5bGVzIHRoYXQgb25seSBhcHBseSB0byB0aGUgc3RhbmRhcmQgYXBwZWFyYW5jZSBvZiB0aGUgZm9ybS1maWVsZC5cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLWNvbG9yKCRjb25maWctb3ItdGhlbWUpIHtcbiAgJGNvbmZpZzogbWF0LWdldC1jb2xvci1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuICAkaXMtZGFyay10aGVtZTogbWFwLWdldCgkY29uZmlnLCBpcy1kYXJrKTtcblxuICAkdW5kZXJsaW5lLWNvbG9yOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjcsIDAuNDIpKTtcblxuICAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1zdGFuZGFyZCB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLXVuZGVybGluZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yO1xuICAgIH1cblxuICAgICYubWF0LWZvcm0tZmllbGQtZGlzYWJsZWQgLm1hdC1mb3JtLWZpZWxkLXVuZGVybGluZSB7XG4gICAgICBAaW5jbHVkZSBtYXQtY29udHJvbC1kaXNhYmxlZC11bmRlcmxpbmUoJHVuZGVybGluZS1jb2xvcik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtYXQtZm9ybS1maWVsZC1zdGFuZGFyZC10eXBvZ3JhcGh5KCRjb25maWctb3ItdGhlbWUpIHt9XG5cbkBtaXhpbiBfbWF0LWZvcm0tZmllbGQtc3RhbmRhcmQtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7fVxuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtc3RhbmRhcmQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1mb3JtLWZpZWxkLXN0YW5kYXJkJykge1xuICAgICRjb2xvcjogbWF0LWdldC1jb2xvci1jb25maWcoJHRoZW1lKTtcbiAgICAkZGVuc2l0eTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkdGhlbWUpO1xuICAgICR0eXBvZ3JhcGh5OiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCR0aGVtZSk7XG5cbiAgICBAaWYgJGNvbG9yICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtc3RhbmRhcmQtY29sb3IoJGNvbG9yKTtcbiAgICB9XG4gICAgQGlmICRkZW5zaXR5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgX21hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLWRlbnNpdHkoJGRlbnNpdHkpO1xuICAgIH1cbiAgICBAaWYgJHR5cG9ncmFwaHkgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1zdGFuZGFyZC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5KTtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBDb2xvciBzdHlsZXMgdGhhdCBhcHBseSB0byBhbGwgYXBwZWFyYW5jZXMgb2YgdGhlIGZvcm0tZmllbGQuXG5AbWl4aW4gbWF0LWZvcm0tZmllbGQtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJHByaW1hcnk6IG1hcC1nZXQoJGNvbmZpZywgcHJpbWFyeSk7XG4gICRhY2NlbnQ6IG1hcC1nZXQoJGNvbmZpZywgYWNjZW50KTtcbiAgJHdhcm46IG1hcC1nZXQoJGNvbmZpZywgd2Fybik7XG4gICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAkZm9yZWdyb3VuZDogbWFwLWdldCgkY29uZmlnLCBmb3JlZ3JvdW5kKTtcbiAgJGlzLWRhcmstdGhlbWU6IG1hcC1nZXQoJGNvbmZpZywgaXMtZGFyayk7XG5cbiAgLy8gTGFiZWwgY29sb3JzLiBSZXF1aXJlZCBpcyB1c2VkIGZvciB0aGUgYCpgIHN0YXIgc2hvd24gaW4gdGhlIGxhYmVsLlxuICAkbGFiZWwtY29sb3I6IG1hdC1jb2xvcigkZm9yZWdyb3VuZCwgc2Vjb25kYXJ5LXRleHQsIGlmKCRpcy1kYXJrLXRoZW1lLCAwLjcsIDAuNikpO1xuICAkZm9jdXNlZC1sYWJlbC1jb2xvcjogbWF0LWNvbG9yKCRwcmltYXJ5LCB0ZXh0KTtcbiAgJHJlcXVpcmVkLWxhYmVsLWNvbG9yOiBtYXQtY29sb3IoJGFjY2VudCwgdGV4dCk7XG5cbiAgLy8gVW5kZXJsaW5lIGNvbG9ycy5cbiAgJHVuZGVybGluZS1jb2xvci1iYXNlOiBtYXQtY29sb3IoJGZvcmVncm91bmQsIGRpdmlkZXIsIGlmKCRpcy1kYXJrLXRoZW1lLCAxLCAwLjg3KSk7XG4gICR1bmRlcmxpbmUtY29sb3ItYWNjZW50OiBtYXQtY29sb3IoJGFjY2VudCwgdGV4dCk7XG4gICR1bmRlcmxpbmUtY29sb3Itd2FybjogbWF0LWNvbG9yKCR3YXJuLCB0ZXh0KTtcbiAgJHVuZGVybGluZS1mb2N1c2VkLWNvbG9yOiBtYXQtY29sb3IoJHByaW1hcnksIHRleHQpO1xuXG4gIC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XG4gICAgY29sb3I6ICRsYWJlbC1jb2xvcjtcbiAgfVxuXG4gIC5tYXQtaGludCB7XG4gICAgY29sb3I6ICRsYWJlbC1jb2xvcjtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC5tYXQtZm9jdXNlZCAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgIGNvbG9yOiAkZm9jdXNlZC1sYWJlbC1jb2xvcjtcblxuICAgICYubWF0LWFjY2VudCB7XG4gICAgICBjb2xvcjogJHVuZGVybGluZS1jb2xvci1hY2NlbnQ7XG4gICAgfVxuXG4gICAgJi5tYXQtd2FybiB7XG4gICAgICBjb2xvcjogJHVuZGVybGluZS1jb2xvci13YXJuO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZm9jdXNlZCAubWF0LWZvcm0tZmllbGQtcmVxdWlyZWQtbWFya2VyIHtcbiAgICBjb2xvcjogJHJlcXVpcmVkLWxhYmVsLWNvbG9yO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLXJpcHBsZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHVuZGVybGluZS1jb2xvci1iYXNlO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLm1hdC1mb2N1c2VkIHtcbiAgICAubWF0LWZvcm0tZmllbGQtcmlwcGxlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR1bmRlcmxpbmUtZm9jdXNlZC1jb2xvcjtcblxuICAgICAgJi5tYXQtYWNjZW50IHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHVuZGVybGluZS1jb2xvci1hY2NlbnQ7XG4gICAgICB9XG5cbiAgICAgICYubWF0LXdhcm4ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yLXdhcm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLXR5cGUtbWF0LW5hdGl2ZS1zZWxlY3QubWF0LWZvY3VzZWQ6bm90KC5tYXQtZm9ybS1maWVsZC1pbnZhbGlkKSB7XG4gICAgLm1hdC1mb3JtLWZpZWxkLWluZml4OjphZnRlciB7XG4gICAgICBjb2xvcjogJHVuZGVybGluZS1mb2N1c2VkLWNvbG9yO1xuICAgIH1cblxuICAgICYubWF0LWFjY2VudCAubWF0LWZvcm0tZmllbGQtaW5maXg6OmFmdGVyIHtcbiAgICAgIGNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yLWFjY2VudDtcbiAgICB9XG5cbiAgICAmLm1hdC13YXJuIC5tYXQtZm9ybS1maWVsZC1pbmZpeDo6YWZ0ZXIge1xuICAgICAgY29sb3I6ICR1bmRlcmxpbmUtY29sb3Itd2FybjtcbiAgICB9XG4gIH1cblxuICAvLyBTdHlsaW5nIGZvciB0aGUgZXJyb3Igc3RhdGUgb2YgdGhlIGZvcm0gZmllbGQuIE5vdGUgdGhhdCB3aGlsZSB0aGUgc2FtZSBjYW4gYmVcbiAgLy8gYWNoaWV2ZWQgd2l0aCB0aGUgbmctKiBjbGFzc2VzLCB3ZSB1c2UgdGhpcyBhcHByb2FjaCBpbiBvcmRlciB0byBlbnN1cmUgdGhhdCB0aGUgc2FtZVxuICAvLyBsb2dpYyBpcyB1c2VkIHRvIHN0eWxlIHRoZSBlcnJvciBzdGF0ZSBhbmQgdG8gc2hvdyB0aGUgZXJyb3IgbWVzc2FnZXMuXG4gIC5tYXQtZm9ybS1maWVsZC5tYXQtZm9ybS1maWVsZC1pbnZhbGlkIHtcbiAgICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgICAgY29sb3I6ICR1bmRlcmxpbmUtY29sb3Itd2FybjtcblxuICAgICAgJi5tYXQtYWNjZW50LFxuICAgICAgLm1hdC1mb3JtLWZpZWxkLXJlcXVpcmVkLW1hcmtlciB7XG4gICAgICAgIGNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yLXdhcm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1hdC1mb3JtLWZpZWxkLXJpcHBsZSxcbiAgICAubWF0LWZvcm0tZmllbGQtcmlwcGxlLm1hdC1hY2NlbnQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHVuZGVybGluZS1jb2xvci13YXJuO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZXJyb3Ige1xuICAgIGNvbG9yOiAkdW5kZXJsaW5lLWNvbG9yLXdhcm47XG4gIH1cblxuICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1sZWdhY3ktY29sb3IoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLXN0YW5kYXJkLWNvbG9yKCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1maWxsLWNvbG9yKCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1vdXRsaW5lLWNvbG9yKCRjb25maWcpO1xufVxuXG4vLyBVc2VkIHRvIG1ha2UgaW5zdGFuY2VzIG9mIHRoZSBfbWF0LWZvcm0tZmllbGQtbGFiZWwtZmxvYXRpbmcgbWl4aW4gbmVnbGlnaWJseSBkaWZmZXJlbnQsXG4vLyBhbmQgcHJldmVudCBHb29nbGUncyBDU1MgT3B0aW1pemVyIGZyb20gY29sbGFwc2luZyB0aGUgZGVjbGFyYXRpb25zLiBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHNvbWVcbi8vIG9mIHRoZSBzZWxlY3RvcnMgY29udGFpbiBwc2V1ZG8tY2xhc3NlcyBub3QgcmVjb2duaXplZCBpbiBhbGwgYnJvd3NlcnMuIElmIGEgYnJvd3NlciBlbmNvdW50ZXJzXG4vLyBhbiB1bmtub3duIHBzZXVkby1jbGFzcyBpdCB3aWxsIGRpc2NhcmQgdGhlIGVudGlyZSBydWxlIHNldC5cbiRtYXQtZm9ybS1maWVsZC1kZWR1cGU6IDA7XG5cbi8vIEFwcGxpZXMgYSBmbG9hdGluZyBsYWJlbCBhYm92ZSB0aGUgZm9ybSBmaWVsZCBjb250cm9sIGl0c2VsZi5cbkBtaXhpbiBfbWF0LWZvcm0tZmllbGQtbGFiZWwtZmxvYXRpbmcoJGZvbnQtc2NhbGUsICRpbmZpeC1wYWRkaW5nLCAkaW5maXgtbWFyZ2luLXRvcCkge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLSRpbmZpeC1tYXJnaW4tdG9wIC0gJGluZml4LXBhZGRpbmcgKyAkbWF0LWZvcm0tZmllbGQtZGVkdXBlKVxuICAgICAgICAgICAgIHNjYWxlKCRmb250LXNjYWxlKTtcbiAgd2lkdGg6IDEwMCUgLyAkZm9udC1zY2FsZSArICRtYXQtZm9ybS1maWVsZC1kZWR1cGU7XG5cbiAgJG1hdC1mb3JtLWZpZWxkLWRlZHVwZTogJG1hdC1mb3JtLWZpZWxkLWRlZHVwZSArIDAuMDAwMDEgIWdsb2JhbDtcbn1cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLXR5cG9ncmFwaHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LXR5cG9ncmFwaHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAvLyBUaGUgdW5pdC1sZXNzIGxpbmUtaGVpZ2h0IGZyb20gdGhlIGZvbnQgY29uZmlnLlxuICAkbGluZS1oZWlnaHQ6IG1hdC1saW5lLWhlaWdodCgkY29uZmlnLCBpbnB1dCk7XG5cbiAgLy8gVGhlIGFtb3VudCB0byBzY2FsZSB0aGUgZm9udCBmb3IgdGhlIGZsb2F0aW5nIGxhYmVsIGFuZCBzdWJzY3JpcHQuXG4gICRzdWJzY3JpcHQtZm9udC1zY2FsZTogMC43NTtcbiAgLy8gVGhlIGFtb3VudCB0byBzY2FsZSB0aGUgZm9udCBmb3IgdGhlIHByZWZpeCBhbmQgc3VmZml4IGljb25zLlxuICAkcHJlZml4LXN1ZmZpeC1pY29uLWZvbnQtc2NhbGU6IDEuNTtcblxuICAvLyBUaGUgcGFkZGluZyBvbiB0aGUgaW5maXguIE1vY2tzIHNob3cgaGFsZiBvZiB0aGUgdGV4dCBzaXplLlxuICAkaW5maXgtcGFkZGluZzogMC41ZW07XG4gIC8vIFRoZSBtYXJnaW4gYXBwbGllZCB0byB0aGUgZm9ybS1maWVsZC1pbmZpeCB0byByZXNlcnZlIHNwYWNlIGZvciB0aGUgZmxvYXRpbmcgbGFiZWwuXG4gICRpbmZpeC1tYXJnaW4tdG9wOiAxZW0gKiAkbGluZS1oZWlnaHQgKiAkc3Vic2NyaXB0LWZvbnQtc2NhbGU7XG4gIC8vIEZvbnQgc2l6ZSB0byB1c2UgZm9yIHRoZSBsYWJlbCBhbmQgc3Vic2NyaXB0IHRleHQuXG4gICRzdWJzY3JpcHQtZm9udC1zaXplOiAkc3Vic2NyaXB0LWZvbnQtc2NhbGUgKiAxMDAlO1xuICAvLyBGb250IHNpemUgdG8gdXNlIGZvciB0aGUgZm9yIHRoZSBwcmVmaXggYW5kIHN1ZmZpeCBpY29ucy5cbiAgJHByZWZpeC1zdWZmaXgtaWNvbi1mb250LXNpemU6ICRwcmVmaXgtc3VmZml4LWljb24tZm9udC1zY2FsZSAqIDEwMCU7XG4gIC8vIFRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBib3R0b20gb2YgdGhlIC5tYXQtZm9ybS1maWVsZC1mbGV4IGFyZWEgYW5kIHRoZSBzdWJzY3JpcHQgd3JhcHBlci5cbiAgLy8gTW9ja3Mgc2hvdyBoYWxmIG9mIHRoZSB0ZXh0IHNpemUsIGJ1dCB0aGlzIG1hcmdpbiBpcyBhcHBsaWVkIHRvIGFuIGVsZW1lbnQgd2l0aCB0aGUgc3Vic2NyaXB0XG4gIC8vIHRleHQgZm9udCBzaXplLCBzbyB3ZSBuZWVkIHRvIGRpdmlkZSBieSB0aGUgc2NhbGUgZmFjdG9yIHRvIG1ha2UgaXQgaGFsZiBvZiB0aGUgb3JpZ2luYWwgdGV4dFxuICAvLyBzaXplLlxuICAkc3Vic2NyaXB0LW1hcmdpbi10b3A6IDAuNWVtIC8gJHN1YnNjcmlwdC1mb250LXNjYWxlO1xuICAvLyBUaGUgcGFkZGluZyBhcHBsaWVkIHRvIHRoZSBmb3JtLWZpZWxkLXdyYXBwZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgdGhlIHN1YnNjcmlwdCwgc2luY2UgaXQnc1xuICAvLyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQuIFRoaXMgaXMgYSBjb21iaW5hdGlvbiBvZiB0aGUgc3Vic2NyaXB0J3MgbWFyZ2luIGFuZCBsaW5lLWhlaWdodCwgYnV0IHdlXG4gIC8vIG5lZWQgdG8gbXVsdGlwbHkgYnkgdGhlIHN1YnNjcmlwdCBmb250IHNjYWxlIGZhY3RvciBzaW5jZSB0aGUgd3JhcHBlciBoYXMgYSBsYXJnZXIgZm9udCBzaXplLlxuICAkd3JhcHBlci1wYWRkaW5nLWJvdHRvbTogKCRzdWJzY3JpcHQtbWFyZ2luLXRvcCArICRsaW5lLWhlaWdodCkgKiAkc3Vic2NyaXB0LWZvbnQtc2NhbGU7XG5cbiAgLm1hdC1mb3JtLWZpZWxkIHtcbiAgICBAaW5jbHVkZSBtYXQtdHlwb2dyYXBoeS1sZXZlbC10by1zdHlsZXMoJGNvbmZpZywgaW5wdXQpO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLXdyYXBwZXIge1xuICAgIHBhZGRpbmctYm90dG9tOiAkd3JhcHBlci1wYWRkaW5nLWJvdHRvbTtcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC1wcmVmaXgsXG4gIC5tYXQtZm9ybS1maWVsZC1zdWZmaXgge1xuICAgIC8vIEFsbG93IGljb25zIGluIGEgcHJlZml4IG9yIHN1ZmZpeCB0byBhZGFwdCB0byB0aGUgY29ycmVjdCBzaXplLlxuICAgIC5tYXQtaWNvbiB7XG4gICAgICBmb250LXNpemU6ICRwcmVmaXgtc3VmZml4LWljb24tZm9udC1zaXplO1xuICAgICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodDtcbiAgICB9XG5cbiAgICAvLyBBbGxvdyBpY29uIGJ1dHRvbnMgaW4gYSBwcmVmaXggb3Igc3VmZml4IHRvIGFkYXB0IHRvIHRoZSBjb3JyZWN0IHNpemUuXG4gICAgLm1hdC1pY29uLWJ1dHRvbiB7XG4gICAgICBoZWlnaHQ6ICRwcmVmaXgtc3VmZml4LWljb24tZm9udC1zY2FsZSAqIDFlbTtcbiAgICAgIHdpZHRoOiAkcHJlZml4LXN1ZmZpeC1pY29uLWZvbnQtc2NhbGUgKiAxZW07XG5cbiAgICAgIC5tYXQtaWNvbiB7XG4gICAgICAgIGhlaWdodDogJGxpbmUtaGVpZ2h0ICogMWVtO1xuICAgICAgICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC1pbmZpeCB7XG4gICAgcGFkZGluZzogJGluZml4LXBhZGRpbmcgMDtcbiAgICAvLyBUaHJvd3Mgb2ZmIHRoZSBiYXNlbGluZSBpZiB3ZSBkbyBpdCBhcyBhIHJlYWwgbWFyZ2luLCBzbyB3ZSBkbyBpdCBhcyBhIGJvcmRlciBpbnN0ZWFkLlxuICAgIGJvcmRlci10b3A6ICRpbmZpeC1tYXJnaW4tdG9wIHNvbGlkIHRyYW5zcGFyZW50O1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLWNhbi1mbG9hdCB7XG4gICAgJi5tYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLFxuICAgIC5tYXQtaW5wdXQtc2VydmVyOmZvY3VzICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXIgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1sYWJlbC1mbG9hdGluZyhcbiAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZywgJGluZml4LW1hcmdpbi10b3ApO1xuICAgIH1cblxuICAgIC8vIFNlcnZlci1zaWRlIHJlbmRlcmVkIG1hdElucHV0IHdpdGggYSBsYWJlbCBhdHRyaWJ1dGUgYnV0IGxhYmVsIG5vdCBzaG93blxuICAgIC8vICh1c2VkIGFzIGEgcHVyZSBDU1Mgc3RhbmQtaW4gZm9yIG1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCkuXG4gICAgLm1hdC1pbnB1dC1zZXJ2ZXJbbGFiZWxdOm5vdCg6bGFiZWwtc2hvd24pICsgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXJcbiAgICAgICAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1sYWJlbC1mbG9hdGluZyhcbiAgICAgICAgICAgICAgJHN1YnNjcmlwdC1mb250LXNjYWxlLCAkaW5maXgtcGFkZGluZywgJGluZml4LW1hcmdpbi10b3ApO1xuICAgIH1cbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyIHtcbiAgICB0b3A6IC0kaW5maXgtbWFyZ2luLXRvcDtcbiAgICBwYWRkaW5nLXRvcDogJGluZml4LW1hcmdpbi10b3A7XG4gIH1cblxuICAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xuICAgIHRvcDogJGluZml4LW1hcmdpbi10b3AgKyAkaW5maXgtcGFkZGluZztcbiAgfVxuXG4gIC5tYXQtZm9ybS1maWVsZC11bmRlcmxpbmUge1xuICAgIC8vIFdlIHdhbnQgdGhlIHVuZGVybGluZSB0byBzdGFydCBhdCB0aGUgZW5kIG9mIHRoZSBjb250ZW50IGJveCwgbm90IHRoZSBwYWRkaW5nIGJveCxcbiAgICAvLyBzbyB3ZSBtb3ZlIGl0IHVwIGJ5IHRoZSBwYWRkaW5nIGFtb3VudC5cbiAgICBib3R0b206ICR3cmFwcGVyLXBhZGRpbmctYm90dG9tO1xuICB9XG5cbiAgLm1hdC1mb3JtLWZpZWxkLXN1YnNjcmlwdC13cmFwcGVyIHtcbiAgICBmb250LXNpemU6ICRzdWJzY3JpcHQtZm9udC1zaXplO1xuICAgIG1hcmdpbi10b3A6ICRzdWJzY3JpcHQtbWFyZ2luLXRvcDtcblxuICAgIC8vIFdlIHdhbnQgdGhlIHN1YnNjcmlwdCB0byBzdGFydCBhdCB0aGUgZW5kIG9mIHRoZSBjb250ZW50IGJveCwgbm90IHRoZSBwYWRkaW5nIGJveCxcbiAgICAvLyBzbyB3ZSBtb3ZlIGl0IHVwIGJ5IHRoZSBwYWRkaW5nIGFtb3VudCAoYWRqdXN0ZWQgZm9yIHRoZSBzbWFsbGVyIGZvbnQgc2l6ZSk7XG4gICAgdG9wOiBjYWxjKDEwMCUgLSAjeyR3cmFwcGVyLXBhZGRpbmctYm90dG9tIC8gJHN1YnNjcmlwdC1mb250LXNjYWxlfSk7XG4gIH1cblxuICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1sZWdhY3ktdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtc3RhbmRhcmQtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtZmlsbC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC1vdXRsaW5lLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG59XG5cbkBtaXhpbiBfbWF0LWZvcm0tZmllbGQtZGVuc2l0eSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRkZW5zaXR5LXNjYWxlOiBtYXQtZ2V0LWRlbnNpdHktY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtbGVnYWN5LWRlbnNpdHkoJGRlbnNpdHktc2NhbGUpO1xuICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtc3RhbmRhcmQtZGVuc2l0eSgkZGVuc2l0eS1zY2FsZSk7XG4gIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1maWxsLWRlbnNpdHkoJGRlbnNpdHktc2NhbGUpO1xuICBAaW5jbHVkZSBfbWF0LWZvcm0tZmllbGQtb3V0bGluZS1kZW5zaXR5KCRkZW5zaXR5LXNjYWxlKTtcbn1cblxuQG1peGluIG1hdC1mb3JtLWZpZWxkLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtZm9ybS1maWVsZCcpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC1mb3JtLWZpZWxkLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtZm9ybS1maWVsZC1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cblxuXG4kbWF0LXRyZWUtbm9kZS1oZWlnaHQ6IDQ4cHggIWRlZmF1bHQ7XG4vLyBNaW5pbXVtIGhlaWdodCBmb3IgdHJlZSBub2RlcyBpbiBoaWdoZXN0IGRlbnNpdHkgaXMgZGlmZmljdWx0IHRvIGRldGVybWluZSBhc1xuLy8gZGV2ZWxvcGVycyBjYW4gZGlzcGxheSBhcmJpdHJhcnkgY29udGVudC4gV2UgdXNlIGEgbWluaW11bSBoZWlnaHQgd2hpY2ggZW5zdXJlc1xuLy8gdGhhdCBjb21tb24gY29udGVudCBwbGFjZWQgaW4gdHJlZSBub2RlcyBkb2VzIG5vdCBleGNlZWQgKGUuZy4gaWNvbnMsIGNoZWNrYm94ZXMpLlxuJG1hdC10cmVlLW5vZGUtbWluaW11bS1oZWlnaHQ6IDI0cHggIWRlZmF1bHQ7XG4kbWF0LXRyZWUtbm9kZS1tYXhpbXVtLWhlaWdodDogJG1hdC10cmVlLW5vZGUtaGVpZ2h0ICFkZWZhdWx0O1xuXG4kbWF0LXRyZWUtZGVuc2l0eS1jb25maWc6IChcbiAgaGVpZ2h0OiAoXG4gICAgZGVmYXVsdDogJG1hdC10cmVlLW5vZGUtaGVpZ2h0LFxuICAgIG1heGltdW06ICRtYXQtdHJlZS1ub2RlLW1heGltdW0taGVpZ2h0LFxuICAgIG1pbmltdW06ICRtYXQtdHJlZS1ub2RlLW1pbmltdW0taGVpZ2h0LFxuICApXG4pICFkZWZhdWx0O1xuXG5cbkBtaXhpbiBtYXQtdHJlZS1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpO1xuICAkYmFja2dyb3VuZDogbWFwLWdldCgkY29uZmlnLCBiYWNrZ3JvdW5kKTtcbiAgJGZvcmVncm91bmQ6IG1hcC1nZXQoJGNvbmZpZywgZm9yZWdyb3VuZCk7XG5cbiAgLm1hdC10cmVlIHtcbiAgICBiYWNrZ3JvdW5kOiBtYXQtY29sb3IoJGJhY2tncm91bmQsICdjYXJkJyk7XG4gIH1cblxuICAubWF0LXRyZWUtbm9kZSxcbiAgLm1hdC1uZXN0ZWQtdHJlZS1ub2RlIHtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxufVxuXG5AbWl4aW4gbWF0LXRyZWUtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lKSB7XG4gICRjb25maWc6IG1hdC1nZXQtdHlwb2dyYXBoeS1jb25maWcoJGNvbmZpZy1vci10aGVtZSk7XG4gIC5tYXQtdHJlZSB7XG4gICAgZm9udC1mYW1pbHk6IG1hdC1mb250LWZhbWlseSgkY29uZmlnKTtcbiAgfVxuXG4gIC5tYXQtdHJlZS1ub2RlLFxuICAubWF0LW5lc3RlZC10cmVlLW5vZGUge1xuICAgIGZvbnQtd2VpZ2h0OiBtYXQtZm9udC13ZWlnaHQoJGNvbmZpZywgYm9keS0xKTtcbiAgICBmb250LXNpemU6IG1hdC1mb250LXNpemUoJGNvbmZpZywgYm9keS0xKTtcbiAgfVxufVxuXG5AbWl4aW4gX21hdC10cmVlLWRlbnNpdHkoJGNvbmZpZy1vci10aGVtZSkge1xuICAkZGVuc2l0eS1zY2FsZTogbWF0LWdldC1kZW5zaXR5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgJGhlaWdodDogX21hdC1kZW5zaXR5LXByb3AtdmFsdWUoJG1hdC10cmVlLWRlbnNpdHktY29uZmlnLCAkZGVuc2l0eS1zY2FsZSwgaGVpZ2h0KTtcblxuICBAaW5jbHVkZSBfbWF0LWRlbnNpdHktbGVnYWN5LWNvbXBhdGliaWxpdHkoKSB7XG4gICAgLm1hdC10cmVlLW5vZGUge1xuICAgICAgbWluLWhlaWdodDogJGhlaWdodDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIG1hdC10cmVlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgJHRoZW1lOiBfbWF0LWxlZ2FjeS1nZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gIEBpbmNsdWRlIF9tYXQtY2hlY2stZHVwbGljYXRlLXRoZW1lLXN0eWxlcygkdGhlbWUsICdtYXQtdHJlZScpIHtcbiAgICAkY29sb3I6IG1hdC1nZXQtY29sb3ItY29uZmlnKCR0aGVtZSk7XG4gICAgJGRlbnNpdHk6IG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJHRoZW1lKTtcbiAgICAkdHlwb2dyYXBoeTogbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkdGhlbWUpO1xuXG4gICAgQGlmICRjb2xvciAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIG1hdC10cmVlLWNvbG9yKCRjb2xvcik7XG4gICAgfVxuICAgIEBpZiAkZGVuc2l0eSAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdHJlZS1kZW5zaXR5KCRkZW5zaXR5KTtcbiAgICB9XG4gICAgQGlmICR0eXBvZ3JhcGh5ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgbWF0LXRyZWUtdHlwb2dyYXBoeSgkdHlwb2dyYXBoeSk7XG4gICAgfVxuICB9XG59XG5cblxuXG5cbi8vIEluY2x1ZGVzIGFsbCBvZiB0aGUgdHlwb2dyYXBoaWMgc3R5bGVzLlxuQG1peGluIGFuZ3VsYXItbWF0ZXJpYWwtdHlwb2dyYXBoeSgkY29uZmlnLW9yLXRoZW1lOiBudWxsKSB7XG4gICRjb25maWc6IGlmKF9tYXQtaXMtdGhlbWUtb2JqZWN0KCRjb25maWctb3ItdGhlbWUpLFxuICAgICAgbWF0LWdldC10eXBvZ3JhcGh5LWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKSwgJGNvbmZpZy1vci10aGVtZSk7XG5cbiAgLy8gSWYgbm8gYWN0dWFsIGNvbG9yIGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gc3BlY2lmaWVkLCBjcmVhdGUgYSBkZWZhdWx0IG9uZS5cbiAgQGlmIG5vdCAkY29uZmlnIHtcbiAgICAkY29uZmlnOiBtYXQtdHlwb2dyYXBoeS1jb25maWcoKTtcbiAgfVxuXG4gIC8vIFRPRE86IENPTVAtMzA5OiBEbyBub3QgdXNlIGluZGl2aWR1YWwgbWl4aW5zLiBJbnN0ZWFkLCB1c2UgdGhlIGFsbC10aGVtZSBtaXhpbiBhbmQgb25seVxuICAvLyBzcGVjaWZ5IGEgYHR5cG9ncmFwaHlgIGNvbmZpZyB3aGlsZSBzZXR0aW5nIGBjb2xvcmAgYW5kIGBkZW5zaXR5YCB0byBgbnVsbGAuIFRoaXMgaXMgY3VycmVudGx5XG4gIC8vIG5vdCBwb3NzaWJsZSBhcyBpdCB3b3VsZCBpbnRyb2R1Y2UgYSBjaXJjdWxhciBkZXBlbmRlbmN5IGZvciB0eXBvZ3JhcGh5IGJlY2F1c2UgdGhlIGBtYXQtY29yZWBcbiAgLy8gbWl4aW4gdGhhdCBpcyB0cmFuc2l0aXZlbHkgbG9hZGVkIGJ5IHRoZSBgYWxsLXRoZW1lYCBmaWxlLCBpbXBvcnRzIGBhbGwtdHlwb2dyYXBoeWAgd2hpY2hcbiAgLy8gd291bGQgdGhlbiBsb2FkIGBhbGwtdGhlbWVgIGFnYWluLiBUaGlzIHVsdGltYXRlbHkgcmVzdWx0cyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG5cbiAgQGluY2x1ZGUgbWF0LWJhZGdlLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1iYXNlLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1hdXRvY29tcGxldGUtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWJvdHRvbS1zaGVldC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtYnV0dG9uLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1idXR0b24tdG9nZ2xlLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1jYXJkLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1jaGVja2JveC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtY2hpcHMtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWRpdmlkZXItdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXRhYmxlLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1kYXRlcGlja2VyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1kaWFsb2ctdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LWV4cGFuc2lvbi1wYW5lbC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZm9ybS1maWVsZC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtZ3JpZC1saXN0LXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1pY29uLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1pbnB1dC10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtbWVudS10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtcGFnaW5hdG9yLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1wcm9ncmVzcy1iYXItdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXByb2dyZXNzLXNwaW5uZXItdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXJhZGlvLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1zZWxlY3QtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXNpZGVuYXYtdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXNsaWRlLXRvZ2dsZS10eXBvZ3JhcGh5KCRjb25maWcpO1xuICBAaW5jbHVkZSBtYXQtc2xpZGVyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1zdGVwcGVyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1zb3J0LXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC10YWJzLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC10b29sYmFyLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC10b29sdGlwLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1saXN0LXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1vcHRpb24tdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LW9wdGdyb3VwLXR5cG9ncmFwaHkoJGNvbmZpZyk7XG4gIEBpbmNsdWRlIG1hdC1zbmFjay1iYXItdHlwb2dyYXBoeSgkY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXRyZWUtdHlwb2dyYXBoeSgkY29uZmlnKTtcbn1cblxuXG4vLyBNaXhpbiB0aGF0IHJlbmRlcnMgYWxsIG9mIHRoZSBjb3JlIHN0eWxlcyB0aGF0IGFyZSBub3QgdGhlbWUtZGVwZW5kZW50LlxuQG1peGluIG1hdC1jb3JlKCR0eXBvZ3JhcGh5LWNvbmZpZzogbnVsbCkge1xuICBAaW5jbHVkZSBhbmd1bGFyLW1hdGVyaWFsLXR5cG9ncmFwaHkoJHR5cG9ncmFwaHktY29uZmlnKTtcbiAgQGluY2x1ZGUgbWF0LXJpcHBsZSgpO1xuICBAaW5jbHVkZSBjZGstYTExeSgpO1xuICBAaW5jbHVkZSBjZGstb3ZlcmxheSgpO1xuICBAaW5jbHVkZSBjZGstdGV4dC1maWVsZCgpO1xuXG4gIEBpbmNsdWRlIF9tYXQtc3Ryb25nLWZvY3VzLWluZGljYXRvcnMtcG9zaXRpb25pbmcoKTtcbiAgQGluY2x1ZGUgX21hdC1tZGMtY29yZSgpO1xufVxuXG5AbWl4aW4gbWF0LWNvcmUtY29sb3IoJGNvbmZpZy1vci10aGVtZSkge1xuICAkY29uZmlnOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkY29uZmlnLW9yLXRoZW1lKTtcbiAgLy8gV3JhcHBlciBlbGVtZW50IHRoYXQgcHJvdmlkZXMgdGhlIHRoZW1lIGJhY2tncm91bmQgd2hlbiB0aGUgdXNlcidzIGNvbnRlbnQgaXNuJ3RcbiAgLy8gaW5zaWRlIG9mIGEgYG1hdC1zaWRlbmF2LWNvbnRhaW5lcmAuIE5vdGUgdGhhdCB3ZSBuZWVkIHRvIGV4Y2x1ZGUgdGhlIGFtcGVyc2FuZFxuICAvLyBzZWxlY3RvciBpbiBjYXNlIHRoZSBtaXhpbiBpcyBpbmNsdWRlZCBhdCB0aGUgdG9wIGxldmVsLlxuICAubWF0LWFwcC1iYWNrZ3JvdW5kI3tpZigmLCAnLCAmLm1hdC1hcHAtYmFja2dyb3VuZCcsICcnKX0ge1xuICAgICRiYWNrZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGJhY2tncm91bmQpO1xuICAgICRmb3JlZ3JvdW5kOiBtYXAtZ2V0KCRjb25maWcsIGZvcmVncm91bmQpO1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWF0LWNvbG9yKCRiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kKTtcbiAgICBjb2xvcjogbWF0LWNvbG9yKCRmb3JlZ3JvdW5kLCB0ZXh0KTtcbiAgfVxuXG4gIC8vIFByb3ZpZGVzIGV4dGVybmFsIENTUyBjbGFzc2VzIGZvciBlYWNoIGVsZXZhdGlvbiB2YWx1ZS4gRWFjaCBDU1MgY2xhc3MgaXMgZm9ybWF0dGVkIGFzXG4gIC8vIGBtYXQtZWxldmF0aW9uLXokelZhbHVlYCB3aGVyZSBgJHpWYWx1ZWAgY29ycmVzcG9uZHMgdG8gdGhlIHotc3BhY2UgdG8gd2hpY2ggdGhlIGVsZW1lbnQgaXNcbiAgLy8gZWxldmF0ZWQuXG4gIEBmb3IgJHpWYWx1ZSBmcm9tIDAgdGhyb3VnaCAyNCB7XG4gICAgLiN7JF9tYXQtZWxldmF0aW9uLXByZWZpeH0jeyR6VmFsdWV9IHtcbiAgICAgIEBpbmNsdWRlIF9tYXQtdGhlbWUtZWxldmF0aW9uKCR6VmFsdWUsICRjb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIC8vIE1hcmtlciB0aGF0IGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHVzZXIgaGFzIGFkZGVkIGEgdGhlbWUgdG8gdGhlaXIgcGFnZS5cbiAgQGF0LXJvb3Qge1xuICAgIC5tYXQtdGhlbWUtbG9hZGVkLW1hcmtlciB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxufVxuXG4vLyBNaXhpbiB0aGF0IHJlbmRlcnMgYWxsIG9mIHRoZSBjb3JlIHN0eWxlcyB0aGF0IGRlcGVuZCBvbiB0aGUgdGhlbWUuXG5AbWl4aW4gbWF0LWNvcmUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZykge1xuICAkdGhlbWU6IF9tYXQtbGVnYWN5LWdldC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgLy8gV3JhcCB0aGUgc3ViLXRoZW1lIGluY2x1ZGVzIGluIHRoZSBkdXBsaWNhdGUgdGhlbWUgc3R5bGVzIG1peGluLiBUaGlzIGVuc3VyZXMgdGhhdFxuICAvLyB0aGVyZSB3b24ndCBiZSBtdWx0aXBsZSB3YXJuaW5ncy4gZS5nLiBpZiBgbWF0LWNvcmUtdGhlbWVgIHJlcG9ydHMgYSB3YXJuaW5nLCB0aGVuXG4gIC8vIHRoZSBpbXBvcnRlZCB0aGVtZXMgKHN1Y2ggYXMgYG1hdC1yaXBwbGUtdGhlbWVgKSBzaG91bGQgbm90IHJlcG9ydCBhZ2Fpbi5cbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZSwgJ21hdC1jb3JlJykge1xuICAgIEBpbmNsdWRlIG1hdC1yaXBwbGUtdGhlbWUoJHRoZW1lKTtcbiAgICBAaW5jbHVkZSBtYXQtb3B0aW9uLXRoZW1lKCR0aGVtZSk7XG4gICAgQGluY2x1ZGUgbWF0LW9wdGdyb3VwLXRoZW1lKCR0aGVtZSk7XG4gICAgQGluY2x1ZGUgbWF0LXBzZXVkby1jaGVja2JveC10aGVtZSgkdGhlbWUpO1xuXG4gICAgJGNvbG9yOiBtYXQtZ2V0LWNvbG9yLWNvbmZpZygkdGhlbWUpO1xuICAgIEBpZiAkY29sb3IgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSBtYXQtY29yZS1jb2xvcigkY29sb3IpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBNaXhpbiB0aGF0IHJlbmRlcnMgYWxsIG9mIHRoZSBjb3JlIE1EQyBzdHlsZXMuIFByaXZhdGUgbWl4aW4gaW5jbHVkZWQgd2l0aCBgbWF0LWNvcmVgLlxuQG1peGluIF9tYXQtbWRjLWNvcmUoKSB7XG4gIEBpbmNsdWRlIF9tYXQtbWRjLXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLXBvc2l0aW9uaW5nKCk7XG59XG5cbi8vIE1peGluIHRoYXQgZW5zdXJlcyBmb2N1cyBpbmRpY2F0b3IgaG9zdCBlbGVtZW50cyBhcmUgcG9zaXRpb25lZCBzbyB0aGF0IHRoZSBmb2N1cyBpbmRpY2F0b3Jcbi8vIHBzZXVkbyBlbGVtZW50IHdpdGhpbiBpcyBwb3NpdGlvbmVkIHJlbGF0aXZlIHRvIHRoZSBob3N0LiBQcml2YXRlIG1peGluIGluY2x1ZGVkIHdpdGhpblxuLy8gYF9tYXQtbWRjLWNvcmVgLlxuQG1peGluIF9tYXQtbWRjLXN0cm9uZy1mb2N1cy1pbmRpY2F0b3JzLXBvc2l0aW9uaW5nKCkge1xuICAubWF0LW1kYy1mb2N1cy1pbmRpY2F0b3Ige1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vLyBDcmVhdGUgYSB0aGVtZS5cbkBtaXhpbiBhbmd1bGFyLW1hdGVyaWFsLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpIHtcbiAgQGluY2x1ZGUgX21hdC1jaGVjay1kdXBsaWNhdGUtdGhlbWUtc3R5bGVzKCR0aGVtZS1vci1jb2xvci1jb25maWcsICdhbmd1bGFyLW1hdGVyaWFsLXRoZW1lJykge1xuICAgIEBpbmNsdWRlIG1hdC1jb3JlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1hdXRvY29tcGxldGUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWJhZGdlLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1ib3R0b20tc2hlZXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWJ1dHRvbi10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtYnV0dG9uLXRvZ2dsZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtY2FyZC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtY2hlY2tib3gtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWNoaXBzLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC10YWJsZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtZGF0ZXBpY2tlci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtZGlhbG9nLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1kaXZpZGVyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1leHBhbnNpb24tcGFuZWwtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWZvcm0tZmllbGQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWdyaWQtbGlzdC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtaWNvbi10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtaW5wdXQtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LWxpc3QtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LW1lbnUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXBhZ2luYXRvci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtcHJvZ3Jlc3MtYmFyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1wcm9ncmVzcy1zcGlubmVyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1yYWRpby10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtc2VsZWN0LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1zaWRlbmF2LXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICAgIEBpbmNsdWRlIG1hdC1zbGlkZS10b2dnbGUtdGhlbWUoJHRoZW1lLW9yLWNvbG9yLWNvbmZpZyk7XG4gICAgQGluY2x1ZGUgbWF0LXNsaWRlci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtc3RlcHBlci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtc29ydC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtdGFicy10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtdG9vbGJhci10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtdG9vbHRpcC10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtdHJlZS10aGVtZSgkdGhlbWUtb3ItY29sb3ItY29uZmlnKTtcbiAgICBAaW5jbHVkZSBtYXQtc25hY2stYmFyLXRoZW1lKCR0aGVtZS1vci1jb2xvci1jb25maWcpO1xuICB9XG59XG5cblxuLy8gSW5jbHVkZXMgYWxsIG9mIHRoZSBjb2xvciBzdHlsZXMuXG5AbWl4aW4gYW5ndWxhci1tYXRlcmlhbC1jb2xvcigkY29uZmlnLW9yLXRoZW1lKSB7XG4gIC8vIEluIGNhc2UgYSB0aGVtZSBvYmplY3QgaGFzIGJlZW4gcGFzc2VkIGluc3RlYWQgb2YgYSBjb25maWd1cmF0aW9uIGZvclxuICAvLyB0aGUgY29sb3Igc3lzdGVtLCBleHRyYWN0IHRoZSBjb2xvciBjb25maWcgZnJvbSB0aGUgdGhlbWUgb2JqZWN0LlxuICAkY29uZmlnOiBpZihfbWF0LWlzLXRoZW1lLW9iamVjdCgkY29uZmlnLW9yLXRoZW1lKSxcbiAgICAgIG1hdC1nZXQtY29sb3ItY29uZmlnKCRjb25maWctb3ItdGhlbWUpLCAkY29uZmlnLW9yLXRoZW1lKTtcblxuICBAaWYgJGNvbmZpZyA9PSBudWxsIHtcbiAgICBAZXJyb3IgJ05vIGNvbG9yIGNvbmZpZ3VyYXRpb24gc3BlY2lmaWVkLic7XG4gIH1cblxuICBAaW5jbHVkZSBhbmd1bGFyLW1hdGVyaWFsLXRoZW1lKChcbiAgICBjb2xvcjogJGNvbmZpZyxcbiAgICB0eXBvZ3JhcGh5OiBudWxsLFxuICAgIGRlbnNpdHk6IG51bGwsXG4gICkpO1xufVxuXG5cblxuLy8gSW5jbHVkZXMgYWxsIG9mIHRoZSBkZW5zaXR5IHN0eWxlcy5cbkBtaXhpbiBfYW5ndWxhci1tYXRlcmlhbC1kZW5zaXR5KCRjb25maWctb3ItdGhlbWUpIHtcbiAgLy8gSW4gY2FzZSBhIHRoZW1lIG9iamVjdCBoYXMgYmVlbiBwYXNzZWQgaW5zdGVhZCBvZiBhIGNvbmZpZ3VyYXRpb24gZm9yXG4gIC8vIHRoZSBkZW5zaXR5IHN5c3RlbSwgZXh0cmFjdCB0aGUgZGVuc2l0eSBjb25maWcgZnJvbSB0aGUgdGhlbWUgb2JqZWN0LlxuICAkY29uZmlnOiBpZihfbWF0LWlzLXRoZW1lLW9iamVjdCgkY29uZmlnLW9yLXRoZW1lKSxcbiAgICAgIG1hdC1nZXQtZGVuc2l0eS1jb25maWcoJGNvbmZpZy1vci10aGVtZSksICRjb25maWctb3ItdGhlbWUpO1xuXG4gIEBpZiAkY29uZmlnID09IG51bGwge1xuICAgIEBlcnJvciAnTm8gZGVuc2l0eSBjb25maWd1cmF0aW9uIHNwZWNpZmllZC4nO1xuICB9XG5cbiAgQGluY2x1ZGUgYW5ndWxhci1tYXRlcmlhbC10aGVtZSgoXG4gICAgY29sb3I6IG51bGwsXG4gICAgdHlwb2dyYXBoeTogbnVsbCxcbiAgICBkZW5zaXR5OiAkY29uZmlnLFxuICApKTtcbn1cblxuXG5cbiIsIlxuQGltcG9ydCBcInZhcmlhYmxlc1wiO1xuIFxuQG1peGluIGJvcmRlci1yYWRpdXMgKCRyYWRpdXMpIHtcblx0LXdlYmtpdC1ib3JkZXItcmFkaXVzOiAkcmFkaXVzICFpbXBvcnRhbnQ7XG5cdC1tb3otYm9yZGVyLXJhZGl1czogJHJhZGl1cyAhaW1wb3J0YW50O1xuXHRib3JkZXItcmFkaXVzOiAkcmFkaXVzICFpbXBvcnRhbnQ7XG59XG5cbkBtaXhpbiBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzICgkcmFkaXVzKSB7XG4gIC13ZWJraXQtYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHJhZGl1cyAhaW1wb3J0YW50O1xuICAtbW96LWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRyYWRpdXMgIWltcG9ydGFudDtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHJhZGl1cyAhaW1wb3J0YW50O1xufVxuXG5AbWl4aW4gb3BhY2l0eSAoJHZhbHVlKSB7XG4gIG9wYWNpdHk6ICR2YWx1ZTtcbiAgLW1vei1vcGFjaXR5OiAkdmFsdWU7XG4gIC13ZWJraXQtb3BhY2l0eTogJHZhbHVlO1xufVxuXG5AbWl4aW4gYm94LXNoYWRvdyAoJHJ1bGVzLi4uKSB7XG4gIGJveC1zaGFkb3c6ICRydWxlcztcbiAgLW1vei1ib3gtc2hhZG93OiAkcnVsZXM7XG4gIC13ZWJraXQtYm94LXNoYWRvdzogJHJ1bGVzO1xufVxuXG5AbWl4aW4gdGV4dC1zaGFkb3cgKCRydWxlcykge1xuICB0ZXh0LXNoYWRvdzogJHJ1bGVzO1xuICAtbW96LXRleHQtc2hhZG93OiAkcnVsZXM7XG4gIC13ZWJraXQtdGV4dC1zaGFkb3c6ICRydWxlcztcbn1cblxuQG1peGluIHRyYW5zZm9ybSAoJHJ1bGVzKSB7XG5cdC13ZWJraXQtdHJhbnNmb3JtOiAkcnVsZXMgIWltcG9ydGFudDtcblx0LW1vei10cmFuc2Zvcm06ICRydWxlcyAhaW1wb3J0YW50O1xuXHR0cmFuc2Zvcm06ICRydWxlcyAhaW1wb3J0YW50O1xufVxuXG5AbWl4aW4gdHJhbnNpdGlvbiAoJHJ1bGVzLi4uKSB7XG5cdC13ZWJraXQtdHJhbnNpdGlvbjogJHJ1bGVzO1xuXHQtbW96LXRyYW5zaXRpb246ICRydWxlcztcblx0dHJhbnNpdGlvbjogJHJ1bGVzO1xufVxuXG5AbWl4aW4gYW5pbWF0aW9uLWRlbGF5ICgkdmFsdWUpIHtcbiAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6ICR2YWx1ZTtcbiAgLW1vei1hbmltYXRpb24tZGVsYXk6ICR2YWx1ZTtcbiAgYW5pbWF0aW9uLWRlbGF5OiAkdmFsdWU7XG59XG5cbkBtaXhpbiBib3gtc2l6aW5nICgkcnVsZXMuLi4pIHtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiAkcnVsZXM7XG4gIC1tb3otYm94LXNpemluZzogJHJ1bGVzO1xuICBib3gtc2l6aW5nOiAkcnVsZXM7XG59XG5cbkBtaXhpbiBhcHBlYXJhbmNlICgkcnVsZXMuLi4pIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiAkcnVsZXM7XG4gIC1tb3otYXBwZWFyYW5jZTogJHJ1bGVzO1xufVxuXG5AbWl4aW4gZGVzZWxlY3QgKCkge1xuICAtbW96LXVzZXItc2VsZWN0OiAtbW96LW5vbmU7XG5cdC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcblx0LXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcblx0LW8tdXNlci1zZWxlY3Q6IG5vbmU7XG5cdHVzZXItc2VsZWN0OiBub25lO1xufVxuXG5AbWl4aW4gdmlzaWJpbGl0eSAoJHJ1bGVzKSB7XG4gIHZpc2liaWxpdHk6ICRydWxlcztcbn1cblxuQG1peGluIG5vLW1wICgpIHtcbiAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcbn1cblxuQG1peGluIGNpcmNsZXMoJHIsICRiZzpudWxsLCAkdGM6bnVsbCkge1xuICB3aWR0aDogJHI7XG4gIGhlaWdodDogJHI7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO1xuICBhbGlnbi1pdGVtczpjZW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6ICRiZztcbiAgY29sb3I6ICR0YztcbiAgQGluY2x1ZGUgYm9yZGVyLXJhZGl1cygkcik7XG59XG5cbkBtaXhpbiBsaW5lYXItZ3JhZGllbnQoJGRpcmVjdGlvbiwgJGNvbG9yLXN0b3BzLi4uKSB7XG4gIC8vIERpcmVjdGlvbiBoYXMgYmVlbiBvbWl0dGVkIGFuZCBoYXBwZW5zIHRvIGJlIGEgY29sb3Itc3RvcFxuICBAaWYgaXMtZGlyZWN0aW9uKCRkaXJlY3Rpb24pID09IGZhbHNlIHtcbiAgICAkY29sb3Itc3RvcHM6ICRkaXJlY3Rpb24sICRjb2xvci1zdG9wcztcbiAgICAkZGlyZWN0aW9uOiAxODBkZWc7XG4gIH1cblxuICBiYWNrZ3JvdW5kOiBudGgobnRoKCRjb2xvci1zdG9wcywgMSksIDEpO1xuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWdhY3ktZGlyZWN0aW9uKCRkaXJlY3Rpb24pLCAkY29sb3Itc3RvcHMpO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoJGRpcmVjdGlvbiwgJGNvbG9yLXN0b3BzKTtcbn1cblxuQG1peGluIGZsaXAoJGRpcmVjdGlvbikge1xuICB0cmFuc2Zvcm0gOiByb3RhdGVZKCRkaXJlY3Rpb24pO1xufSBcbiBcbkBtaXhpbiBwbGFjZWhvbGRlciB7XG4gICY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge0Bjb250ZW50fVxuICAmOi1tb3otcGxhY2Vob2xkZXIgICAgICAgICAgIHtAY29udGVudH1cbiAgJjo6LW1vei1wbGFjZWhvbGRlciAgICAgICAgICB7QGNvbnRlbnR9XG4gICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyICAgICAge0Bjb250ZW50fSAgXG59XG5cbkBtaXhpbiBmdC1jYWxjKCRwaXhlbHMpIHtcbiAgZm9udC1zaXplOiAoICRwaXhlbHMgLyAkcmVtLWJhc2UgKSArIHJlbTtcbn1cblxuQG1peGluIGNvbmRvLWljb24tc2l6ZSgkc2l6ZSwgJGltcG9ydGFudDogZmFsc2UpIHtcbiAgd2lkdGg6ICN7KCRzaXplKSArICdweCd9IGlmKCRpbXBvcnRhbnQsICFpbXBvcnRhbnQsIG51bGwpO1xuICBoZWlnaHQ6ICN7KCRzaXplKSArICdweCd9IGlmKCRpbXBvcnRhbnQsICFpbXBvcnRhbnQsIG51bGwpO1xuICBtaW4td2lkdGg6ICN7KCRzaXplKSArICdweCd9IGlmKCRpbXBvcnRhbnQsICFpbXBvcnRhbnQsIG51bGwpO1xuICBtaW4taGVpZ2h0OiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbiAgZm9udC1zaXplOiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbiAgbGluZS1oZWlnaHQ6ICN7KCRzaXplKSArICdweCd9IGlmKCRpbXBvcnRhbnQsICFpbXBvcnRhbnQsIG51bGwpO1xuXG4gIHN2ZyB7XG4gICAgICB3aWR0aDogI3soJHNpemUpICsgJ3B4J30gaWYoJGltcG9ydGFudCwgIWltcG9ydGFudCwgbnVsbCk7XG4gICAgICBoZWlnaHQ6ICN7KCRzaXplKSArICdweCd9IGlmKCRpbXBvcnRhbnQsICFpbXBvcnRhbnQsIG51bGwpO1xuICB9XG59XG5cbkBtaXhpbiBjb25kby1idXR0b24tc2l6ZSgkc2l6ZSwgJGltcG9ydGFudDogZmFsc2UpIHtcbiAgaGVpZ2h0OiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbiAgbWluLWhlaWdodDogI3soJHNpemUpICsgJ3B4J30gaWYoJGltcG9ydGFudCwgIWltcG9ydGFudCwgbnVsbCk7XG4gIGxpbmUtaGVpZ2h0OiAjeygkc2l6ZSkgKyAncHgnfSBpZigkaW1wb3J0YW50LCAhaW1wb3J0YW50LCBudWxsKTtcbn1cblxuQG1peGluIGNvbmRvLWJyZWFrcG9pbnQoJGJyZWFrcG9pbnQpIHtcblxuICAkbWVkaWFRdWVyeTogbWFwLWdldCgkY29uZG8tYnJlYWtwb2ludHMsICRicmVha3BvaW50KTtcblxuICBAaWYgKCRtZWRpYVF1ZXJ5ICE9IG51bGwpIHtcblxuICAgICAgQG1lZGlhICN7JG1lZGlhUXVlcnl9IHtcbiAgICAgICAgICBAY29udGVudFxuICAgICAgfVxuICB9IEBlbHNlIHtcblxuICAgICAgQG1lZGlhICN7JGJyZWFrcG9pbnR9IHtcbiAgICAgICAgICBAY29udGVudFxuICAgICAgfVxuICB9XG59XG4iLCJAaW1wb3J0IFwifnNyYy9AY29uZG8vc3R5bGVzL2NvbmRvXCI7XG4udGFibGUtaGVhZGVyIHtcbiAgICAuYnV0dG9uLW5hbWUge1xuICAgICAgICBAaW5jbHVkZSBjb25kby1icmVha3BvaW50KCdsdC1sZycpIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICB9XG59Il19 */\";","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { VisitorService } from 'src/app/api/controllers/Visitor';\nimport { MatDialog } from '@angular/material/dialog';\nimport * as _ from 'underscore';\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/core/session/session.service';\n\n@Component({\n  selector: 'app-visitor-history',\n  templateUrl: './visitor-history.component.html',\n  styleUrls: ['./visitor-history.component.scss']\n})\n\nexport class VisitorHistoryComponent implements OnInit {\n  @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent;\n  columnData:any;\n  visitorList:any = [];\n  visitorSearch:string = '';\n  isVisitorDataLoaded:boolean;\n  totalItems:number;\n\n  constructor(\n    private router: Router,\n    private visitorService:VisitorService,\n    public dialog: MatDialog,\n    private sessionService:SessionService,\n    private activateRouter: ActivatedRoute\n  ) { \n  }\n\n  getPrintParams(event){\n    this.datagrid.exportdata(event, 'Visitor History');\n  }\n\n  navigateToCreate() {\n    this.router.navigate([`checkin`],{relativeTo:this.activateRouter.parent});\n  }\n\n  onGlSearchFilter(event) {\n    if(event != \"\"){\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = event;\n      let filtercondition = 'contains';\n      let filterData = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.operator = 'or';\n      filtergroup.addfilter(filter_or_operator, filterData);\n      this.datagrid.showfiltercolumnbackground(false);\n      this.columnData.forEach(item => {\n        if(item.datafield != 'Actions') {\n          this.datagrid.addfilter(item.datafield, filtergroup, true);\n        }\n      })\n      this.datagrid.applyfilters();\n    }\n    else {\n      this.datagrid.clearfilters();\n    }\n  }\n\n  getCheckOutHistoryList() {\n    this.isVisitorDataLoaded = false;\n    let apartmentParams = {\n      apartmentId: this.sessionService.apartmentId,\n    }\n  \tthis.visitorService.getVisitorsHistoryByApartmentId(apartmentParams).subscribe((res:any) => {\n      if(res.length > 0) {\n        let tableData = {\n          localdata: res.reverse(),\n          datatype: \"array\"\n        }\n        this.totalItems = tableData.localdata.length;\n        this.visitorList = new jqx.dataAdapter(tableData);\n      }\n      this.isVisitorDataLoaded = true;\n\t  });\n  }\n\n  ngOnInit() {\n    this.getCheckOutHistoryList();\n    var cellsrenderer = (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">' + value + '</div>';\n    }\n    var columnrenderer = (value) => {\n      return '<div style=\"padding: 14px\">' + value + '</div>';\n    }\n    this.columnData = [{\n      text: 'Id',\n      datafield: 'serialNo',\n      width: 80,\n      pinned: true,\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer\n    },{\n      text: 'Visitor Name',\n      datafield: 'visitorName',\n      width: 140,\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer\n    },{\n      text: 'Phone Number',\n      datafield: 'visitorPhone',\n      cellsrenderer: cellsrenderer,\n      minwidth: 100,\n      renderer: columnrenderer\n    },{\n      text: 'IN Time',\n      datafield: 'visitorInTime',\n      cellsrenderer: (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">'+ moment(value).format(\"MM/DD/YY hh:mm\") +'</div>'\n      },\n      minwidth: 160,\n      renderer: columnrenderer\n    },{\n      text: 'Out Time',\n      datafield: 'visitorOutTime',\n      cellsrenderer: (row, column, value) => {\n        if(value) {\n          return '<div class=\"jqx-custom-inner-cell\">'+ moment(value).format(\"MM/DD/YY hh:mm\") +'</div>'\n        } else {\n          return '<div class=\"jqx-custom-inner-cell\"></div>'\n        }\n      },\n      minwidth: 160,\n      renderer: columnrenderer\n    },{\n      text: 'Visit Type',\n      datafield: 'visitTypeName',\n      cellsrenderer: cellsrenderer,\n      minwidth: 80,\n      renderer: columnrenderer\n    },{\n      text: 'Tower Unit',\n      datafield: 'block_Unit',\n      cellsrenderer: cellsrenderer,\n      minwidth: 170,\n      renderer: columnrenderer \n    },{\n      text: 'Visitor category',\n      datafield: 'visitorCategoryName',\n      cellsrenderer: cellsrenderer,\n      minwidth: 150,\n      renderer: columnrenderer\n    },{\n      text: 'Type',\n      datafield: 'isDailyvendor',\n      cellsalign: 'center', \n      align: 'center',\n      cellsrenderer: (row, column, value) => {\n        let label, status, isVendor, frequentVisitor, expectedVisitorId;\n        isVendor = value;\n        frequentVisitor = this.visitorList.loadedData[row].isFrequentvisitor;\n        expectedVisitorId = this.visitorList.loadedData[row].expectedVisitorId;\n        if(isVendor) {\n          label = 'Vendor Pass';\n          status = 'orange';\n        } else if (frequentVisitor) {\n          label = 'Frequent Visitor';\n          status = 'green';\n        } else if (!isVendor && !frequentVisitor && expectedVisitorId) {\n          label = 'Expected Visitor';\n          status = 'purple';\n        } else {\n          return `<div class=\"jqx-custom-inner-cell\"></div>`\n        }\n        return `<div class=\"jqx-custom-inner-cell\">\n           <div class=\"status-badge bg-status-${status}-700\">\n             <span class=\"font-bold text-status-${status}-900 text-uppercase\">${label}</span>\n           </div>\n        </div>`\n      },\n      minwidth: 160,\n      renderer: columnrenderer,\n    },];\n  }\n}\n\n","export default \"/* Colors for the ripple elements.*/\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable-next-line material/theme-mixin-api */\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\n.condo-theme-crescent app-visitor-setup {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  .condo-theme-crescent app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  .condo-theme-crescent app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\n.condo-theme-crescent app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\n.condo-theme-crescent app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\n.condo-theme-crescent app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n.condo-theme-crescent app-visitor-setup .button-wrapper mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin: 0 8px 0 4px;\\n}\\n.condo-theme-crescent app-visitor-setup .button-wrapper mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-light app-visitor-setup {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  .condo-theme-light app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  .condo-theme-light app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\n.condo-theme-light app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\n.condo-theme-light app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\n.condo-theme-light app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n.condo-theme-light app-visitor-setup .button-wrapper mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin: 0 8px 0 4px;\\n}\\n.condo-theme-light app-visitor-setup .button-wrapper mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-orange app-visitor-setup {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  .condo-theme-orange app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  .condo-theme-orange app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\n.condo-theme-orange app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\n.condo-theme-orange app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\n.condo-theme-orange app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n.condo-theme-orange app-visitor-setup .button-wrapper mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin: 0 8px 0 4px;\\n}\\n.condo-theme-orange app-visitor-setup .button-wrapper mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-maroon app-visitor-setup {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  .condo-theme-maroon app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  .condo-theme-maroon app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\n.condo-theme-maroon app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\n.condo-theme-maroon app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\n.condo-theme-maroon app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n.condo-theme-maroon app-visitor-setup .button-wrapper mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin: 0 8px 0 4px;\\n}\\n.condo-theme-maroon app-visitor-setup .button-wrapper mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-blue app-visitor-setup {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  .condo-theme-blue app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  .condo-theme-blue app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\n.condo-theme-blue app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\n.condo-theme-blue app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\n.condo-theme-blue app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n.condo-theme-blue app-visitor-setup .button-wrapper mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin: 0 8px 0 4px;\\n}\\n.condo-theme-blue app-visitor-setup .button-wrapper mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-dark app-visitor-setup {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  .condo-theme-dark app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  .condo-theme-dark app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\n.condo-theme-dark app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\n.condo-theme-dark app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\n.condo-theme-dark app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n.condo-theme-dark app-visitor-setup .button-wrapper mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin: 0 8px 0 4px;\\n}\\n.condo-theme-dark app-visitor-setup .button-wrapper mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n.condo-theme-public app-visitor-setup {\\n  display: flex;\\n  flex: 1 1 auto;\\n}\\n@media (min-width: 576px) {\\n  .condo-theme-public app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 480px !important;\\n    width: 480px !important;\\n  }\\n}\\n@media (min-width: 0) and (max-width: 575px) {\\n  .condo-theme-public app-visitor-setup .mat-drawer-container .mat-drawer {\\n    max-width: 370px !important;\\n    width: 370px !important;\\n  }\\n}\\n.condo-theme-public app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer {\\n  padding: 30px 25px 30px 25px;\\n}\\n.condo-theme-public app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title {\\n  display: flex;\\n  margin: 0 0 30px 0;\\n}\\n.condo-theme-public app-visitor-setup .mat-drawer-container .mat-drawer .visitor-setup-drawer .title h4 {\\n  padding: 10px 0 0 0 !important;\\n}\\n.condo-theme-public app-visitor-setup .button-wrapper mat-icon {\\n  width: 14px;\\n  height: 14px;\\n  min-width: 14px;\\n  min-height: 14px;\\n  font-size: 14px;\\n  line-height: 14px;\\n  margin: 0 8px 0 4px;\\n}\\n.condo-theme-public app-visitor-setup .button-wrapper mat-icon svg {\\n  width: 14px;\\n  height: 14px;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","import { Component, OnInit, Injector, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { Subscription } from 'rxjs';\nimport { MatDrawer } from '@angular/material/sidenav';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\n\n@Component({\n  selector: 'app-visitor-setup',\n  templateUrl: './visitor-setup.component.html',\n  styleUrls: ['./visitor-setup.component.scss'],\n  encapsulation : ViewEncapsulation.None\n})\nexport class VisitorSetupComponent implements OnInit {\n  \t@ViewChild('matDrawer', {static: true}) matDrawer: MatDrawer;\n  \tvisitor:any = {};\n\tclickMode:string;\n\tisDataLoaded:boolean = false;\n\tisDrawerLoader:boolean = true;\n\tvisitorCategoryList = [];\n\tcategorySearch:string;\n\ttotalItems:number;\n\tmodalService:any;\n\tapiSubscibe:Subscription;\n\n \tconstructor(\n\t\tprivate lookupService: LookupService,\n\t\tprivate injector: Injector,\n\t\tprivate sharedService:SharedService,\n\t\tprivate sessionService:SessionService\n\t) {this.modalService = this.injector.get(ModalService)}\n\n\taddVisitorCategory() {\n\t\tthis.clickMode = 'add';\n\t\tthis.matDrawer.open();\n\t\tthis.visitor = {};\n\t}\n\n\teditVisitorCategory(item) {\n\t\tthis.clickMode = 'edit';\n\t\tthis.visitor =  {...item};\n\t\twindow.scroll({\n\t\t\ttop: 0,\n\t\t\tbehavior: 'smooth'\n\t\t});\n\t\tthis.matDrawer.open();\n\t}\n\n\tdeleteVisitorCategory(item, index){\n    \tthis.closeDrawer();\n\t\tlet params = {\n\t\t\tid:item.lookupValueId,\n\t\t\tindex:index\n\t\t}\n\t\tthis.modalService.showConfirmModal(params);\n \t}\n  \n\tcloseDrawer() {\n\t\tthis.matDrawer.close();\n\t\tthis.clickMode = '';\n\t\tthis.visitor = {};\n\t}\n\n\tsubmitVisitorCategoryForm() {\n    \tthis.isDrawerLoader = false;\n\t\tif(this.clickMode == 'add') {\n\t\t\tlet params = {\n\t\t\t\tlookupvalue: {\n\t\t\t\t\t\"apartmentId\" :  this.sessionService.apartmentId,\n\t\t\t\t\t\"lookupTypeId\": 100, // Visitor category lookup id\n\t\t\t\t\t\"lookupValueName\": this.visitor.lookupValueName,\n\t\t\t\t\t\"description\": this.visitor.description,\n\t\t\t\t\t\"isActive\": true,\n\t\t\t\t\t\"insertedBy\":parseInt(this.sessionService.userId),\n\t\t\t\t\t\"insertedOn\":_moment().toISOString(),\n\t\t\t\t\t\"updatedBy\": null,\n\t\t\t\t\t\"updatedOn\":null\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.lookupService.addLookupValue(params).subscribe((res:any) => {\n\t\t\t\tthis.isDrawerLoader = true;\n\t\t\t\tif(res.code == 200) {\n\t\t\t\t\tthis.closeDrawer();\n\t\t\t\t\tthis.sharedService.openSnackBar('Visitor Type Created Successfully', 'success');\n\t\t\t\t\tthis.getVisitorList();\n\t\t\t\t} else {\n\t\t\t\t\tthis.sharedService.openSnackBar(res.responseData.value.errorMessage,'error');\n\t\t\t\t}\n     \t\t},\n\t\t\t(error)=>{\n\t\t\t\tthis.isDrawerLoader = true;\n\t\t\t\tthis.sharedService.openSnackBar('Network Error', 'error');\n\t\t\t});\n\t\t} else {\n\t\t\tlet params = {\n\t\t\t\tlookupvalue: {\n\t\t\t\t\t\"apartmentId\" :  this.sessionService.apartmentId,\n\t\t\t\t\t\"lookupValueId\" : this.visitor.lookupValueId,\n\t\t\t\t\t\"lookupTypeId\": 100, // Visitor category lookup id\n\t\t\t\t\t\"lookupValueName\": this.visitor.lookupValueName,\n\t\t\t\t\t\"description\": this.visitor.description,\n\t\t\t\t\t\"isActive\": true,\n\t\t\t\t\t\"insertedBy\": this.visitor.insertedBy,\n\t\t\t\t\t\"insertedOn\": this.visitor.insertedOn,\n\t\t\t\t\t\"updatedBy\": parseInt(this.sessionService.userId),\n\t\t\t\t\t\"updatedOn\":_moment().toISOString()\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.lookupService.updateLookupValue(params).subscribe((res:any) => {\n\t\t\t\tthis.isDrawerLoader = true;\n\t\t\t\tif(res.message) {\n\t\t\t\t\tthis.closeDrawer();\n\t\t\t\t\tthis.getVisitorList();\n\t\t\t\t\tthis.sharedService.openSnackBar(res.message,'success');\n\t\t\t\t} else {\n\t\t\t\t\tthis.sharedService.openSnackBar(res.errorMessage,'error');\n\t\t\t\t}\n      \t\t},\n\t\t\t(error)=>{\n\t\t\t\tthis.isDrawerLoader = true;\n\t\t\t\tthis.sharedService.openSnackBar('Network Error', 'error');\n\t\t\t});\n\t\t}\n\t}\n\n\tgetVisitorList() {\n    \tthis.isDataLoaded = false;\n\t\tlet params = {\n\t\t\tLookupTypeId: 100,\n\t\t\tApartmentId: this.sessionService.apartmentId,\n\t\t}\n\t\tthis.lookupService.getLookupValueByLookupTypeId(params).subscribe((res:any) => {\n\t\t\tthis.isDataLoaded = true;\n\t\t\tthis.visitorCategoryList = res;\n      \t\tthis.totalItems = res.length;\n\t\t});\n\t}\n\n\tngOnInit() {\n\t\tthis.getVisitorList();\n\t\t//delete item\n\t\tthis.apiSubscibe = this.sharedService.unitlistdeleteindexcast.subscribe( item => {\n\t\t\tif(item != null) {\n\t\t\t\tthis.isDataLoaded = false;\n\t\t\t\tvar params = {\n\t\t\t\t\tlookupValueId: item.id,\n\t\t\t\t\tupdateUserId: parseInt(this.sessionService.userId)\n\t\t\t\t}\n\t\t\t\tthis.lookupService.deleteLookupvalue(params).subscribe((res:any) => {\n\t\t\t\t\tthis.sharedService.setUnitListDeleteIndex(null);\n\t\t\t\t\tthis.isDataLoaded = true;\n\t\t\t\t\tif(res.message) {\n\t\t\t\t\t\tthis.visitorCategoryList.splice(item.index, 1);\n\t\t\t\t\t\tthis.totalItems -= 1;\n\t\t\t\t\t\tthis.clickMode = '';   //close input box\n\t\t\t\t\t\tthis.sharedService.openSnackBar(res.message,'success');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.sharedService.openSnackBar(res.errorMessage,'error');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tngOnDestroy(){\n\t\tthis.apiSubscibe.unsubscribe();\n\t}\n\n}\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthGuard } from 'src/app/core/auth/guards/auth.guard';\n\nimport { VisitorSetupComponent } from './components/visitor-setup/visitor-setup.component';\nimport { VisitorCreateCheckinComponent } from './components/visitor-create-checkin/visitor-create-checkin.component';\nimport { ExpVisitorCreateChekinComponent } from './components/exp-visitor-create-chekin/exp-visitor-create-chekin.component';\nimport { ExpVisitorListComponent } from './components/exp-visitor-list/exp-visitor-list.component';\nimport { UserVisitorListComponent } from './components/user-visitor-list/user-visitor-list.component';\nimport { ExpUserVisitorListComponent } from './components/exp-user-visitor-list/exp-user-visitor-list.component';\nimport { CreateVendorFrquentVisitorComponent } from './components/create-vendor-frquent-visitor/create-vendor-frquent-visitor.component';\nimport { ExpVisitorConfirmComponent } from './components/exp-visitor-confirm/exp-visitor-confirm.component';\nimport { FrequentVendorListComponent } from './components/frequent-vendor-list/frequent-vendor-list.component';\nimport { CurrentlyCheckedinListComponent } from './components/currently-checkedin-list/currently-checkedin-list.component';\nimport { VisitorHistoryComponent } from './components/visitor-history/visitor-history.component';\n\nconst routes: Routes = [\n\t{ path: '', redirectTo: 'settings', pathMatch: 'full'},\n\t{ path: 'settings', component: VisitorSetupComponent, canActivate: [AuthGuard] },\n\t{ path: 'checkin', component: VisitorCreateCheckinComponent, canActivate: [AuthGuard] },\n\t{ path: ':type/:id', component: VisitorCreateCheckinComponent, canActivate: [AuthGuard] },\n\t{ path: 'expected-visitor-list', component: ExpVisitorListComponent, canActivate: [AuthGuard] },\n\t{ path: 'create-expected-visitor', component: ExpVisitorCreateChekinComponent, canActivate: [AuthGuard]  },\n\t{ path: 'confirm-expected-visitor/:id/:type', component: ExpVisitorConfirmComponent, canActivate: [AuthGuard]  },\n\t{ path: 'expected-visitor/:type/:id', component: ExpVisitorCreateChekinComponent, canActivate: [AuthGuard]  },\n\t{ path: 'checkout', component: CurrentlyCheckedinListComponent, canActivate: [AuthGuard] },\n\t{ path: 'history', component: VisitorHistoryComponent, canActivate: [AuthGuard]  },\n\t{ path: 'expected-visitor-user-checked-in', component: UserVisitorListComponent, canActivate: [AuthGuard]  },\n\t{ path: 'expected-visitor-user-history', component: UserVisitorListComponent, canActivate: [AuthGuard]  },\n\t{ path: 'expected-visitor-user-list', component: ExpUserVisitorListComponent, canActivate: [AuthGuard]  },\n\t{ path: 'frequent-visitor-list', component: FrequentVendorListComponent, canActivate: [AuthGuard]  },\n\t{ path: 'frequent-visitor-create', component: CreateVendorFrquentVisitorComponent, canActivate: [AuthGuard]  },\n\t{ path: 'vendor-pass-list', component: FrequentVendorListComponent, canActivate: [AuthGuard]  },\n\t{ path: 'vendor-pass-create', component: CreateVendorFrquentVisitorComponent, canActivate: [AuthGuard]  },\n\n\t{ path: '**', redirectTo: 'settings', pathMatch: 'full'}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class VisitorRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tbW9uL3Zpc2l0b3IvdmlzaXRvci5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-visitor',\n  templateUrl: './visitor.component.html',\n  styleUrls: ['./visitor.component.scss']\n})\nexport class VisitorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders } from '@angular/core';\n\nimport { VisitorRoutingModule } from './visitor-routing.module';\n\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { NgxQRCodeModule } from '@techiediaries/ngx-qrcode';\n\nimport { VisitorComponent } from './visitor.component';\nimport { VisitorSetupComponent } from './components/visitor-setup/visitor-setup.component';\nimport { CondoCardModule } from 'src/app/modules/ui/card/card.module';\nimport { VisitorCreateCheckinComponent } from './components/visitor-create-checkin/visitor-create-checkin.component';\nimport { ExpVisitorCreateChekinComponent } from './components/exp-visitor-create-chekin/exp-visitor-create-chekin.component';\nimport { ExpVisitorListComponent } from './components/exp-visitor-list/exp-visitor-list.component';\nimport { UserVisitorListComponent } from './components/user-visitor-list/user-visitor-list.component';\nimport { ListModule } from 'src/app/modules/ui/list/list.module';\nimport { SelectModule } from 'src/app/modules/ui/select/select.module';\nimport { NgxIntlTelInputModule } from 'ngx-intl-tel-input';\nimport { ExpUserVisitorListComponent } from './components/exp-user-visitor-list/exp-user-visitor-list.component';\nimport { CondoMessageModule } from 'src/app/modules/ui/message/message.module';\nimport { CreateVendorFrquentVisitorComponent } from './components/create-vendor-frquent-visitor/create-vendor-frquent-visitor.component';\nimport { ExpVisitorConfirmComponent } from './components/exp-visitor-confirm/exp-visitor-confirm.component';\nimport { FrequentVendorListComponent } from './components/frequent-vendor-list/frequent-vendor-list.component';\nimport { CurrentlyCheckedinListComponent } from './components/currently-checkedin-list/currently-checkedin-list.component';\nimport { VisitorHistoryComponent } from './components/visitor-history/visitor-history.component';\n@NgModule({\n  declarations: [\n\t  VisitorComponent,\n\t  VisitorSetupComponent,\n    VisitorCreateCheckinComponent,\n    ExpVisitorCreateChekinComponent,\n    ExpVisitorListComponent,\n    UserVisitorListComponent,\n    ExpUserVisitorListComponent,\n    CreateVendorFrquentVisitorComponent,\n    ExpVisitorConfirmComponent,\n    FrequentVendorListComponent,\n    CurrentlyCheckedinListComponent,\n    VisitorHistoryComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    NgxQRCodeModule,\n    VisitorRoutingModule,\n    CondoCardModule,\n    SelectModule,\n    ListModule,\n    NgxIntlTelInputModule,\n    CondoMessageModule\n  ],\n  bootstrap: [ VisitorComponent ]\n})\nexport class VisitorModule { }\n\ndeclare module \"@angular/core\" {\n  interface ModuleWithProviders<T = any> {\n      ngModule: Type<T>;\n      providers?: Provider[];\n  }\n}"]}