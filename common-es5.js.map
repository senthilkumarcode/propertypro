{"version":3,"sources":["webpack:///node_modules/ngx-cookie-service/__ivy_ngcc__/fesm2015/ngx-cookie-service.js"],"names":["CookieService","document","platformId","documentIsAccessible","name","encodeURIComponent","regExp","getCookieRegExp","exists","test","cookie","check","result","exec","safeDecodeURIComponent","cookies","split","forEach","currentCookie","cookieName","cookieValue","replace","value","expires","path","domain","secure","sameSite","cookieString","dateExpires","Date","getTime","toUTCString","console","warn","set","getAll","hasOwnProperty","escapedName","RegExp","encodedURIComponent","decodeURIComponent","_a","ɵfac","CookieService_Factory","t","ctorParameters","type","undefined","decorators","args","ɵprov","factory","token","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,UAAIA,aAAa;AACb,gCACA;AACA;AACA;AACA;AACAC,gBALA,EAMA;AACAC,kBAPA,EAOY;AAAA;;AACR,eAAKD,QAAL,GAAgBA,QAAhB;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,oBAAL,GAA4B,0EAAkB,KAAKD,UAAvB,CAA5B;AACH;AACD;;;;;;AAba;AAAA;AAAA,gCAiBPE,IAjBO,EAiBD;AACR,gBAAI,CAAC,KAAKD,oBAAV,EAAgC;AAC5B,qBAAO,KAAP;AACH;;AACDC,gBAAI,GAAGC,kBAAkB,CAACD,IAAD,CAAzB;AACA,gBAAME,MAAM,GAAG,KAAKC,eAAL,CAAqBH,IAArB,CAAf;AACA,gBAAMI,MAAM,GAAGF,MAAM,CAACG,IAAP,CAAY,KAAKR,QAAL,CAAcS,MAA1B,CAAf;AACA,mBAAOF,MAAP;AACH;AACD;;;;;AA1Ba;AAAA;AAAA,8BA8BTJ,IA9BS,EA8BH;AACN,gBAAI,KAAKD,oBAAL,IAA6B,KAAKQ,KAAL,CAAWP,IAAX,CAAjC,EAAmD;AAC/CA,kBAAI,GAAGC,kBAAkB,CAACD,IAAD,CAAzB;AACA,kBAAME,MAAM,GAAG,KAAKC,eAAL,CAAqBH,IAArB,CAAf;AACA,kBAAMQ,MAAM,GAAGN,MAAM,CAACO,IAAP,CAAY,KAAKZ,QAAL,CAAcS,MAA1B,CAAf;AACA,qBAAO,KAAKI,sBAAL,CAA4BF,MAAM,CAAC,CAAD,CAAlC,CAAP;AACH,aALD,MAMK;AACD,qBAAO,EAAP;AACH;AACJ;AACD;;;;AAzCa;AAAA;AAAA,mCA4CJ;AAAA;;AACL,gBAAI,CAAC,KAAKT,oBAAV,EAAgC;AAC5B,qBAAO,EAAP;AACH;;AACD,gBAAMY,OAAO,GAAG,EAAhB;AACA,gBAAMd,QAAQ,GAAG,KAAKA,QAAtB;;AACA,gBAAIA,QAAQ,CAACS,MAAT,IAAmBT,QAAQ,CAACS,MAAT,KAAoB,EAA3C,EAA+C;AAC3CT,sBAAQ,CAACS,MAAT,CAAgBM,KAAhB,CAAsB,GAAtB,EAA2BC,OAA3B,CAAmC,UAACC,aAAD,EAAmB;AAAA,2CAChBA,aAAa,CAACF,KAAd,CAAoB,GAApB,CADgB;AAAA;AAAA,oBAC3CG,UAD2C;AAAA,oBAC/BC,WAD+B;;AAElDL,uBAAO,CAAC,KAAI,CAACD,sBAAL,CAA4BK,UAAU,CAACE,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAA5B,CAAD,CAAP,GAAqE,KAAI,CAACP,sBAAL,CAA4BM,WAA5B,CAArE;AACH,eAHD;AAIH;;AACD,mBAAOL,OAAP;AACH;AACD;;;;;;;;;;AA1Da;AAAA;AAAA,8BAmETX,IAnES,EAmEHkB,KAnEG,EAmEIC,OAnEJ,EAmEaC,IAnEb,EAmEmBC,MAnEnB,EAmE2BC,MAnE3B,EAmEqD;AAAA,gBAAlBC,QAAkB,uEAAP,KAAO;;AAC9D,gBAAI,CAAC,KAAKxB,oBAAV,EAAgC;AAC5B;AACH;;AACD,gBAAIyB,YAAY,GAAGvB,kBAAkB,CAACD,IAAD,CAAlB,GAA2B,GAA3B,GAAiCC,kBAAkB,CAACiB,KAAD,CAAnD,GAA6D,GAAhF;;AACA,gBAAIC,OAAJ,EAAa;AACT,kBAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,oBAAMM,WAAW,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBR,OAAO,GAAG,IAAV,GAAiB,EAAjB,GAAsB,EAAtB,GAA2B,EAA3D,CAApB;AACAK,4BAAY,IAAI,aAAaC,WAAW,CAACG,WAAZ,EAAb,GAAyC,GAAzD;AACH,eAHD,MAIK;AACDJ,4BAAY,IAAI,aAAaL,OAAO,CAACS,WAAR,EAAb,GAAqC,GAArD;AACH;AACJ;;AACD,gBAAIR,IAAJ,EAAU;AACNI,0BAAY,IAAI,UAAUJ,IAAV,GAAiB,GAAjC;AACH;;AACD,gBAAIC,MAAJ,EAAY;AACRG,0BAAY,IAAI,YAAYH,MAAZ,GAAqB,GAArC;AACH;;AACD,gBAAIC,MAAM,KAAK,KAAX,IAAoBC,QAAQ,KAAK,MAArC,EAA6C;AACzCD,oBAAM,GAAG,IAAT;AACAO,qBAAO,CAACC,IAAR,CAAa,sCAA+B9B,IAA/B,gKAAb;AAEH;;AACD,gBAAIsB,MAAJ,EAAY;AACRE,0BAAY,IAAI,SAAhB;AACH;;AACDA,wBAAY,IAAI,cAAcD,QAAd,GAAyB,GAAzC;AACA,iBAAK1B,QAAL,CAAcS,MAAd,GAAuBkB,YAAvB;AACH;AACD;;;;;;AAlGa;AAAA;AAAA,kCAuGNxB,IAvGM,EAuGAoB,IAvGA,EAuGMC,MAvGN,EAuGcC,MAvGd,EAuGwC;AAAA,gBAAlBC,QAAkB,uEAAP,KAAO;;AACjD,gBAAI,CAAC,KAAKxB,oBAAV,EAAgC;AAC5B;AACH;;AACD,iBAAKgC,GAAL,CAAS/B,IAAT,EAAe,EAAf,EAAmB,IAAI0B,IAAJ,CAAS,+BAAT,CAAnB,EAA8DN,IAA9D,EAAoEC,MAApE,EAA4EC,MAA5E,EAAoFC,QAApF;AACH;AACD;;;;;AA7Ga;AAAA;AAAA,oCAiHHH,IAjHG,EAiHGC,MAjHH,EAiHWC,MAjHX,EAiHqC;AAAA,gBAAlBC,QAAkB,uEAAP,KAAO;;AAC9C,gBAAI,CAAC,KAAKxB,oBAAV,EAAgC;AAC5B;AACH;;AACD,gBAAMY,OAAO,GAAG,KAAKqB,MAAL,EAAhB;;AACA,iBAAK,IAAMjB,UAAX,IAAyBJ,OAAzB,EAAkC;AAC9B,kBAAIA,OAAO,CAACsB,cAAR,CAAuBlB,UAAvB,CAAJ,EAAwC;AACpC,+BAAYA,UAAZ,EAAwBK,IAAxB,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8CC,QAA9C;AACH;AACJ;AACJ;AACD;;;;;AA5Ha;AAAA;AAAA,0CAgIGvB,IAhIH,EAgIS;AAClB,gBAAMkC,WAAW,GAAGlC,IAAI,CAACiB,OAAL,CAAa,wCAAb,EAAuD,MAAvD,CAApB;AACA,mBAAO,IAAIkB,MAAJ,CAAW,SAASD,WAAT,GAAuB,QAAvB,GAAkCA,WAAlC,GAAgD,gBAA3D,EAA6E,GAA7E,CAAP;AACH;AAnIY;AAAA;AAAA,iDAoIUE,mBApIV,EAoI+B;AACxC,gBAAI;AACA,qBAAOC,kBAAkB,CAACD,mBAAD,CAAzB;AACH,aAFD,CAGA,OAAOE,EAAP,EAAW;AACP;AACA,qBAAOF,mBAAP;AACH;AACJ;AA5IY;;AAAA;AAAA,SAAjB;;AA8IAxC,mBAAa,CAAC2C,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,eAAO,KAAKA,CAAC,IAAI7C,aAAV,EAAyB,uDAAgB,wDAAhB,CAAzB,EAAoD,uDAAgB,yDAAhB,CAApD,CAAP;AAA2F,OAApJ;;AACAA,mBAAa,CAAC8C,cAAd,GAA+B;AAAA,eAAM,CACjC;AAAEC,cAAI,EAAEC,SAAR;AAAmBC,oBAAU,EAAE,CAAC;AAAEF,gBAAI,EAAE,oDAAR;AAAgBG,gBAAI,EAAE,CAAC,wDAAD;AAAtB,WAAD;AAA/B,SADiC,EAEjC;AAAEH,cAAI,EAAE,4DAAR;AAAwBE,oBAAU,EAAE,CAAC;AAAEF,gBAAI,EAAE,oDAAR;AAAgBG,gBAAI,EAAE,CAAC,yDAAD;AAAtB,WAAD;AAApC,SAFiC,CAAN;AAAA,OAA/B;;AAIAlD,mBAAa,CAACmD,KAAd,GAAsB,yEAAmB;AAAEC,eAAO,EAAE,SAASR,qBAAT,GAAiC;AAAE,iBAAO,IAAI5C,aAAJ,CAAkB,+DAAS,wDAAT,CAAlB,EAAsC,+DAAS,yDAAT,CAAtC,CAAP;AAAsE,SAApH;AAAsHqD,aAAK,EAAErD,aAA7H;AAA4IsD,kBAAU,EAAE;AAAxJ,OAAnB,CAAtB;AACAtD,mBAAa,GAAG,yDAAW,CAAE,sDAAQ,CAAR,EAAW,6DAAO,wDAAP,CAAX,CAAF,EACvB,sDAAQ,CAAR,EAAW,6DAAO,yDAAP,CAAX,CADuB,CAAX,EAEbA,aAFa,CAAhB;AAGA;;AAAc,OAAC,YAAY;AAAE,wEAAyBA,aAAzB,EAAwC,CAAC;AAC9D+C,cAAI,EAAE,wDADwD;AAE9DG,cAAI,EAAE,CAAC;AACCI,sBAAU,EAAE;AADb,WAAD;AAFwD,SAAD,CAAxC,EAKrB,YAAY;AAAE,iBAAO,CAAC;AAAEP,gBAAI,EAAEC,SAAR;AAAmBC,sBAAU,EAAE,CAAC;AAC9CF,kBAAI,EAAE,oDADwC;AAE9CG,kBAAI,EAAE,CAAC,wDAAD;AAFwC,aAAD;AAA/B,WAAD,EAGX;AAAEH,gBAAI,EAAE,4DAAR;AAA+BE,sBAAU,EAAE,CAAC;AAC9CF,kBAAI,EAAE,oDADwC;AAE9CG,kBAAI,EAAE,CAAC,yDAAD;AAFwC,aAAD;AAA3C,WAHW,CAAP;AAMF,SAXS,EAWP,IAXO;AAWC,OAXhB;AAad;;;;AAIA;;;AAMA","file":"common-es5.js","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { Inject, InjectionToken, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, Injectable } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nlet CookieService = class CookieService {\n    constructor(\n    // The type `Document` may not be used here. Although a fix is on its way,\n    // we will go with `any` for now to support Angular 2.4.x projects.\n    // Issue: https://github.com/angular/angular/issues/12631\n    // Fix: https://github.com/angular/angular/pull/14894\n    document, \n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n        this.document = document;\n        this.platformId = platformId;\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n    check(name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        const regExp = this.getCookieRegExp(name);\n        const exists = regExp.test(this.document.cookie);\n        return exists;\n    }\n    /**\n     * @param name Cookie name\n     * @returns property value\n     */\n    get(name) {\n        if (this.documentIsAccessible && this.check(name)) {\n            name = encodeURIComponent(name);\n            const regExp = this.getCookieRegExp(name);\n            const result = regExp.exec(this.document.cookie);\n            return this.safeDecodeURIComponent(result[1]);\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * @returns all the cookies in json\n     */\n    getAll() {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        const cookies = {};\n        const document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach((currentCookie) => {\n                const [cookieName, cookieValue] = currentCookie.split('=');\n                cookies[this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = this.safeDecodeURIComponent(cookieValue);\n            });\n        }\n        return cookies;\n    }\n    /**\n     * @param name     Cookie name\n     * @param value    Cookie value\n     * @param expires  Number of days until the cookies expires or an actual `Date`\n     * @param path     Cookie path\n     * @param domain   Cookie domain\n     * @param secure   Secure flag\n     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n     */\n    set(name, value, expires, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        if (expires) {\n            if (typeof expires === 'number') {\n                const dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + expires.toUTCString() + ';';\n            }\n        }\n        if (path) {\n            cookieString += 'path=' + path + ';';\n        }\n        if (domain) {\n            cookieString += 'domain=' + domain + ';';\n        }\n        if (secure === false && sameSite === 'None') {\n            secure = true;\n            console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n                `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n        }\n        if (secure) {\n            cookieString += 'secure;';\n        }\n        cookieString += 'sameSite=' + sameSite + ';';\n        this.document.cookie = cookieString;\n    }\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    delete(name, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain, secure, sameSite);\n    }\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const cookies = this.getAll();\n        for (const cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    }\n    /**\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n    getCookieRegExp(name) {\n        const escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n    safeDecodeURIComponent(encodedURIComponent) {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        }\n        catch (_a) {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    }\n};\nCookieService.ɵfac = function CookieService_Factory(t) { return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID)); };\nCookieService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: InjectionToken, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nCookieService.ɵprov = ɵɵdefineInjectable({ factory: function CookieService_Factory() { return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID)); }, token: CookieService, providedIn: \"root\" });\nCookieService = __decorate([ __param(0, Inject(DOCUMENT)),\n    __param(1, Inject(PLATFORM_ID))\n], CookieService);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.InjectionToken, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, null); })();\n\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n\n//# sourceMappingURL=ngx-cookie-service.js.map"]}